
//=============================================================================
//                     JISON-LEX OPTIONS:

{
  lexerActionsUseYYLENG: '???',
  lexerActionsUseYYLINENO: '???',
  lexerActionsUseYYTEXT: '???',
  lexerActionsUseYYLOC: '???',
  lexerActionsUseParseError: '???',
  lexerActionsUseYYERROR: '???',
  lexerActionsUseLocationTracking: '???',
  lexerActionsUseMore: '???',
  lexerActionsUseUnput: '???',
  lexerActionsUseReject: '???',
  lexerActionsUseLess: '???',
  lexerActionsUseDisplayAPIs: '???',
  lexerActionsUseDescribeYYLOC: '???',
  lex_rule_dictionary: {
    rules: [
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "this.begin('TEST')",
        rule: 'enter-test\\b',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "this.begin('TEST')",
        rule: 'enter_test\\b',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'T'",
        rule: 'x\\b',
        start_condition: [
          'TEST',
          'EAT',
        ],
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'Z'",
        rule: 'z\\b',
        start_condition: [
          '*',
        ],
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: `this.begin('INITIAL'); return 'TY'`,
        rule: 'y\\b',
        start_condition: [
          'TEST',
        ],
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'return 10',
        rule: '"\'a\\b',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'return 11',
        rule: '"\'\\\\\\*i\\b',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'return 12',
        rule: 'a\\b',
      },
      {
        ast: {
          source: '',
          fault: false,
        },
        fault: false,
        srcCode: '',
        rule: '\\u0001',
      },
      {
        ast: {
          source: '',
          fault: false,
        },
        fault: false,
        srcCode: '',
        rule: '\\n',
      },
      {
        ast: {
          source: '',
          fault: false,
        },
        fault: false,
        srcCode: '',
        rule: 'ÿ',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'return true',
        rule: '\\[[^\\\\]\\]',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'baz2'",
        rule: 'f"oo\'bar\\b',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'baz'",
        rule: 'fo"obar\\b',
      },
    ],
    macros: {},
    startConditions: {
      TEST: 0,
      TEST2: 0,
      EAT: 1,
    },
    codeSections: [],
    importDecls: [],
    unknownDecls: [],
    options: {
      easy_keyword_rules: true,
    },
  },
  codeSections: [],
  importDecls: [],
  unknownDecls: [],
  options: {
    moduleType: 'commonjs',
    debug: false,
    enableDebugLogs: false,
    json: true,
    noMain: true,
    moduleMain: null,
    moduleMainImports: null,
    dumpSourceCodeOnFailure: false,
    throwErrorOnCompileFailure: true,
    doNotTestCompile: false,
    defaultModuleName: 'lexer',
    xregexp: false,
    lexerErrorsAreRecoverable: false,
    flex: false,
    backtrack_lexer: false,
    ranges: false,
    trackPosition: true,
    caseInsensitive: false,
    exportSourceCode: {
      enabled: false,
    },
    exportAST: false,
    prettyCfg: true,
    easy_keyword_rules: true,
  },
  conditions: {
    TEST: {
      rules: [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
      ],
      inclusive: true,
    },
    TEST2: {
      rules: [
        0,
        1,
        3,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
      ],
      inclusive: true,
    },
    EAT: {
      rules: [
        2,
        3,
      ],
      inclusive: false,
    },
    INITIAL: {
      rules: [
        0,
        1,
        3,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
      ],
      inclusive: true,
    },
  },
  performAction: `function lexer__performAction(yy, yyrulenumber, YY_START) {
            const yy_ = this;

            
const YYSTATE = YY_START;
switch(yyrulenumber) {
case 0 : 
/*! Conditions:: TEST TEST2 INITIAL */ 
/*! Rule::       enter-test\\b */ 
 this.begin('TEST') 
break;
case 1 : 
/*! Conditions:: TEST TEST2 INITIAL */ 
/*! Rule::       enter_test\\b */ 
 this.begin('TEST') 
break;
case 4 : 
/*! Conditions:: TEST */ 
/*! Rule::       y\\b */ 
 this.begin('INITIAL'); return 'TY' 
break;
case 8 : 
/*! Conditions:: TEST TEST2 INITIAL */ 
/*! Rule::       \\u0001 */ 
  
break;
case 9 : 
/*! Conditions:: TEST TEST2 INITIAL */ 
/*! Rule::       \\n */ 
  
break;
case 10 : 
/*! Conditions:: TEST TEST2 INITIAL */ 
/*! Rule::       ÿ */ 
  
break;
case 11 : 
/*! Conditions:: TEST TEST2 INITIAL */ 
/*! Rule::       \\[[^\\\\]\\] */ 
 return true 
break;
default:
  return this.simpleCaseActionClusters[yyrulenumber];
}
        }`,
  caseHelperInclude: `{

  /*! Conditions:: TEST EAT */ 
  /*! Rule::       x\\b */ 
   2 : 'T',
  /*! Conditions:: * */ 
  /*! Rule::       z\\b */ 
   3 : 'Z',
  /*! Conditions:: TEST TEST2 INITIAL */ 
  /*! Rule::       "'a\\b */ 
   5 : 10,
  /*! Conditions:: TEST TEST2 INITIAL */ 
  /*! Rule::       "'\\\\\\*i\\b */ 
   6 : 11,
  /*! Conditions:: TEST TEST2 INITIAL */ 
  /*! Rule::       a\\b */ 
   7 : 12,
  /*! Conditions:: TEST TEST2 INITIAL */ 
  /*! Rule::       f"oo'bar\\b */ 
   12 : 'baz2',
  /*! Conditions:: TEST TEST2 INITIAL */ 
  /*! Rule::       fo"obar\\b */ 
   13 : 'baz'
}`,
  rules: [
    {
      re: '/^(?:enter-test\\b)/',
      source: '^(?:enter-test\\b)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:enter-test\\b)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:enter_test\\b)/',
      source: '^(?:enter_test\\b)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:enter_test\\b)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:x\\b)/',
      source: '^(?:x\\b)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:x\\b)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:z\\b)/',
      source: '^(?:z\\b)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:z\\b)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:y\\b)/',
      source: '^(?:y\\b)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:y\\b)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:"\'a\\b)/',
      source: '^(?:"\'a\\b)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:"\'a\\b)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:"\'\\\\\\*i\\b)/',
      source: '^(?:"\'\\\\\\*i\\b)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:"\'\\\\\\*i\\b)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:a\\b)/',
      source: '^(?:a\\b)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:a\\b)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\u0001)/',
      source: '^(?:\\u0001)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\u0001)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\n)/',
      source: '^(?:\\n)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\n)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:ÿ)/',
      source: '^(?:ÿ)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:ÿ)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\[[^\\\\]\\])/',
      source: '^(?:\\[[^\\\\]\\])',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\[[^\\\\]\\])',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:f"oo\'bar\\b)/',
      source: '^(?:f"oo\'bar\\b)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:f"oo\'bar\\b)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:fo"obar\\b)/',
      source: '^(?:fo"obar\\b)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:fo"obar\\b)',
        flags: '',
        isNative: true,
      },
    },
  ],
  macros: {},
  regular_rule_count: 7,
  simple_rule_count: 7,
  conditionStack: [
    'INITIAL',
  ],
  actionInclude: '',
  moduleInclude: '',
  __in_rules_failure_analysis_mode__: false,
  is_custom_lexer: false,
}