
//=============================================================================
//                     JISON-LEX OPTIONS:

{
  lexerActionsUseYYLENG: '???',
  lexerActionsUseYYLINENO: '???',
  lexerActionsUseYYTEXT: '???',
  lexerActionsUseYYLOC: '???',
  lexerActionsUseParseError: '???',
  lexerActionsUseYYERROR: '???',
  lexerActionsUseLocationTracking: '???',
  lexerActionsUseMore: '???',
  lexerActionsUseUnput: '???',
  lexerActionsUseReject: '???',
  lexerActionsUseLess: '???',
  lexerActionsUseDisplayAPIs: '???',
  lexerActionsUseDescribeYYLOC: '???',
  lex_rule_dictionary: {
    rules: [
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'comment()',
        rule: '\\/\\*',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(AUTO)',
        rule: 'auto',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(BREAK)',
        rule: 'break',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(CASE)',
        rule: 'case',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(CHAR)',
        rule: 'char',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(CONST)',
        rule: 'const',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(CONTINUE)',
        rule: 'continue',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(DEFAULT)',
        rule: 'default',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(DO)',
        rule: 'do',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(DOUBLE)',
        rule: 'double',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(ELSE)',
        rule: 'else',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(ENUM)',
        rule: 'enum',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(EXTERN)',
        rule: 'extern',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(FLOAT)',
        rule: 'float',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(FOR)',
        rule: 'for',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(GOTO)',
        rule: 'goto',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(IF)',
        rule: 'if',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(INT)',
        rule: 'int',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(LONG)',
        rule: 'long',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(REGISTER)',
        rule: 'register',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(RETURN)',
        rule: 'return',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(SHORT)',
        rule: 'short',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(SIGNED)',
        rule: 'signed',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(SIZEOF)',
        rule: 'sizeof',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(STATIC)',
        rule: 'static',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(STRUCT)',
        rule: 'struct',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(SWITCH)',
        rule: 'switch',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(TYPEDEF)',
        rule: 'typedef',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(UNION)',
        rule: 'union',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(UNSIGNED)',
        rule: 'unsigned',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(VOID)',
        rule: 'void',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(VOLATILE)',
        rule: 'volatile',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(WHILE)',
        rule: 'while',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(check_type())',
        rule: '{L}({L}|{D})*',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(CONSTANT)',
        rule: '0[xX]{H}+{IS}?',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(CONSTANT)',
        rule: '0{D}+{IS}?',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(CONSTANT)',
        rule: '{D}+{IS}?',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(CONSTANT)',
        rule: `L?'(\\\\'|[^'])+'`,
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(CONSTANT)',
        rule: '{D}+{E}{FS}?',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(CONSTANT)',
        rule: '{D}*\\.{D}+({E})?{FS}?',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(CONSTANT)',
        rule: '{D}+\\.{D}*({E})?{FS}?',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(STRING_LITERAL)',
        rule: `L?"(\\\\"|[^"])*"`,
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(ELLIPSIS)',
        rule: '\\.\\.\\.',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(RIGHT_ASSIGN)',
        rule: '>>=',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(LEFT_ASSIGN)',
        rule: '<<=',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(ADD_ASSIGN)',
        rule: '\\+=',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(SUB_ASSIGN)',
        rule: '-=',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(MUL_ASSIGN)',
        rule: '\\*=',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(DIV_ASSIGN)',
        rule: '\\/=',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(MOD_ASSIGN)',
        rule: '%=',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(AND_ASSIGN)',
        rule: '&=',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(XOR_ASSIGN)',
        rule: '\\^=',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(OR_ASSIGN)',
        rule: '\\|=',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(RIGHT_OP)',
        rule: '>>',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(LEFT_OP)',
        rule: '<<',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(INC_OP)',
        rule: '\\+\\+',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(DEC_OP)',
        rule: '--',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(PTR_OP)',
        rule: '->',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(AND_OP)',
        rule: '&&',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(OR_OP)',
        rule: '\\|\\|',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(LE_OP)',
        rule: '<=',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(GE_OP)',
        rule: '>=',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(EQ_OP)',
        rule: '==',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count(); return(NE_OP)',
        rule: '!=',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "count(); return(';')",
        rule: ';',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "count(); return('{')",
        rule: '(\\{|<%)',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "count(); return('}')",
        rule: '(\\}|%>)',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "count(); return(',')",
        rule: ',',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "count(); return(':')",
        rule: ':',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "count(); return('=')",
        rule: '=',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "count(); return('(')",
        rule: '\\(',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "count(); return(')')",
        rule: '\\)',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "count(); return('[')",
        rule: '(\\[|<:)',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "count(); return(']')",
        rule: '(\\]|:>)',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "count(); return('.')",
        rule: '\\.',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "count(); return('&')",
        rule: '&',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "count(); return('!')",
        rule: '!',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "count(); return('~')",
        rule: '~',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "count(); return('-')",
        rule: '-',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "count(); return('+')",
        rule: '\\+',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "count(); return('*')",
        rule: '\\*',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "count(); return('/')",
        rule: '\\/',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "count(); return('%')",
        rule: '%',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "count(); return('<')",
        rule: '<',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "count(); return('>')",
        rule: '>',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "count(); return('^')",
        rule: '\\^',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "count(); return('|')",
        rule: '\\|',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "count(); return('?')",
        rule: '\\?',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'count()',
        rule: '[ \\t\\v\\n\\f]',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: '/* ignore bad characters */',
        rule: '.',
      },
    ],
    macros: {
      D: '[0-9]',
      L: '[a-zA-Z_]',
      H: '[a-fA-F0-9]',
      E: '[Ee][+-]?{D}+',
      FS: '[fFlL]',
      IS: '[uUlL]*',
    },
    startConditions: {},
    codeSections: [],
    importDecls: [],
    unknownDecls: [],
    actionInclude: `//#include <stdio.h>
//#include "y.tab.h"

void count()`,
  },
  codeSections: [],
  importDecls: [],
  unknownDecls: [],
  options: {
    moduleType: 'commonjs',
    debug: false,
    enableDebugLogs: false,
    json: true,
    noMain: true,
    moduleMain: null,
    moduleMainImports: null,
    dumpSourceCodeOnFailure: false,
    throwErrorOnCompileFailure: true,
    doNotTestCompile: false,
    defaultModuleName: 'lexer',
    xregexp: false,
    lexerErrorsAreRecoverable: false,
    flex: false,
    backtrack_lexer: false,
    ranges: false,
    trackPosition: true,
    caseInsensitive: false,
    exportSourceCode: {
      enabled: false,
    },
    exportAST: false,
    prettyCfg: true,
  },
  conditions: {
    INITIAL: {
      rules: [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
      ],
      inclusive: true,
    },
  },
  performAction: `function lexer__performAction(yy, yyrulenumber, YY_START) {
            const yy_ = this;

            //#include <stdio.h>
//#include "y.tab.h"

void count()
const YYSTATE = YY_START;
switch(yyrulenumber) {
case 0 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       \\/\\* */ 
 comment() 
break;
case 1 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       auto */ 
 count(); return(AUTO) 
break;
case 2 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       break */ 
 count(); return(BREAK) 
break;
case 3 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       case */ 
 count(); return(CASE) 
break;
case 4 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       char */ 
 count(); return(CHAR) 
break;
case 5 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       const */ 
 count(); return(CONST) 
break;
case 6 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       continue */ 
 count(); return(CONTINUE) 
break;
case 7 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       default */ 
 count(); return(DEFAULT) 
break;
case 8 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       do */ 
 count(); return(DO) 
break;
case 9 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       double */ 
 count(); return(DOUBLE) 
break;
case 10 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       else */ 
 count(); return(ELSE) 
break;
case 11 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       enum */ 
 count(); return(ENUM) 
break;
case 12 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       extern */ 
 count(); return(EXTERN) 
break;
case 13 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       float */ 
 count(); return(FLOAT) 
break;
case 14 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       for */ 
 count(); return(FOR) 
break;
case 15 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       goto */ 
 count(); return(GOTO) 
break;
case 16 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       if */ 
 count(); return(IF) 
break;
case 17 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       int */ 
 count(); return(INT) 
break;
case 18 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       long */ 
 count(); return(LONG) 
break;
case 19 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       register */ 
 count(); return(REGISTER) 
break;
case 20 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       return */ 
 count(); return(RETURN) 
break;
case 21 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       short */ 
 count(); return(SHORT) 
break;
case 22 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       signed */ 
 count(); return(SIGNED) 
break;
case 23 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       sizeof */ 
 count(); return(SIZEOF) 
break;
case 24 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       static */ 
 count(); return(STATIC) 
break;
case 25 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       struct */ 
 count(); return(STRUCT) 
break;
case 26 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       switch */ 
 count(); return(SWITCH) 
break;
case 27 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       typedef */ 
 count(); return(TYPEDEF) 
break;
case 28 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       union */ 
 count(); return(UNION) 
break;
case 29 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       unsigned */ 
 count(); return(UNSIGNED) 
break;
case 30 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       void */ 
 count(); return(VOID) 
break;
case 31 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       volatile */ 
 count(); return(VOLATILE) 
break;
case 32 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       while */ 
 count(); return(WHILE) 
break;
case 33 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       {L}({L}|{D})* */ 
 count(); return(check_type()) 
break;
case 34 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       0[xX]{H}+{IS}? */ 
 count(); return(CONSTANT) 
break;
case 35 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       0{D}+{IS}? */ 
 count(); return(CONSTANT) 
break;
case 36 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       {D}+{IS}? */ 
 count(); return(CONSTANT) 
break;
case 37 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       L?'(\\\\'|[^'])+' */ 
 count(); return(CONSTANT) 
break;
case 38 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       {D}+{E}{FS}? */ 
 count(); return(CONSTANT) 
break;
case 39 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       {D}*\\.{D}+({E})?{FS}? */ 
 count(); return(CONSTANT) 
break;
case 40 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       {D}+\\.{D}*({E})?{FS}? */ 
 count(); return(CONSTANT) 
break;
case 41 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       L?"(\\\\"|[^"])*" */ 
 count(); return(STRING_LITERAL) 
break;
case 42 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       \\.\\.\\. */ 
 count(); return(ELLIPSIS) 
break;
case 43 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       >>= */ 
 count(); return(RIGHT_ASSIGN) 
break;
case 44 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       <<= */ 
 count(); return(LEFT_ASSIGN) 
break;
case 45 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       \\+= */ 
 count(); return(ADD_ASSIGN) 
break;
case 46 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       -= */ 
 count(); return(SUB_ASSIGN) 
break;
case 47 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       \\*= */ 
 count(); return(MUL_ASSIGN) 
break;
case 48 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       \\/= */ 
 count(); return(DIV_ASSIGN) 
break;
case 49 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       %= */ 
 count(); return(MOD_ASSIGN) 
break;
case 50 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       &= */ 
 count(); return(AND_ASSIGN) 
break;
case 51 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       \\^= */ 
 count(); return(XOR_ASSIGN) 
break;
case 52 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       \\|= */ 
 count(); return(OR_ASSIGN) 
break;
case 53 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       >> */ 
 count(); return(RIGHT_OP) 
break;
case 54 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       << */ 
 count(); return(LEFT_OP) 
break;
case 55 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       \\+\\+ */ 
 count(); return(INC_OP) 
break;
case 56 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       -- */ 
 count(); return(DEC_OP) 
break;
case 57 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       -> */ 
 count(); return(PTR_OP) 
break;
case 58 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       && */ 
 count(); return(AND_OP) 
break;
case 59 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       \\|\\| */ 
 count(); return(OR_OP) 
break;
case 60 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       <= */ 
 count(); return(LE_OP) 
break;
case 61 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       >= */ 
 count(); return(GE_OP) 
break;
case 62 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       == */ 
 count(); return(EQ_OP) 
break;
case 63 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       != */ 
 count(); return(NE_OP) 
break;
case 64 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       ; */ 
 count(); return ';' 
break;
case 65 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       (\\{|<%) */ 
 count(); return '{' 
break;
case 66 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       (\\}|%>) */ 
 count(); return '}' 
break;
case 67 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       , */ 
 count(); return ',' 
break;
case 68 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       : */ 
 count(); return ':' 
break;
case 69 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       = */ 
 count(); return '=' 
break;
case 70 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       \\( */ 
 count(); return '(' 
break;
case 71 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       \\) */ 
 count(); return ')' 
break;
case 72 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       (\\[|<:) */ 
 count(); return '[' 
break;
case 73 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       (\\]|:>) */ 
 count(); return ']' 
break;
case 74 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       \\. */ 
 count(); return '.' 
break;
case 75 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       & */ 
 count(); return '&' 
break;
case 76 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       ! */ 
 count(); return '!' 
break;
case 77 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       ~ */ 
 count(); return '~' 
break;
case 78 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       - */ 
 count(); return '-' 
break;
case 79 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       \\+ */ 
 count(); return '+' 
break;
case 80 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       \\* */ 
 count(); return '*' 
break;
case 81 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       \\/ */ 
 count(); return '/' 
break;
case 82 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       % */ 
 count(); return '%' 
break;
case 83 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       < */ 
 count(); return '<' 
break;
case 84 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       > */ 
 count(); return '>' 
break;
case 85 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       \\^ */ 
 count(); return '^' 
break;
case 86 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       \\| */ 
 count(); return '|' 
break;
case 87 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       \\? */ 
 count(); return '?' 
break;
case 88 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       [ \\t\\v\\n\\f] */ 
 count() 
break;
case 89 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       . */ 
 /* ignore bad characters */ 
break;
}
        }`,
  caseHelperInclude: `{

}`,
  rules: [
    {
      re: '/^(?:\\/\\*)/',
      source: '^(?:\\/\\*)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\/\\*)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:auto)/',
      source: '^(?:auto)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:auto)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:break)/',
      source: '^(?:break)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:break)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:case)/',
      source: '^(?:case)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:case)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:char)/',
      source: '^(?:char)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:char)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:const)/',
      source: '^(?:const)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:const)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:continue)/',
      source: '^(?:continue)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:continue)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:default)/',
      source: '^(?:default)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:default)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:do)/',
      source: '^(?:do)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:do)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:double)/',
      source: '^(?:double)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:double)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:else)/',
      source: '^(?:else)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:else)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:enum)/',
      source: '^(?:enum)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:enum)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:extern)/',
      source: '^(?:extern)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:extern)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:float)/',
      source: '^(?:float)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:float)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:for)/',
      source: '^(?:for)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:for)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:goto)/',
      source: '^(?:goto)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:goto)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:if)/',
      source: '^(?:if)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:if)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:int)/',
      source: '^(?:int)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:int)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:long)/',
      source: '^(?:long)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:long)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:register)/',
      source: '^(?:register)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:register)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:return)/',
      source: '^(?:return)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:return)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:short)/',
      source: '^(?:short)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:short)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:signed)/',
      source: '^(?:signed)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:signed)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:sizeof)/',
      source: '^(?:sizeof)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:sizeof)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:static)/',
      source: '^(?:static)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:static)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:struct)/',
      source: '^(?:struct)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:struct)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:switch)/',
      source: '^(?:switch)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:switch)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:typedef)/',
      source: '^(?:typedef)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:typedef)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:union)/',
      source: '^(?:union)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:union)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:unsigned)/',
      source: '^(?:unsigned)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:unsigned)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:void)/',
      source: '^(?:void)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:void)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:volatile)/',
      source: '^(?:volatile)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:volatile)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:while)/',
      source: '^(?:while)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:while)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:([a-zA-Z_])(([a-zA-Z_])|([0-9]))*)/',
      source: '^(?:([a-zA-Z_])(([a-zA-Z_])|([0-9]))*)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:([a-zA-Z_])(([a-zA-Z_])|([0-9]))*)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:0[xX]([a-fA-F0-9])+([uUlL]*)?)/',
      source: '^(?:0[xX]([a-fA-F0-9])+([uUlL]*)?)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:0[xX]([a-fA-F0-9])+([uUlL]*)?)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:0([0-9])+([uUlL]*)?)/',
      source: '^(?:0([0-9])+([uUlL]*)?)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:0([0-9])+([uUlL]*)?)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:([0-9])+([uUlL]*)?)/',
      source: '^(?:([0-9])+([uUlL]*)?)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:([0-9])+([uUlL]*)?)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: `/^(?:L?'(\\\\'|[^'])+')/`,
      source: `^(?:L?'(\\\\'|[^'])+')`,
      flags: '',
      xregexp: {
        captureNames: null,
        source: `^(?:L?'(\\\\'|[^'])+')`,
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:([0-9])+([Ee][+-]?(?:[0-9])+)([fFlL])?)/',
      source: '^(?:([0-9])+([Ee][+-]?(?:[0-9])+)([fFlL])?)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:([0-9])+([Ee][+-]?(?:[0-9])+)([fFlL])?)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:([0-9])*\\.([0-9])+(([Ee][+-]?(?:[0-9])+))?([fFlL])?)/',
      source: '^(?:([0-9])*\\.([0-9])+(([Ee][+-]?(?:[0-9])+))?([fFlL])?)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:([0-9])*\\.([0-9])+(([Ee][+-]?(?:[0-9])+))?([fFlL])?)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:([0-9])+\\.([0-9])*(([Ee][+-]?(?:[0-9])+))?([fFlL])?)/',
      source: '^(?:([0-9])+\\.([0-9])*(([Ee][+-]?(?:[0-9])+))?([fFlL])?)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:([0-9])+\\.([0-9])*(([Ee][+-]?(?:[0-9])+))?([fFlL])?)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: `/^(?:L?"(\\\\"|[^"])*")/`,
      source: `^(?:L?"(\\\\"|[^"])*")`,
      flags: '',
      xregexp: {
        captureNames: null,
        source: `^(?:L?"(\\\\"|[^"])*")`,
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\.\\.\\.)/',
      source: '^(?:\\.\\.\\.)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\.\\.\\.)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:>>=)/',
      source: '^(?:>>=)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:>>=)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:<<=)/',
      source: '^(?:<<=)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:<<=)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\+=)/',
      source: '^(?:\\+=)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\+=)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:-=)/',
      source: '^(?:-=)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:-=)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\*=)/',
      source: '^(?:\\*=)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\*=)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\/=)/',
      source: '^(?:\\/=)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\/=)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:%=)/',
      source: '^(?:%=)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:%=)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:&=)/',
      source: '^(?:&=)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:&=)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\^=)/',
      source: '^(?:\\^=)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\^=)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\|=)/',
      source: '^(?:\\|=)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\|=)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:>>)/',
      source: '^(?:>>)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:>>)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:<<)/',
      source: '^(?:<<)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:<<)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\+\\+)/',
      source: '^(?:\\+\\+)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\+\\+)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:--)/',
      source: '^(?:--)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:--)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:->)/',
      source: '^(?:->)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:->)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:&&)/',
      source: '^(?:&&)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:&&)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\|\\|)/',
      source: '^(?:\\|\\|)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\|\\|)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:<=)/',
      source: '^(?:<=)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:<=)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:>=)/',
      source: '^(?:>=)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:>=)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:==)/',
      source: '^(?:==)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:==)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:!=)/',
      source: '^(?:!=)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:!=)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:;)/',
      source: '^(?:;)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:;)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:(\\{|<%))/',
      source: '^(?:(\\{|<%))',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:(\\{|<%))',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:(\\}|%>))/',
      source: '^(?:(\\}|%>))',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:(\\}|%>))',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:,)/',
      source: '^(?:,)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:,)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?::)/',
      source: '^(?::)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?::)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:=)/',
      source: '^(?:=)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:=)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\()/',
      source: '^(?:\\()',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\()',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\))/',
      source: '^(?:\\))',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\))',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:(\\[|<:))/',
      source: '^(?:(\\[|<:))',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:(\\[|<:))',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:(\\]|:>))/',
      source: '^(?:(\\]|:>))',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:(\\]|:>))',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\.)/',
      source: '^(?:\\.)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\.)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:&)/',
      source: '^(?:&)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:&)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:!)/',
      source: '^(?:!)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:!)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:~)/',
      source: '^(?:~)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:~)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:-)/',
      source: '^(?:-)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:-)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\+)/',
      source: '^(?:\\+)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\+)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\*)/',
      source: '^(?:\\*)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\*)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\/)/',
      source: '^(?:\\/)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\/)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:%)/',
      source: '^(?:%)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:%)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:<)/',
      source: '^(?:<)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:<)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:>)/',
      source: '^(?:>)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:>)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\^)/',
      source: '^(?:\\^)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\^)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\|)/',
      source: '^(?:\\|)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\|)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\?)/',
      source: '^(?:\\?)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\?)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:[ \\t\\v\\n\\f])/',
      source: '^(?:[ \\t\\v\\n\\f])',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:[ \\t\\v\\n\\f])',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:.)/',
      source: '^(?:.)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:.)',
        flags: '',
        isNative: true,
      },
    },
  ],
  macros: {
    D: {
      in_set: '\\d',
      elsewhere: '[0-9]',
      raw: '[0-9]',
    },
    L: {
      in_set: 'A-Z_a-z',
      elsewhere: '[a-zA-Z_]',
      raw: '[a-zA-Z_]',
    },
    H: {
      in_set: '0-9A-Fa-f',
      elsewhere: '[a-fA-F0-9]',
      raw: '[a-fA-F0-9]',
    },
    E: {
      in_set: {
        message: '[macro [E] is unsuitable for use inside regex set expressions: "[[Ee][+-]?\\d+]"]',
        name: 'Error',
      },
      elsewhere: '[Ee][+-]?(?:[0-9])+',
      raw: '[Ee][+-]?{D}+',
    },
    FS: {
      in_set: 'FLfl',
      elsewhere: '[fFlL]',
      raw: '[fFlL]',
    },
    IS: {
      in_set: {
        message: '[macro [IS] is unsuitable for use inside regex set expressions: "[[uUlL]*]"]',
        name: 'Error',
      },
      elsewhere: '[uUlL]*',
      raw: '[uUlL]*',
    },
  },
  regular_rule_count: 90,
  simple_rule_count: 0,
  conditionStack: [
    'INITIAL',
  ],
  actionInclude: `//#include <stdio.h>
//#include "y.tab.h"

void count()`,
  moduleInclude: '',
  __in_rules_failure_analysis_mode__: false,
  is_custom_lexer: false,
}