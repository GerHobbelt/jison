
//=============================================================================
//                     JISON-LEX OPTIONS:

{
  lexerActionsUseYYLENG: '???',
  lexerActionsUseYYLINENO: '???',
  lexerActionsUseYYTEXT: '???',
  lexerActionsUseYYLOC: '???',
  lexerActionsUseParseError: '???',
  lexerActionsUseYYERROR: '???',
  lexerActionsUseLocationTracking: '???',
  lexerActionsUseMore: '???',
  lexerActionsUseUnput: '???',
  lexerActionsUseReject: '???',
  lexerActionsUseLess: '???',
  lexerActionsUseDisplayAPIs: '???',
  lexerActionsUseDescribeYYLOC: '???',
  lex_rule_dictionary: {
    rules: [
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: 'comment()',
        rule: '\\/\\*',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: '/* consume //-comment */',
        rule: '\\/\\/.*',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'AUTO'",
        rule: 'auto\\b',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'BREAK'",
        rule: 'break\\b',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'CASE'",
        rule: 'case\\b',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'CHAR'",
        rule: 'char\\b',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'CONST'",
        rule: 'const\\b',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'CONTINUE'",
        rule: 'continue\\b',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'DEFAULT'",
        rule: 'default\\b',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'DO'",
        rule: 'do\\b',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'DOUBLE'",
        rule: 'double\\b',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'ELSE'",
        rule: 'else\\b',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'ENUM'",
        rule: 'enum\\b',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'EXTERN'",
        rule: 'extern\\b',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'FLOAT'",
        rule: 'float\\b',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'FOR'",
        rule: 'for\\b',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'GOTO'",
        rule: 'goto\\b',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'IF'",
        rule: 'if\\b',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'INLINE'",
        rule: 'inline\\b',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'INT'",
        rule: 'int\\b',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'LONG'",
        rule: 'long\\b',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'REGISTER'",
        rule: 'register\\b',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'RESTRICT'",
        rule: 'restrict\\b',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'RETURN'",
        rule: 'return\\b',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'SHORT'",
        rule: 'short\\b',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'SIGNED'",
        rule: 'signed\\b',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'SIZEOF'",
        rule: 'sizeof\\b',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'STATIC'",
        rule: 'static\\b',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'STRUCT'",
        rule: 'struct\\b',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'SWITCH'",
        rule: 'switch\\b',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'TYPEDEF'",
        rule: 'typedef\\b',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'UNION'",
        rule: 'union\\b',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'UNSIGNED'",
        rule: 'unsigned\\b',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'VOID'",
        rule: 'void\\b',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'VOLATILE'",
        rule: 'volatile\\b',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'WHILE'",
        rule: 'while\\b',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'ALIGNAS'",
        rule: '_Alignas\\b',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'ALIGNOF'",
        rule: '_Alignof\\b',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'ATOMIC'",
        rule: '_Atomic\\b',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'BOOL'",
        rule: '_Bool\\b',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'COMPLEX'",
        rule: '_Complex\\b',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'GENERIC'",
        rule: '_Generic\\b',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'IMAGINARY'",
        rule: '_Imaginary\\b',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'NORETURN'",
        rule: '_Noreturn\\b',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'STATIC_ASSERT'",
        rule: '_Static_assert\\b',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'THREAD_LOCAL'",
        rule: '_Thread_local\\b',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'FUNC_NAME'",
        rule: '__func__\\b',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: `// return check_type(); 

                          switch (sym_type(yytext)) {
                          case TYPEDEF_NAME:                /* previously defined */
                            return 'TYPEDEF_NAME';

                          case ENUMERATION_CONSTANT:        /* previously defined */
                            return 'ENUMERATION_CONSTANT';

                          default:                          /* includes undefined */
                            return 'IDENTIFIER';
                          }`,
        rule: '{L}{A}*',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'I_CONSTANT'",
        rule: '{HP}{H}+{IS}?',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'I_CONSTANT'",
        rule: '{NZ}{D}*{IS}?',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'I_CONSTANT'",
        rule: '0{O}*{IS}?',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'I_CONSTANT'",
        rule: `{CP}?'([^'\\\\\\n]|{ES})+'`,
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'F_CONSTANT'",
        rule: '{D}+{E}{FS}?',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'F_CONSTANT'",
        rule: '{D}*\\.{D}+{E}?{FS}?',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'F_CONSTANT'",
        rule: '{D}+\\.{E}?{FS}?',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'F_CONSTANT'",
        rule: '{HP}{H}+{P}{FS}?',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'F_CONSTANT'",
        rule: '{HP}{H}*\\.{H}+{P}{FS}?',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'F_CONSTANT'",
        rule: '{HP}{H}+\\.{P}{FS}?',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'STRING_LITERAL'",
        rule: `({SP}?"([^\\"\\\\\\n]|{ES})*"{WS}*)+`,
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'ELLIPSIS'",
        rule: '\\.\\.\\.',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'RIGHT_ASSIGN'",
        rule: '>>=',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'LEFT_ASSIGN'",
        rule: '<<=',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'ADD_ASSIGN'",
        rule: '\\+=',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'SUB_ASSIGN'",
        rule: '-=',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'MUL_ASSIGN'",
        rule: '\\*=',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'DIV_ASSIGN'",
        rule: '\\/=',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'MOD_ASSIGN'",
        rule: '%=',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'AND_ASSIGN'",
        rule: '&=',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'XOR_ASSIGN'",
        rule: '\\^=',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'OR_ASSIGN'",
        rule: '\\|=',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'RIGHT_OP'",
        rule: '>>',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'LEFT_OP'",
        rule: '<<',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'INC_OP'",
        rule: '\\+\\+',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'DEC_OP'",
        rule: '--',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'PTR_OP'",
        rule: '->',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'AND_OP'",
        rule: '&&',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'OR_OP'",
        rule: '\\|\\|',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'LE_OP'",
        rule: '<=',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'GE_OP'",
        rule: '>=',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'EQ_OP'",
        rule: '==',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'NE_OP'",
        rule: '!=',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return ';'",
        rule: ';',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return '{'",
        rule: '(\\{|<%)',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return '}'",
        rule: '(\\}|%>)',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return ','",
        rule: ',',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return ':'",
        rule: ':',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return '='",
        rule: '=',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return '('",
        rule: '\\(',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return ')'",
        rule: '\\)',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return '['",
        rule: '(\\[|<:)',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return ']'",
        rule: '(\\]|:>)',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return '.'",
        rule: '\\.',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return '&'",
        rule: '&',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return '!'",
        rule: '!',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return '~'",
        rule: '~',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return '-'",
        rule: '-',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return '+'",
        rule: '\\+',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return '*'",
        rule: '\\*',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return '/'",
        rule: '\\/',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return '%'",
        rule: '%',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return '<'",
        rule: '<',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return '>'",
        rule: '>',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return '^'",
        rule: '\\^',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return '|'",
        rule: '\\|',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return '?'",
        rule: '\\?',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: '/* whitespace separates tokens */',
        rule: '{WS}+',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: '/* discard bad characters */',
        rule: '.',
      },
    ],
    moduleInclude: `// 
// int yywrap(void)        /* called at end of input */
// {
//     return 1;           /* terminate now */
// }
// 
// static void comment(void)
// {
//     int c;
// 
//     while ((c = input()) != 0)
//         if (c == '*')
//         {
//             while ((c = input()) == '*')
//                 ;
// 
//             if (c == '/')
//                 return;
// 
//             if (c == 0)
//                 break;
//         }
//     yyerror("unterminated comment");
// }
// 
// static int check_type(void)
// {
//     switch (sym_type(yytext))
//     {
//     case TYPEDEF_NAME:                /* previously defined */
//         return TYPEDEF_NAME;
//     case ENUMERATION_CONSTANT:        /* previously defined */
//         return ENUMERATION_CONSTANT;
//     default:                          /* includes undefined */
//         return IDENTIFIER;
//     }
// }
// 
//`,
    macros: {
      O: '[0-7]',
      D: '[0-9]',
      NZ: '[1-9]',
      L: '[a-zA-Z_]',
      A: '[a-zA-Z_0-9]',
      H: '[a-fA-F0-9]',
      HP: '(0[xX])',
      E: '([Ee][+-]?{D}+)',
      P: '([Pp][+-]?{D}+)',
      FS: '(f|F|l|L)',
      IS: '(((u|U)(l|L|ll|LL)?)|((l|L|ll|LL)(u|U)?))',
      CP: '(u|U|L)',
      SP: '(u8|u|U|L)',
      ES: '(\\\\([\'"\\?\\\\abfnrtv]|[0-7]{1,3}|x[a-fA-F0-9]+))',
      WS: '[ \\t\\v\\n\\f]',
    },
    startConditions: {},
    codeSections: [],
    importDecls: [],
    unknownDecls: [],
    options: {
      easy_keyword_rules: true,
    },
    actionInclude: `// #include <stdio.h>
// #include "y.tab.h"
// 
// extern void yyerror(const char *);  /* prints grammar violation message */
// 
// extern int sym_type(const char *);  /* returns type from symbol table */
// 
// #define sym_type(identifier) IDENTIFIER /* with no symbol table, fake it */

const TYPEDEF_NAME = 3;
const ENUMERATION_CONSTANT = 4;

function sym_type(identifier) {
  return 0;
}

// 
// static void comment(void);
// static int check_type(void)`,
  },
  codeSections: [],
  importDecls: [],
  unknownDecls: [],
  options: {
    moduleType: 'commonjs',
    debug: false,
    enableDebugLogs: false,
    json: true,
    noMain: true,
    moduleMain: null,
    moduleMainImports: null,
    dumpSourceCodeOnFailure: false,
    throwErrorOnCompileFailure: true,
    doNotTestCompile: false,
    defaultModuleName: 'lexer',
    xregexp: false,
    lexerErrorsAreRecoverable: false,
    flex: false,
    backtrack_lexer: false,
    ranges: false,
    trackPosition: true,
    caseInsensitive: false,
    exportSourceCode: {
      enabled: false,
    },
    exportAST: false,
    prettyCfg: true,
    easy_keyword_rules: true,
  },
  conditions: {
    INITIAL: {
      rules: [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
      ],
      inclusive: true,
    },
  },
  performAction: `function lexer__performAction(yy, yyrulenumber, YY_START) {
            const yy_ = this;

            // #include <stdio.h>
// #include "y.tab.h"
// 
// extern void yy_.yyerror(const char *);  /* prints grammar violation message */
// 
// extern int sym_type(const char *);  /* returns type from symbol table */
// 
// #define sym_type(identifier) IDENTIFIER /* with no symbol table, fake it */

const TYPEDEF_NAME = 3;
const ENUMERATION_CONSTANT = 4;

function sym_type(identifier) {
  return 0;
}

// 
// static void comment(void);
// static int check_type(void)
const YYSTATE = YY_START;
switch(yyrulenumber) {
case 0 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       \\/\\* */ 
 comment() 
break;
case 1 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       \\/\\/.* */ 
 /* consume //-comment */ 
break;
case 47 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       {L}{A}* */ 
 // return check_type(); 

                          switch (sym_type(yy_.yytext)) {
                          case TYPEDEF_NAME:                /* previously defined */
                            return 'TYPEDEF_NAME';

                          case ENUMERATION_CONSTANT:        /* previously defined */
                            return 'ENUMERATION_CONSTANT';

                          default:                          /* includes undefined */
                            return 'IDENTIFIER';
                          } 
break;
case 105 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       {WS}+ */ 
 /* whitespace separates tokens */ 
break;
case 106 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       . */ 
 /* discard bad characters */ 
break;
default:
  return this.simpleCaseActionClusters[yyrulenumber];
}
        }`,
  caseHelperInclude: `{

  /*! Conditions:: INITIAL */ 
  /*! Rule::       auto\\b */ 
   2 : 'AUTO',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       break\\b */ 
   3 : 'BREAK',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       case\\b */ 
   4 : 'CASE',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       char\\b */ 
   5 : 'CHAR',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       const\\b */ 
   6 : 'CONST',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       continue\\b */ 
   7 : 'CONTINUE',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       default\\b */ 
   8 : 'DEFAULT',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       do\\b */ 
   9 : 'DO',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       double\\b */ 
   10 : 'DOUBLE',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       else\\b */ 
   11 : 'ELSE',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       enum\\b */ 
   12 : 'ENUM',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       extern\\b */ 
   13 : 'EXTERN',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       float\\b */ 
   14 : 'FLOAT',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       for\\b */ 
   15 : 'FOR',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       goto\\b */ 
   16 : 'GOTO',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       if\\b */ 
   17 : 'IF',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       inline\\b */ 
   18 : 'INLINE',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       int\\b */ 
   19 : 'INT',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       long\\b */ 
   20 : 'LONG',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       register\\b */ 
   21 : 'REGISTER',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       restrict\\b */ 
   22 : 'RESTRICT',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       return\\b */ 
   23 : 'RETURN',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       short\\b */ 
   24 : 'SHORT',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       signed\\b */ 
   25 : 'SIGNED',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       sizeof\\b */ 
   26 : 'SIZEOF',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       static\\b */ 
   27 : 'STATIC',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       struct\\b */ 
   28 : 'STRUCT',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       switch\\b */ 
   29 : 'SWITCH',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       typedef\\b */ 
   30 : 'TYPEDEF',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       union\\b */ 
   31 : 'UNION',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       unsigned\\b */ 
   32 : 'UNSIGNED',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       void\\b */ 
   33 : 'VOID',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       volatile\\b */ 
   34 : 'VOLATILE',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       while\\b */ 
   35 : 'WHILE',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       _Alignas\\b */ 
   36 : 'ALIGNAS',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       _Alignof\\b */ 
   37 : 'ALIGNOF',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       _Atomic\\b */ 
   38 : 'ATOMIC',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       _Bool\\b */ 
   39 : 'BOOL',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       _Complex\\b */ 
   40 : 'COMPLEX',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       _Generic\\b */ 
   41 : 'GENERIC',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       _Imaginary\\b */ 
   42 : 'IMAGINARY',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       _Noreturn\\b */ 
   43 : 'NORETURN',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       _Static_assert\\b */ 
   44 : 'STATIC_ASSERT',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       _Thread_local\\b */ 
   45 : 'THREAD_LOCAL',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       __func__\\b */ 
   46 : 'FUNC_NAME',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       {HP}{H}+{IS}? */ 
   48 : 'I_CONSTANT',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       {NZ}{D}*{IS}? */ 
   49 : 'I_CONSTANT',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       0{O}*{IS}? */ 
   50 : 'I_CONSTANT',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       {CP}?'([^'\\\\\\n]|{ES})+' */ 
   51 : 'I_CONSTANT',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       {D}+{E}{FS}? */ 
   52 : 'F_CONSTANT',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       {D}*\\.{D}+{E}?{FS}? */ 
   53 : 'F_CONSTANT',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       {D}+\\.{E}?{FS}? */ 
   54 : 'F_CONSTANT',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       {HP}{H}+{P}{FS}? */ 
   55 : 'F_CONSTANT',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       {HP}{H}*\\.{H}+{P}{FS}? */ 
   56 : 'F_CONSTANT',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       {HP}{H}+\\.{P}{FS}? */ 
   57 : 'F_CONSTANT',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       ({SP}?"([^\\"\\\\\\n]|{ES})*"{WS}*)+ */ 
   58 : 'STRING_LITERAL',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \\.\\.\\. */ 
   59 : 'ELLIPSIS',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       >>= */ 
   60 : 'RIGHT_ASSIGN',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       <<= */ 
   61 : 'LEFT_ASSIGN',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \\+= */ 
   62 : 'ADD_ASSIGN',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       -= */ 
   63 : 'SUB_ASSIGN',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \\*= */ 
   64 : 'MUL_ASSIGN',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \\/= */ 
   65 : 'DIV_ASSIGN',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       %= */ 
   66 : 'MOD_ASSIGN',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       &= */ 
   67 : 'AND_ASSIGN',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \\^= */ 
   68 : 'XOR_ASSIGN',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \\|= */ 
   69 : 'OR_ASSIGN',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       >> */ 
   70 : 'RIGHT_OP',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       << */ 
   71 : 'LEFT_OP',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \\+\\+ */ 
   72 : 'INC_OP',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       -- */ 
   73 : 'DEC_OP',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       -> */ 
   74 : 'PTR_OP',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       && */ 
   75 : 'AND_OP',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \\|\\| */ 
   76 : 'OR_OP',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       <= */ 
   77 : 'LE_OP',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       >= */ 
   78 : 'GE_OP',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       == */ 
   79 : 'EQ_OP',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       != */ 
   80 : 'NE_OP',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       ; */ 
   81 : ';',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       (\\{|<%) */ 
   82 : '{',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       (\\}|%>) */ 
   83 : '}',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       , */ 
   84 : ',',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       : */ 
   85 : ':',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       = */ 
   86 : '=',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \\( */ 
   87 : '(',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \\) */ 
   88 : ')',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       (\\[|<:) */ 
   89 : '[',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       (\\]|:>) */ 
   90 : ']',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \\. */ 
   91 : '.',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       & */ 
   92 : '&',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       ! */ 
   93 : '!',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       ~ */ 
   94 : '~',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       - */ 
   95 : '-',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \\+ */ 
   96 : '+',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \\* */ 
   97 : '*',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \\/ */ 
   98 : '/',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       % */ 
   99 : '%',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       < */ 
   100 : '<',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       > */ 
   101 : '>',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \\^ */ 
   102 : '^',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \\| */ 
   103 : '|',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \\? */ 
   104 : '?'
}`,
  rules: [
    {
      re: '/^(?:\\/\\*)/',
      source: '^(?:\\/\\*)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\/\\*)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\/\\/.*)/',
      source: '^(?:\\/\\/.*)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\/\\/.*)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:auto\\b)/',
      source: '^(?:auto\\b)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:auto\\b)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:break\\b)/',
      source: '^(?:break\\b)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:break\\b)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:case\\b)/',
      source: '^(?:case\\b)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:case\\b)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:char\\b)/',
      source: '^(?:char\\b)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:char\\b)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:const\\b)/',
      source: '^(?:const\\b)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:const\\b)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:continue\\b)/',
      source: '^(?:continue\\b)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:continue\\b)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:default\\b)/',
      source: '^(?:default\\b)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:default\\b)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:do\\b)/',
      source: '^(?:do\\b)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:do\\b)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:double\\b)/',
      source: '^(?:double\\b)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:double\\b)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:else\\b)/',
      source: '^(?:else\\b)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:else\\b)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:enum\\b)/',
      source: '^(?:enum\\b)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:enum\\b)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:extern\\b)/',
      source: '^(?:extern\\b)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:extern\\b)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:float\\b)/',
      source: '^(?:float\\b)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:float\\b)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:for\\b)/',
      source: '^(?:for\\b)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:for\\b)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:goto\\b)/',
      source: '^(?:goto\\b)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:goto\\b)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:if\\b)/',
      source: '^(?:if\\b)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:if\\b)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:inline\\b)/',
      source: '^(?:inline\\b)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:inline\\b)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:int\\b)/',
      source: '^(?:int\\b)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:int\\b)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:long\\b)/',
      source: '^(?:long\\b)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:long\\b)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:register\\b)/',
      source: '^(?:register\\b)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:register\\b)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:restrict\\b)/',
      source: '^(?:restrict\\b)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:restrict\\b)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:return\\b)/',
      source: '^(?:return\\b)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:return\\b)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:short\\b)/',
      source: '^(?:short\\b)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:short\\b)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:signed\\b)/',
      source: '^(?:signed\\b)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:signed\\b)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:sizeof\\b)/',
      source: '^(?:sizeof\\b)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:sizeof\\b)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:static\\b)/',
      source: '^(?:static\\b)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:static\\b)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:struct\\b)/',
      source: '^(?:struct\\b)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:struct\\b)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:switch\\b)/',
      source: '^(?:switch\\b)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:switch\\b)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:typedef\\b)/',
      source: '^(?:typedef\\b)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:typedef\\b)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:union\\b)/',
      source: '^(?:union\\b)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:union\\b)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:unsigned\\b)/',
      source: '^(?:unsigned\\b)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:unsigned\\b)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:void\\b)/',
      source: '^(?:void\\b)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:void\\b)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:volatile\\b)/',
      source: '^(?:volatile\\b)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:volatile\\b)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:while\\b)/',
      source: '^(?:while\\b)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:while\\b)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:_Alignas\\b)/',
      source: '^(?:_Alignas\\b)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:_Alignas\\b)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:_Alignof\\b)/',
      source: '^(?:_Alignof\\b)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:_Alignof\\b)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:_Atomic\\b)/',
      source: '^(?:_Atomic\\b)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:_Atomic\\b)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:_Bool\\b)/',
      source: '^(?:_Bool\\b)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:_Bool\\b)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:_Complex\\b)/',
      source: '^(?:_Complex\\b)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:_Complex\\b)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:_Generic\\b)/',
      source: '^(?:_Generic\\b)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:_Generic\\b)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:_Imaginary\\b)/',
      source: '^(?:_Imaginary\\b)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:_Imaginary\\b)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:_Noreturn\\b)/',
      source: '^(?:_Noreturn\\b)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:_Noreturn\\b)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:_Static_assert\\b)/',
      source: '^(?:_Static_assert\\b)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:_Static_assert\\b)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:_Thread_local\\b)/',
      source: '^(?:_Thread_local\\b)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:_Thread_local\\b)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:__func__\\b)/',
      source: '^(?:__func__\\b)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:__func__\\b)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:([a-zA-Z_])([a-zA-Z_0-9])*)/',
      source: '^(?:([a-zA-Z_])([a-zA-Z_0-9])*)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:([a-zA-Z_])([a-zA-Z_0-9])*)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:((0[xX]))([a-fA-F0-9])+((((u|U)(l|L|ll|LL)?)|((l|L|ll|LL)(u|U)?)))?)/',
      source: '^(?:((0[xX]))([a-fA-F0-9])+((((u|U)(l|L|ll|LL)?)|((l|L|ll|LL)(u|U)?)))?)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:((0[xX]))([a-fA-F0-9])+((((u|U)(l|L|ll|LL)?)|((l|L|ll|LL)(u|U)?)))?)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:([1-9])([0-9])*((((u|U)(l|L|ll|LL)?)|((l|L|ll|LL)(u|U)?)))?)/',
      source: '^(?:([1-9])([0-9])*((((u|U)(l|L|ll|LL)?)|((l|L|ll|LL)(u|U)?)))?)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:([1-9])([0-9])*((((u|U)(l|L|ll|LL)?)|((l|L|ll|LL)(u|U)?)))?)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:0([0-7])*((((u|U)(l|L|ll|LL)?)|((l|L|ll|LL)(u|U)?)))?)/',
      source: '^(?:0([0-7])*((((u|U)(l|L|ll|LL)?)|((l|L|ll|LL)(u|U)?)))?)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:0([0-7])*((((u|U)(l|L|ll|LL)?)|((l|L|ll|LL)(u|U)?)))?)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: `/^(?:((u|U|L))?'([^'\\\\\\n]|((\\\\(['"\\?\\\\abfnrtv]|[0-7]{1,3}|x[a-fA-F0-9]+))))+')/`,
      source: `^(?:((u|U|L))?'([^'\\\\\\n]|((\\\\(['"\\?\\\\abfnrtv]|[0-7]{1,3}|x[a-fA-F0-9]+))))+')`,
      flags: '',
      xregexp: {
        captureNames: null,
        source: `^(?:((u|U|L))?'([^'\\\\\\n]|((\\\\(['"\\?\\\\abfnrtv]|[0-7]{1,3}|x[a-fA-F0-9]+))))+')`,
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:([0-9])+(([Ee][+-]?(?:[0-9])+))((f|F|l|L))?)/',
      source: '^(?:([0-9])+(([Ee][+-]?(?:[0-9])+))((f|F|l|L))?)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:([0-9])+(([Ee][+-]?(?:[0-9])+))((f|F|l|L))?)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:([0-9])*\\.([0-9])+(([Ee][+-]?(?:[0-9])+))?((f|F|l|L))?)/',
      source: '^(?:([0-9])*\\.([0-9])+(([Ee][+-]?(?:[0-9])+))?((f|F|l|L))?)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:([0-9])*\\.([0-9])+(([Ee][+-]?(?:[0-9])+))?((f|F|l|L))?)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:([0-9])+\\.(([Ee][+-]?(?:[0-9])+))?((f|F|l|L))?)/',
      source: '^(?:([0-9])+\\.(([Ee][+-]?(?:[0-9])+))?((f|F|l|L))?)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:([0-9])+\\.(([Ee][+-]?(?:[0-9])+))?((f|F|l|L))?)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:((0[xX]))([a-fA-F0-9])+(([Pp][+-]?(?:[0-9])+))((f|F|l|L))?)/',
      source: '^(?:((0[xX]))([a-fA-F0-9])+(([Pp][+-]?(?:[0-9])+))((f|F|l|L))?)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:((0[xX]))([a-fA-F0-9])+(([Pp][+-]?(?:[0-9])+))((f|F|l|L))?)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:((0[xX]))([a-fA-F0-9])*\\.([a-fA-F0-9])+(([Pp][+-]?(?:[0-9])+))((f|F|l|L))?)/',
      source: '^(?:((0[xX]))([a-fA-F0-9])*\\.([a-fA-F0-9])+(([Pp][+-]?(?:[0-9])+))((f|F|l|L))?)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:((0[xX]))([a-fA-F0-9])*\\.([a-fA-F0-9])+(([Pp][+-]?(?:[0-9])+))((f|F|l|L))?)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:((0[xX]))([a-fA-F0-9])+\\.(([Pp][+-]?(?:[0-9])+))((f|F|l|L))?)/',
      source: '^(?:((0[xX]))([a-fA-F0-9])+\\.(([Pp][+-]?(?:[0-9])+))((f|F|l|L))?)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:((0[xX]))([a-fA-F0-9])+\\.(([Pp][+-]?(?:[0-9])+))((f|F|l|L))?)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: `/^(?:(((u8|u|U|L))?"([^\\"\\\\\\n]|((\\\\(['"\\?\\\\abfnrtv]|[0-7]{1,3}|x[a-fA-F0-9]+))))*"([ \\t\\v\\n\\f])*)+)/`,
      source: `^(?:(((u8|u|U|L))?"([^\\"\\\\\\n]|((\\\\(['"\\?\\\\abfnrtv]|[0-7]{1,3}|x[a-fA-F0-9]+))))*"([ \\t\\v\\n\\f])*)+)`,
      flags: '',
      xregexp: {
        captureNames: null,
        source: `^(?:(((u8|u|U|L))?"([^\\"\\\\\\n]|((\\\\(['"\\?\\\\abfnrtv]|[0-7]{1,3}|x[a-fA-F0-9]+))))*"([ \\t\\v\\n\\f])*)+)`,
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\.\\.\\.)/',
      source: '^(?:\\.\\.\\.)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\.\\.\\.)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:>>=)/',
      source: '^(?:>>=)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:>>=)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:<<=)/',
      source: '^(?:<<=)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:<<=)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\+=)/',
      source: '^(?:\\+=)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\+=)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:-=)/',
      source: '^(?:-=)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:-=)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\*=)/',
      source: '^(?:\\*=)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\*=)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\/=)/',
      source: '^(?:\\/=)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\/=)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:%=)/',
      source: '^(?:%=)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:%=)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:&=)/',
      source: '^(?:&=)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:&=)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\^=)/',
      source: '^(?:\\^=)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\^=)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\|=)/',
      source: '^(?:\\|=)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\|=)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:>>)/',
      source: '^(?:>>)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:>>)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:<<)/',
      source: '^(?:<<)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:<<)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\+\\+)/',
      source: '^(?:\\+\\+)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\+\\+)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:--)/',
      source: '^(?:--)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:--)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:->)/',
      source: '^(?:->)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:->)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:&&)/',
      source: '^(?:&&)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:&&)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\|\\|)/',
      source: '^(?:\\|\\|)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\|\\|)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:<=)/',
      source: '^(?:<=)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:<=)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:>=)/',
      source: '^(?:>=)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:>=)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:==)/',
      source: '^(?:==)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:==)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:!=)/',
      source: '^(?:!=)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:!=)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:;)/',
      source: '^(?:;)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:;)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:(\\{|<%))/',
      source: '^(?:(\\{|<%))',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:(\\{|<%))',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:(\\}|%>))/',
      source: '^(?:(\\}|%>))',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:(\\}|%>))',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:,)/',
      source: '^(?:,)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:,)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?::)/',
      source: '^(?::)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?::)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:=)/',
      source: '^(?:=)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:=)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\()/',
      source: '^(?:\\()',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\()',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\))/',
      source: '^(?:\\))',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\))',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:(\\[|<:))/',
      source: '^(?:(\\[|<:))',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:(\\[|<:))',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:(\\]|:>))/',
      source: '^(?:(\\]|:>))',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:(\\]|:>))',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\.)/',
      source: '^(?:\\.)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\.)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:&)/',
      source: '^(?:&)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:&)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:!)/',
      source: '^(?:!)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:!)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:~)/',
      source: '^(?:~)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:~)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:-)/',
      source: '^(?:-)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:-)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\+)/',
      source: '^(?:\\+)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\+)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\*)/',
      source: '^(?:\\*)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\*)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\/)/',
      source: '^(?:\\/)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\/)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:%)/',
      source: '^(?:%)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:%)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:<)/',
      source: '^(?:<)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:<)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:>)/',
      source: '^(?:>)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:>)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\^)/',
      source: '^(?:\\^)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\^)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\|)/',
      source: '^(?:\\|)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\|)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\?)/',
      source: '^(?:\\?)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\?)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:([ \\t\\v\\n\\f])+)/',
      source: '^(?:([ \\t\\v\\n\\f])+)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:([ \\t\\v\\n\\f])+)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:.)/',
      source: '^(?:.)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:.)',
        flags: '',
        isNative: true,
      },
    },
  ],
  macros: {
    O: {
      in_set: '0-7',
      elsewhere: '[0-7]',
      raw: '[0-7]',
    },
    D: {
      in_set: '\\d',
      elsewhere: '[0-9]',
      raw: '[0-9]',
    },
    NZ: {
      in_set: '1-9',
      elsewhere: '[1-9]',
      raw: '[1-9]',
    },
    L: {
      in_set: 'A-Z_a-z',
      elsewhere: '[a-zA-Z_]',
      raw: '[a-zA-Z_]',
    },
    A: {
      in_set: '\\w',
      elsewhere: '[a-zA-Z_0-9]',
      raw: '[a-zA-Z_0-9]',
    },
    H: {
      in_set: '0-9A-Fa-f',
      elsewhere: '[a-fA-F0-9]',
      raw: '[a-fA-F0-9]',
    },
    HP: {
      in_set: {
        message: '[macro [HP] is unsuitable for use inside regex set expressions: "[(0[xX])]"]',
        name: 'Error',
      },
      elsewhere: '(0[xX])',
      raw: '(0[xX])',
    },
    E: {
      in_set: {
        message: '[macro [E] is unsuitable for use inside regex set expressions: "[([Ee][+-]?\\d+)]"]',
        name: 'Error',
      },
      elsewhere: '([Ee][+-]?(?:[0-9])+)',
      raw: '([Ee][+-]?{D}+)',
    },
    P: {
      in_set: {
        message: '[macro [P] is unsuitable for use inside regex set expressions: "[([Pp][+-]?\\d+)]"]',
        name: 'Error',
      },
      elsewhere: '([Pp][+-]?(?:[0-9])+)',
      raw: '([Pp][+-]?{D}+)',
    },
    FS: {
      in_set: {
        message: '[macro [FS] is unsuitable for use inside regex set expressions: "[(f|F|l|L)]"]',
        name: 'Error',
      },
      elsewhere: '(f|F|l|L)',
      raw: '(f|F|l|L)',
    },
    IS: {
      in_set: {
        message: '[macro [IS] is unsuitable for use inside regex set expressions: "[(((u|U)(l|L|ll|LL)?)|((l|L|ll|LL)(u|U)?))]"]',
        name: 'Error',
      },
      elsewhere: '(((u|U)(l|L|ll|LL)?)|((l|L|ll|LL)(u|U)?))',
      raw: '(((u|U)(l|L|ll|LL)?)|((l|L|ll|LL)(u|U)?))',
    },
    CP: {
      in_set: {
        message: '[macro [CP] is unsuitable for use inside regex set expressions: "[(u|U|L)]"]',
        name: 'Error',
      },
      elsewhere: '(u|U|L)',
      raw: '(u|U|L)',
    },
    SP: {
      in_set: {
        message: '[macro [SP] is unsuitable for use inside regex set expressions: "[(u8|u|U|L)]"]',
        name: 'Error',
      },
      elsewhere: '(u8|u|U|L)',
      raw: '(u8|u|U|L)',
    },
    ES: {
      in_set: {
        message: `[macro [ES] is unsuitable for use inside regex set expressions: "[(\\\\(['"\\?\\\\abfnrtv]|[0-7]{1,3}|x[a-fA-F0-9]+))]"]`,
        name: 'Error',
      },
      elsewhere: '(\\\\([\'"\\?\\\\abfnrtv]|[0-7]{1,3}|x[a-fA-F0-9]+))',
      raw: '(\\\\([\'"\\?\\\\abfnrtv]|[0-7]{1,3}|x[a-fA-F0-9]+))',
    },
    WS: {
      in_set: '\\t-\\f ',
      elsewhere: '[ \\t\\v\\n\\f]',
      raw: '[ \\t\\v\\n\\f]',
    },
  },
  regular_rule_count: 5,
  simple_rule_count: 102,
  conditionStack: [
    'INITIAL',
  ],
  actionInclude: `// #include <stdio.h>
// #include "y.tab.h"
// 
// extern void yyerror(const char *);  /* prints grammar violation message */
// 
// extern int sym_type(const char *);  /* returns type from symbol table */
// 
// #define sym_type(identifier) IDENTIFIER /* with no symbol table, fake it */

const TYPEDEF_NAME = 3;
const ENUMERATION_CONSTANT = 4;

function sym_type(identifier) {
  return 0;
}

// 
// static void comment(void);
// static int check_type(void)`,
  moduleInclude: `



// 
// int yywrap(void)        /* called at end of input */
// {
//     return 1;           /* terminate now */
// }
// 
// static void comment(void)
// {
//     int c;
// 
//     while ((c = input()) != 0)
//         if (c == '*')
//         {
//             while ((c = input()) == '*')
//                 ;
// 
//             if (c == '/')
//                 return;
// 
//             if (c == 0)
//                 break;
//         }
//     yyerror("unterminated comment");
// }
// 
// static int check_type(void)
// {
//     switch (sym_type(yytext))
//     {
//     case TYPEDEF_NAME:                /* previously defined */
//         return TYPEDEF_NAME;
//     case ENUMERATION_CONSTANT:        /* previously defined */
//         return ENUMERATION_CONSTANT;
//     default:                          /* includes undefined */
//         return IDENTIFIER;
//     }
// }
// 
//`,
  __in_rules_failure_analysis_mode__: false,
  is_custom_lexer: false,
}