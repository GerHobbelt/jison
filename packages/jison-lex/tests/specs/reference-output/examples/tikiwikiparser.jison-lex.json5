
//=============================================================================
//                     JISON-LEX OPTIONS:

{
  lexerActionsUseYYLENG: '???',
  lexerActionsUseYYLINENO: '???',
  lexerActionsUseYYTEXT: '???',
  lexerActionsUseYYLOC: '???',
  lexerActionsUseParseError: '???',
  lexerActionsUseYYERROR: '???',
  lexerActionsUseLocationTracking: '???',
  lexerActionsUseMore: '???',
  lexerActionsUseUnput: '???',
  lexerActionsUseReject: '???',
  lexerActionsUseLess: '???',
  lexerActionsUseDisplayAPIs: '???',
  lexerActionsUseDescribeYYLOC: '???',
  lex_rule_dictionary: {
    rules: [
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "yytext = parserlib.inlinePlugin(yytext);\n        return 'INLINE_PLUGIN'",
        rule: '\\{{INLINE_PLUGIN_ID}.*?\\}',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: `yy.pluginStack = parserlib.stackPlugin(yytext, yy.pluginStack);

        if (parserlib.size(yy.pluginStack) == 1) {
            return 'PLUGIN_START';
        } else {
            return 'CONTENT';
        }`,
        rule: '\\{{PLUGIN_ID}\\(.*?\\)\\}',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: `if (yy.pluginStack) {
            if (
                parserlib.size(yy.pluginStack) > 0 &&
                parserlib.substring(yytext, 1, -1) == yy.pluginStack[parserlib.size(yy.pluginStack) - 1].name
            ) {
                if (parserlib.size(yy.pluginStack) == 1) {
                    yytext = yy.pluginStack[parserlib.size(yy.pluginStack) - 1];
                    yy.pluginStack = parserlib.pop(yy.pluginStack);
                    return 'PLUGIN_END';
                } else {
                    yy.pluginStack = parserlib.pop(yy.pluginStack);
                    return 'CONTENT';
                }
            }
        }
        return 'CONTENT'`,
        rule: '\\{{PLUGIN_ID}\\}',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: `yy.npStack = parserlib.push(yy.npStack, true);
        this.yy.npOn = true;

        return 'NP_START'`,
        rule: '(~np~)',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: `this.yy.npStack = parserlib.pop(yy.npStack);
        if (parserlib.size(yy.npStack) < 1) yy.npOn = false;
        return 'NP_END'`,
        rule: '(~\\/np~)',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "yytext = parserlib.hr();\n        return 'HORIZONTAL_BAR'",
        rule: '---',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: `yytext = parserlib.substring(yytext, 2, -2);
        yytext = parserlib.smile(yytext);
        return 'SMILE'`,
        rule: '\\(:{SMILE}:\\)',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "yytext = parserlib.substring(yytext, 2, -1);\n        return 'CONTENT'",
        rule: '\\[\\[.*?',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: `this.popState();             return parserlib.npState(this.yy.npOn, 'CONTENT', 'BOLD_END')`,
        rule: '[_][_]',
        start_condition: [
          'bold',
        ],
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: `this.begin('bold');          return parserlib.npState(this.yy.npOn, 'CONTENT', 'BOLD_START')`,
        rule: '[_][_]',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: `this.popState();             return parserlib.npState(this.yy.npOn, 'CONTENT', 'BOX_END')`,
        rule: '[\\^]',
        start_condition: [
          'box',
        ],
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: `this.begin('box');           return parserlib.npState(this.yy.npOn, 'CONTENT', 'BOX_START')`,
        rule: '[\\^]',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: `this.popState();             return parserlib.npState(this.yy.npOn, 'CONTENT', 'CENTER_END')`,
        rule: '[:][:]',
        start_condition: [
          'center',
        ],
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: `this.begin('center');        return parserlib.npState(this.yy.npOn, 'CONTENT', 'CENTER_START')`,
        rule: '[:][:]',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: `this.popState();             return parserlib.npState(this.yy.npOn, 'CONTENT', 'COLORTEXT_END')`,
        rule: '[\\~][\\~]',
        start_condition: [
          'colortext',
        ],
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: `this.begin('colortext');     return parserlib.npState(this.yy.npOn, 'CONTENT', 'COLORTEXT_START')`,
        rule: '[\\~][\\~][#]',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: `this.popState();             return parserlib.npState(this.yy.npOn, 'CONTENT', 'HEADER6_END')`,
        rule: '[\\n]',
        start_condition: [
          'header6',
        ],
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: `this.begin('header6');       return parserlib.npState(this.yy.npOn, 'CONTENT', 'HEADER6_START')`,
        rule: '[\\n](!!!!!!)',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: `this.popState();             return parserlib.npState(this.yy.npOn, 'CONTENT', 'HEADER5_END')`,
        rule: '[\\n]',
        start_condition: [
          'header5',
        ],
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: `this.begin('header5');       return parserlib.npState(this.yy.npOn, 'CONTENT', 'HEADER5_START')`,
        rule: '[\\n](!!!!!)',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: `this.popState();             return parserlib.npState(this.yy.npOn, 'CONTENT', 'HEADER4_END')`,
        rule: '[\\n]',
        start_condition: [
          'header4',
        ],
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: `this.begin('header4');       return parserlib.npState(this.yy.npOn, 'CONTENT', 'HEADER4_START')`,
        rule: '[\\n](!!!!)',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: `this.popState();             return parserlib.npState(this.yy.npOn, 'CONTENT', 'HEADER3_END')`,
        rule: '[\\n]',
        start_condition: [
          'header3',
        ],
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: `this.begin('header3');       return parserlib.npState(this.yy.npOn, 'CONTENT', 'HEADER3_START')`,
        rule: '[\\n](!!!)',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: `this.popState();             return parserlib.npState(this.yy.npOn, 'CONTENT', 'HEADER2_END')`,
        rule: '[\\n]',
        start_condition: [
          'header2',
        ],
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: `this.begin('header2');       return parserlib.npState(this.yy.npOn, 'CONTENT', 'HEADER2_START')`,
        rule: '[\\n](!!)',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: `this.popState();             return parserlib.npState(this.yy.npOn, 'CONTENT', 'HEADER1_END')`,
        rule: '[\\n]',
        start_condition: [
          'header1',
        ],
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: `this.begin('header1');       return parserlib.npState(this.yy.npOn, 'CONTENT', 'HEADER1_START')`,
        rule: '[\\n](!)',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: `this.popState();             return parserlib.npState(this.yy.npOn, 'CONTENT', 'ITALIC_END')`,
        rule: "['][']",
        start_condition: [
          'italic',
        ],
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: `this.begin('italic');        return parserlib.npState(this.yy.npOn, 'CONTENT', 'ITALIC_START')`,
        rule: "['][']",
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: `this.popState();             return parserlib.npState(this.yy.npOn, 'CONTENT', 'LINK_END')`,
        rule: '(\\])',
        start_condition: [
          'link',
        ],
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: `this.begin('link');          return parserlib.npState(this.yy.npOn, 'CONTENT', 'LINK_START')`,
        rule: '(\\[)',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: `this.popState();             return parserlib.npState(this.yy.npOn, 'CONTENT', 'STRIKETHROUGH_END')`,
        rule: '[-][-]',
        start_condition: [
          'strikethrough',
        ],
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: `this.begin('strikethrough'); return parserlib.npState(this.yy.npOn, 'CONTENT', 'STRIKETHROUGH_START')`,
        rule: '[-][-]',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: `this.popState();             return parserlib.npState(this.yy.npOn, 'CONTENT', 'TABLE_END')`,
        rule: '[|][|]',
        start_condition: [
          'table',
        ],
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: `this.begin('table');         return parserlib.npState(this.yy.npOn, 'CONTENT', 'TABLE_START')`,
        rule: '[|][|]',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: `this.popState();             return parserlib.npState(this.yy.npOn, 'CONTENT', 'TITLEBAR_END')`,
        rule: '[=][-]',
        start_condition: [
          'titlebar',
        ],
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: `this.begin('titlebar');      return parserlib.npState(this.yy.npOn, 'CONTENT', 'TITLEBAR_START')`,
        rule: '[-][=]',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: `this.popState();             return parserlib.npState(this.yy.npOn, 'CONTENT', 'UNDERSCORE_END')`,
        rule: '[=][=][=]',
        start_condition: [
          'underscore',
        ],
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: `this.begin('underscore');    return parserlib.npState(this.yy.npOn, 'CONTENT', 'UNDERSCORE_START')`,
        rule: '[=][=][=]',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: `this.popState();             return parserlib.npState(this.yy.npOn, 'CONTENT', 'WIKILINK_END')`,
        rule: '[)][)]',
        start_condition: [
          'wikilink',
        ],
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: `this.begin('wikilink');      return parserlib.npState(this.yy.npOn, 'CONTENT', 'WIKILINK_START')`,
        rule: '[(][(]',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'HTML'",
        rule: '<(.|\\n)*?>',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'CONTENT'",
        rule: '(.)',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: `if (parserlib.npState(this.yy.npOn, false, true) == true) {
            yytext = parserlib.formatContent(yytext);
        }

        return 'CONTENT'`,
        rule: '(\\n)',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'EOF'",
        rule: '$',
      },
    ],
    moduleInclude: `// fake a \`parserlib\` instance to make the \`make examples_tikiwikiparser\` test run pass:
// *** NOT PRODUCTION CODE ***
const parserlib = {
    inlinePlugin: (txt) => txt,

    stackPlugin: (txt, stack) => {
        stack = stack || [];
        stack.push(txt);
        return stack;
    },

    size: (stack) => Array.isArray(stack) ? stack.length : 0,

    substring: (str, p, l) => str.substring(p, l),
    smile: (txt) => \`(-: ${txt} :-)\`,
    hr: () => '--==#####==--',
    formatContent: (txt) => txt,

    pop: (stack) => {
        stack.pop();
        return stack;
    },
    push: (stack, val) => {
        stack.push(val);
        return stack;
    },

    npState: (npOn, c, t) => t,
}`,
    macros: {
      PLUGIN_ID: '[A-Z]+',
      INLINE_PLUGIN_ID: '[a-z]+',
      SMILE: '[a-z]+',
    },
    startConditions: {
      bold: 0,
      box: 0,
      center: 0,
      colortext: 0,
      italic: 0,
      header6: 0,
      header5: 0,
      header4: 0,
      header3: 0,
      header2: 0,
      header1: 0,
      link: 0,
      strikethrough: 0,
      table: 0,
      titlebar: 0,
      underscore: 0,
      wikilink: 0,
    },
    codeSections: [],
    importDecls: [],
    unknownDecls: [],
  },
  codeSections: [],
  importDecls: [],
  unknownDecls: [],
  options: {
    moduleType: 'commonjs',
    debug: false,
    enableDebugLogs: false,
    json: true,
    noMain: true,
    moduleMain: null,
    moduleMainImports: null,
    dumpSourceCodeOnFailure: false,
    throwErrorOnCompileFailure: true,
    doNotTestCompile: false,
    defaultModuleName: 'lexer',
    xregexp: false,
    lexerErrorsAreRecoverable: false,
    flex: false,
    backtrack_lexer: false,
    ranges: false,
    trackPosition: true,
    caseInsensitive: false,
    exportSourceCode: {
      enabled: false,
    },
    exportAST: false,
    prettyCfg: true,
  },
  conditions: {
    bold: {
      rules: [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        13,
        15,
        17,
        19,
        21,
        23,
        25,
        27,
        29,
        31,
        33,
        35,
        37,
        39,
        41,
        42,
        43,
        44,
        45,
      ],
      inclusive: true,
    },
    box: {
      rules: [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        10,
        11,
        13,
        15,
        17,
        19,
        21,
        23,
        25,
        27,
        29,
        31,
        33,
        35,
        37,
        39,
        41,
        42,
        43,
        44,
        45,
      ],
      inclusive: true,
    },
    center: {
      rules: [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        11,
        12,
        13,
        15,
        17,
        19,
        21,
        23,
        25,
        27,
        29,
        31,
        33,
        35,
        37,
        39,
        41,
        42,
        43,
        44,
        45,
      ],
      inclusive: true,
    },
    colortext: {
      rules: [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        11,
        13,
        14,
        15,
        17,
        19,
        21,
        23,
        25,
        27,
        29,
        31,
        33,
        35,
        37,
        39,
        41,
        42,
        43,
        44,
        45,
      ],
      inclusive: true,
    },
    italic: {
      rules: [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        11,
        13,
        15,
        17,
        19,
        21,
        23,
        25,
        27,
        28,
        29,
        31,
        33,
        35,
        37,
        39,
        41,
        42,
        43,
        44,
        45,
      ],
      inclusive: true,
    },
    header6: {
      rules: [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        11,
        13,
        15,
        16,
        17,
        19,
        21,
        23,
        25,
        27,
        29,
        31,
        33,
        35,
        37,
        39,
        41,
        42,
        43,
        44,
        45,
      ],
      inclusive: true,
    },
    header5: {
      rules: [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        11,
        13,
        15,
        17,
        18,
        19,
        21,
        23,
        25,
        27,
        29,
        31,
        33,
        35,
        37,
        39,
        41,
        42,
        43,
        44,
        45,
      ],
      inclusive: true,
    },
    header4: {
      rules: [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        11,
        13,
        15,
        17,
        19,
        20,
        21,
        23,
        25,
        27,
        29,
        31,
        33,
        35,
        37,
        39,
        41,
        42,
        43,
        44,
        45,
      ],
      inclusive: true,
    },
    header3: {
      rules: [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        11,
        13,
        15,
        17,
        19,
        21,
        22,
        23,
        25,
        27,
        29,
        31,
        33,
        35,
        37,
        39,
        41,
        42,
        43,
        44,
        45,
      ],
      inclusive: true,
    },
    header2: {
      rules: [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        11,
        13,
        15,
        17,
        19,
        21,
        23,
        24,
        25,
        27,
        29,
        31,
        33,
        35,
        37,
        39,
        41,
        42,
        43,
        44,
        45,
      ],
      inclusive: true,
    },
    header1: {
      rules: [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        11,
        13,
        15,
        17,
        19,
        21,
        23,
        25,
        26,
        27,
        29,
        31,
        33,
        35,
        37,
        39,
        41,
        42,
        43,
        44,
        45,
      ],
      inclusive: true,
    },
    link: {
      rules: [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        11,
        13,
        15,
        17,
        19,
        21,
        23,
        25,
        27,
        29,
        30,
        31,
        33,
        35,
        37,
        39,
        41,
        42,
        43,
        44,
        45,
      ],
      inclusive: true,
    },
    strikethrough: {
      rules: [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        11,
        13,
        15,
        17,
        19,
        21,
        23,
        25,
        27,
        29,
        31,
        32,
        33,
        35,
        37,
        39,
        41,
        42,
        43,
        44,
        45,
      ],
      inclusive: true,
    },
    table: {
      rules: [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        11,
        13,
        15,
        17,
        19,
        21,
        23,
        25,
        27,
        29,
        31,
        33,
        34,
        35,
        37,
        39,
        41,
        42,
        43,
        44,
        45,
      ],
      inclusive: true,
    },
    titlebar: {
      rules: [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        11,
        13,
        15,
        17,
        19,
        21,
        23,
        25,
        27,
        29,
        31,
        33,
        35,
        36,
        37,
        39,
        41,
        42,
        43,
        44,
        45,
      ],
      inclusive: true,
    },
    underscore: {
      rules: [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        11,
        13,
        15,
        17,
        19,
        21,
        23,
        25,
        27,
        29,
        31,
        33,
        35,
        37,
        38,
        39,
        41,
        42,
        43,
        44,
        45,
      ],
      inclusive: true,
    },
    wikilink: {
      rules: [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        11,
        13,
        15,
        17,
        19,
        21,
        23,
        25,
        27,
        29,
        31,
        33,
        35,
        37,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
      ],
      inclusive: true,
    },
    INITIAL: {
      rules: [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        11,
        13,
        15,
        17,
        19,
        21,
        23,
        25,
        27,
        29,
        31,
        33,
        35,
        37,
        39,
        41,
        42,
        43,
        44,
        45,
      ],
      inclusive: true,
    },
  },
  performAction: `function lexer__performAction(yy, yyrulenumber, YY_START) {
            const yy_ = this;

            
const YYSTATE = YY_START;
switch(yyrulenumber) {
case 0 : 
/*! Conditions:: bold box center colortext italic header6 header5 header4 header3 header2 header1 link strikethrough table titlebar underscore wikilink INITIAL */ 
/*! Rule::       \\{{INLINE_PLUGIN_ID}.*?\\} */ 
 yy_.yytext = parserlib.inlinePlugin(yy_.yytext);
        return 'INLINE_PLUGIN' 
break;
case 1 : 
/*! Conditions:: bold box center colortext italic header6 header5 header4 header3 header2 header1 link strikethrough table titlebar underscore wikilink INITIAL */ 
/*! Rule::       \\{{PLUGIN_ID}\\(.*?\\)\\} */ 
 yy.pluginStack = parserlib.stackPlugin(yy_.yytext, yy.pluginStack);

        if (parserlib.size(yy.pluginStack) == 1) {
            return 'PLUGIN_START';
        } else {
            return 'CONTENT';
        } 
break;
case 2 : 
/*! Conditions:: bold box center colortext italic header6 header5 header4 header3 header2 header1 link strikethrough table titlebar underscore wikilink INITIAL */ 
/*! Rule::       \\{{PLUGIN_ID}\\} */ 
 if (yy.pluginStack) {
            if (
                parserlib.size(yy.pluginStack) > 0 &&
                parserlib.substring(yy_.yytext, 1, -1) == yy.pluginStack[parserlib.size(yy.pluginStack) - 1].name
            ) {
                if (parserlib.size(yy.pluginStack) == 1) {
                    yy_.yytext = yy.pluginStack[parserlib.size(yy.pluginStack) - 1];
                    yy.pluginStack = parserlib.pop(yy.pluginStack);
                    return 'PLUGIN_END';
                } else {
                    yy.pluginStack = parserlib.pop(yy.pluginStack);
                    return 'CONTENT';
                }
            }
        }
        return 'CONTENT' 
break;
case 3 : 
/*! Conditions:: bold box center colortext italic header6 header5 header4 header3 header2 header1 link strikethrough table titlebar underscore wikilink INITIAL */ 
/*! Rule::       (~np~) */ 
 yy.npStack = parserlib.push(yy.npStack, true);
        this.yy.npOn = true;

        return 'NP_START' 
break;
case 4 : 
/*! Conditions:: bold box center colortext italic header6 header5 header4 header3 header2 header1 link strikethrough table titlebar underscore wikilink INITIAL */ 
/*! Rule::       (~\\/np~) */ 
 this.yy.npStack = parserlib.pop(yy.npStack);
        if (parserlib.size(yy.npStack) < 1) yy.npOn = false;
        return 'NP_END' 
break;
case 5 : 
/*! Conditions:: bold box center colortext italic header6 header5 header4 header3 header2 header1 link strikethrough table titlebar underscore wikilink INITIAL */ 
/*! Rule::       --- */ 
 yy_.yytext = parserlib.hr();
        return 'HORIZONTAL_BAR' 
break;
case 6 : 
/*! Conditions:: bold box center colortext italic header6 header5 header4 header3 header2 header1 link strikethrough table titlebar underscore wikilink INITIAL */ 
/*! Rule::       \\(:{SMILE}:\\) */ 
 yy_.yytext = parserlib.substring(yy_.yytext, 2, -2);
        yy_.yytext = parserlib.smile(yy_.yytext);
        return 'SMILE' 
break;
case 7 : 
/*! Conditions:: bold box center colortext italic header6 header5 header4 header3 header2 header1 link strikethrough table titlebar underscore wikilink INITIAL */ 
/*! Rule::       \\[\\[.*? */ 
 yy_.yytext = parserlib.substring(yy_.yytext, 2, -1);
        return 'CONTENT' 
break;
case 8 : 
/*! Conditions:: bold */ 
/*! Rule::       [_][_] */ 
 this.popState();             return parserlib.npState(this.yy.npOn, 'CONTENT', 'BOLD_END') 
break;
case 9 : 
/*! Conditions:: bold box center colortext italic header6 header5 header4 header3 header2 header1 link strikethrough table titlebar underscore wikilink INITIAL */ 
/*! Rule::       [_][_] */ 
 this.begin('bold');          return parserlib.npState(this.yy.npOn, 'CONTENT', 'BOLD_START') 
break;
case 10 : 
/*! Conditions:: box */ 
/*! Rule::       [\\^] */ 
 this.popState();             return parserlib.npState(this.yy.npOn, 'CONTENT', 'BOX_END') 
break;
case 11 : 
/*! Conditions:: bold box center colortext italic header6 header5 header4 header3 header2 header1 link strikethrough table titlebar underscore wikilink INITIAL */ 
/*! Rule::       [\\^] */ 
 this.begin('box');           return parserlib.npState(this.yy.npOn, 'CONTENT', 'BOX_START') 
break;
case 12 : 
/*! Conditions:: center */ 
/*! Rule::       [:][:] */ 
 this.popState();             return parserlib.npState(this.yy.npOn, 'CONTENT', 'CENTER_END') 
break;
case 13 : 
/*! Conditions:: bold box center colortext italic header6 header5 header4 header3 header2 header1 link strikethrough table titlebar underscore wikilink INITIAL */ 
/*! Rule::       [:][:] */ 
 this.begin('center');        return parserlib.npState(this.yy.npOn, 'CONTENT', 'CENTER_START') 
break;
case 14 : 
/*! Conditions:: colortext */ 
/*! Rule::       [\\~][\\~] */ 
 this.popState();             return parserlib.npState(this.yy.npOn, 'CONTENT', 'COLORTEXT_END') 
break;
case 15 : 
/*! Conditions:: bold box center colortext italic header6 header5 header4 header3 header2 header1 link strikethrough table titlebar underscore wikilink INITIAL */ 
/*! Rule::       [\\~][\\~][#] */ 
 this.begin('colortext');     return parserlib.npState(this.yy.npOn, 'CONTENT', 'COLORTEXT_START') 
break;
case 16 : 
/*! Conditions:: header6 */ 
/*! Rule::       [\\n] */ 
 this.popState();             return parserlib.npState(this.yy.npOn, 'CONTENT', 'HEADER6_END') 
break;
case 17 : 
/*! Conditions:: bold box center colortext italic header6 header5 header4 header3 header2 header1 link strikethrough table titlebar underscore wikilink INITIAL */ 
/*! Rule::       [\\n](!!!!!!) */ 
 this.begin('header6');       return parserlib.npState(this.yy.npOn, 'CONTENT', 'HEADER6_START') 
break;
case 18 : 
/*! Conditions:: header5 */ 
/*! Rule::       [\\n] */ 
 this.popState();             return parserlib.npState(this.yy.npOn, 'CONTENT', 'HEADER5_END') 
break;
case 19 : 
/*! Conditions:: bold box center colortext italic header6 header5 header4 header3 header2 header1 link strikethrough table titlebar underscore wikilink INITIAL */ 
/*! Rule::       [\\n](!!!!!) */ 
 this.begin('header5');       return parserlib.npState(this.yy.npOn, 'CONTENT', 'HEADER5_START') 
break;
case 20 : 
/*! Conditions:: header4 */ 
/*! Rule::       [\\n] */ 
 this.popState();             return parserlib.npState(this.yy.npOn, 'CONTENT', 'HEADER4_END') 
break;
case 21 : 
/*! Conditions:: bold box center colortext italic header6 header5 header4 header3 header2 header1 link strikethrough table titlebar underscore wikilink INITIAL */ 
/*! Rule::       [\\n](!!!!) */ 
 this.begin('header4');       return parserlib.npState(this.yy.npOn, 'CONTENT', 'HEADER4_START') 
break;
case 22 : 
/*! Conditions:: header3 */ 
/*! Rule::       [\\n] */ 
 this.popState();             return parserlib.npState(this.yy.npOn, 'CONTENT', 'HEADER3_END') 
break;
case 23 : 
/*! Conditions:: bold box center colortext italic header6 header5 header4 header3 header2 header1 link strikethrough table titlebar underscore wikilink INITIAL */ 
/*! Rule::       [\\n](!!!) */ 
 this.begin('header3');       return parserlib.npState(this.yy.npOn, 'CONTENT', 'HEADER3_START') 
break;
case 24 : 
/*! Conditions:: header2 */ 
/*! Rule::       [\\n] */ 
 this.popState();             return parserlib.npState(this.yy.npOn, 'CONTENT', 'HEADER2_END') 
break;
case 25 : 
/*! Conditions:: bold box center colortext italic header6 header5 header4 header3 header2 header1 link strikethrough table titlebar underscore wikilink INITIAL */ 
/*! Rule::       [\\n](!!) */ 
 this.begin('header2');       return parserlib.npState(this.yy.npOn, 'CONTENT', 'HEADER2_START') 
break;
case 26 : 
/*! Conditions:: header1 */ 
/*! Rule::       [\\n] */ 
 this.popState();             return parserlib.npState(this.yy.npOn, 'CONTENT', 'HEADER1_END') 
break;
case 27 : 
/*! Conditions:: bold box center colortext italic header6 header5 header4 header3 header2 header1 link strikethrough table titlebar underscore wikilink INITIAL */ 
/*! Rule::       [\\n](!) */ 
 this.begin('header1');       return parserlib.npState(this.yy.npOn, 'CONTENT', 'HEADER1_START') 
break;
case 28 : 
/*! Conditions:: italic */ 
/*! Rule::       [']['] */ 
 this.popState();             return parserlib.npState(this.yy.npOn, 'CONTENT', 'ITALIC_END') 
break;
case 29 : 
/*! Conditions:: bold box center colortext italic header6 header5 header4 header3 header2 header1 link strikethrough table titlebar underscore wikilink INITIAL */ 
/*! Rule::       [']['] */ 
 this.begin('italic');        return parserlib.npState(this.yy.npOn, 'CONTENT', 'ITALIC_START') 
break;
case 30 : 
/*! Conditions:: link */ 
/*! Rule::       (\\]) */ 
 this.popState();             return parserlib.npState(this.yy.npOn, 'CONTENT', 'LINK_END') 
break;
case 31 : 
/*! Conditions:: bold box center colortext italic header6 header5 header4 header3 header2 header1 link strikethrough table titlebar underscore wikilink INITIAL */ 
/*! Rule::       (\\[) */ 
 this.begin('link');          return parserlib.npState(this.yy.npOn, 'CONTENT', 'LINK_START') 
break;
case 32 : 
/*! Conditions:: strikethrough */ 
/*! Rule::       [-][-] */ 
 this.popState();             return parserlib.npState(this.yy.npOn, 'CONTENT', 'STRIKETHROUGH_END') 
break;
case 33 : 
/*! Conditions:: bold box center colortext italic header6 header5 header4 header3 header2 header1 link strikethrough table titlebar underscore wikilink INITIAL */ 
/*! Rule::       [-][-] */ 
 this.begin('strikethrough'); return parserlib.npState(this.yy.npOn, 'CONTENT', 'STRIKETHROUGH_START') 
break;
case 34 : 
/*! Conditions:: table */ 
/*! Rule::       [|][|] */ 
 this.popState();             return parserlib.npState(this.yy.npOn, 'CONTENT', 'TABLE_END') 
break;
case 35 : 
/*! Conditions:: bold box center colortext italic header6 header5 header4 header3 header2 header1 link strikethrough table titlebar underscore wikilink INITIAL */ 
/*! Rule::       [|][|] */ 
 this.begin('table');         return parserlib.npState(this.yy.npOn, 'CONTENT', 'TABLE_START') 
break;
case 36 : 
/*! Conditions:: titlebar */ 
/*! Rule::       [=][-] */ 
 this.popState();             return parserlib.npState(this.yy.npOn, 'CONTENT', 'TITLEBAR_END') 
break;
case 37 : 
/*! Conditions:: bold box center colortext italic header6 header5 header4 header3 header2 header1 link strikethrough table titlebar underscore wikilink INITIAL */ 
/*! Rule::       [-][=] */ 
 this.begin('titlebar');      return parserlib.npState(this.yy.npOn, 'CONTENT', 'TITLEBAR_START') 
break;
case 38 : 
/*! Conditions:: underscore */ 
/*! Rule::       [=][=][=] */ 
 this.popState();             return parserlib.npState(this.yy.npOn, 'CONTENT', 'UNDERSCORE_END') 
break;
case 39 : 
/*! Conditions:: bold box center colortext italic header6 header5 header4 header3 header2 header1 link strikethrough table titlebar underscore wikilink INITIAL */ 
/*! Rule::       [=][=][=] */ 
 this.begin('underscore');    return parserlib.npState(this.yy.npOn, 'CONTENT', 'UNDERSCORE_START') 
break;
case 40 : 
/*! Conditions:: wikilink */ 
/*! Rule::       [)][)] */ 
 this.popState();             return parserlib.npState(this.yy.npOn, 'CONTENT', 'WIKILINK_END') 
break;
case 41 : 
/*! Conditions:: bold box center colortext italic header6 header5 header4 header3 header2 header1 link strikethrough table titlebar underscore wikilink INITIAL */ 
/*! Rule::       [(][(] */ 
 this.begin('wikilink');      return parserlib.npState(this.yy.npOn, 'CONTENT', 'WIKILINK_START') 
break;
case 44 : 
/*! Conditions:: bold box center colortext italic header6 header5 header4 header3 header2 header1 link strikethrough table titlebar underscore wikilink INITIAL */ 
/*! Rule::       (\\n) */ 
 if (parserlib.npState(this.yy.npOn, false, true) == true) {
            yy_.yytext = parserlib.formatContent(yy_.yytext);
        }

        return 'CONTENT' 
break;
default:
  return this.simpleCaseActionClusters[yyrulenumber];
}
        }`,
  caseHelperInclude: `{

  /*! Conditions:: bold box center colortext italic header6 header5 header4 header3 header2 header1 link strikethrough table titlebar underscore wikilink INITIAL */ 
  /*! Rule::       <(.|\\n)*?> */ 
   42 : 'HTML',
  /*! Conditions:: bold box center colortext italic header6 header5 header4 header3 header2 header1 link strikethrough table titlebar underscore wikilink INITIAL */ 
  /*! Rule::       (.) */ 
   43 : 'CONTENT',
  /*! Conditions:: bold box center colortext italic header6 header5 header4 header3 header2 header1 link strikethrough table titlebar underscore wikilink INITIAL */ 
  /*! Rule::       $ */ 
   45 : 'EOF'
}`,
  rules: [
    {
      re: '/^(?:\\{([a-z]+).*?\\})/',
      source: '^(?:\\{([a-z]+).*?\\})',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\{([a-z]+).*?\\})',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\{([A-Z]+)\\(.*?\\)\\})/',
      source: '^(?:\\{([A-Z]+)\\(.*?\\)\\})',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\{([A-Z]+)\\(.*?\\)\\})',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\{([A-Z]+)\\})/',
      source: '^(?:\\{([A-Z]+)\\})',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\{([A-Z]+)\\})',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:(~np~))/',
      source: '^(?:(~np~))',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:(~np~))',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:(~\\/np~))/',
      source: '^(?:(~\\/np~))',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:(~\\/np~))',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:---)/',
      source: '^(?:---)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:---)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\(:([a-z]+):\\))/',
      source: '^(?:\\(:([a-z]+):\\))',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\(:([a-z]+):\\))',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\[\\[.*?)/',
      source: '^(?:\\[\\[.*?)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\[\\[.*?)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:[_][_])/',
      source: '^(?:[_][_])',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:[_][_])',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:[_][_])/',
      source: '^(?:[_][_])',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:[_][_])',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:[\\^])/',
      source: '^(?:[\\^])',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:[\\^])',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:[\\^])/',
      source: '^(?:[\\^])',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:[\\^])',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:[:][:])/',
      source: '^(?:[:][:])',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:[:][:])',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:[:][:])/',
      source: '^(?:[:][:])',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:[:][:])',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:[\\~][\\~])/',
      source: '^(?:[\\~][\\~])',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:[\\~][\\~])',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:[\\~][\\~][#])/',
      source: '^(?:[\\~][\\~][#])',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:[\\~][\\~][#])',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:[\\n])/',
      source: '^(?:[\\n])',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:[\\n])',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:[\\n](!!!!!!))/',
      source: '^(?:[\\n](!!!!!!))',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:[\\n](!!!!!!))',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:[\\n])/',
      source: '^(?:[\\n])',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:[\\n])',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:[\\n](!!!!!))/',
      source: '^(?:[\\n](!!!!!))',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:[\\n](!!!!!))',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:[\\n])/',
      source: '^(?:[\\n])',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:[\\n])',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:[\\n](!!!!))/',
      source: '^(?:[\\n](!!!!))',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:[\\n](!!!!))',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:[\\n])/',
      source: '^(?:[\\n])',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:[\\n])',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:[\\n](!!!))/',
      source: '^(?:[\\n](!!!))',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:[\\n](!!!))',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:[\\n])/',
      source: '^(?:[\\n])',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:[\\n])',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:[\\n](!!))/',
      source: '^(?:[\\n](!!))',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:[\\n](!!))',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:[\\n])/',
      source: '^(?:[\\n])',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:[\\n])',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:[\\n](!))/',
      source: '^(?:[\\n](!))',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:[\\n](!))',
        flags: '',
        isNative: true,
      },
    },
    {
      re: "/^(?:[']['])/",
      source: "^(?:[']['])",
      flags: '',
      xregexp: {
        captureNames: null,
        source: "^(?:[']['])",
        flags: '',
        isNative: true,
      },
    },
    {
      re: "/^(?:[']['])/",
      source: "^(?:[']['])",
      flags: '',
      xregexp: {
        captureNames: null,
        source: "^(?:[']['])",
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:(\\]))/',
      source: '^(?:(\\]))',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:(\\]))',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:(\\[))/',
      source: '^(?:(\\[))',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:(\\[))',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:[-][-])/',
      source: '^(?:[-][-])',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:[-][-])',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:[-][-])/',
      source: '^(?:[-][-])',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:[-][-])',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:[|][|])/',
      source: '^(?:[|][|])',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:[|][|])',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:[|][|])/',
      source: '^(?:[|][|])',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:[|][|])',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:[=][-])/',
      source: '^(?:[=][-])',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:[=][-])',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:[-][=])/',
      source: '^(?:[-][=])',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:[-][=])',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:[=][=][=])/',
      source: '^(?:[=][=][=])',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:[=][=][=])',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:[=][=][=])/',
      source: '^(?:[=][=][=])',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:[=][=][=])',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:[)][)])/',
      source: '^(?:[)][)])',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:[)][)])',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:[(][(])/',
      source: '^(?:[(][(])',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:[(][(])',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:<(.|\\n)*?>)/',
      source: '^(?:<(.|\\n)*?>)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:<(.|\\n)*?>)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:(.))/',
      source: '^(?:(.))',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:(.))',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:(\\n))/',
      source: '^(?:(\\n))',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:(\\n))',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:$)/',
      source: '^(?:$)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:$)',
        flags: '',
        isNative: true,
      },
    },
  ],
  macros: {
    PLUGIN_ID: {
      in_set: {
        message: '[macro [PLUGIN_ID] is unsuitable for use inside regex set expressions: "[[A-Z]+]"]',
        name: 'Error',
      },
      elsewhere: '[A-Z]+',
      raw: '[A-Z]+',
    },
    INLINE_PLUGIN_ID: {
      in_set: {
        message: '[macro [INLINE_PLUGIN_ID] is unsuitable for use inside regex set expressions: "[[a-z]+]"]',
        name: 'Error',
      },
      elsewhere: '[a-z]+',
      raw: '[a-z]+',
    },
    SMILE: {
      in_set: {
        message: '[macro [SMILE] is unsuitable for use inside regex set expressions: "[[a-z]+]"]',
        name: 'Error',
      },
      elsewhere: '[a-z]+',
      raw: '[a-z]+',
    },
  },
  regular_rule_count: 43,
  simple_rule_count: 3,
  conditionStack: [
    'INITIAL',
  ],
  actionInclude: '',
  moduleInclude: `



// fake a \`parserlib\` instance to make the \`make examples_tikiwikiparser\` test run pass:
// *** NOT PRODUCTION CODE ***
const parserlib = {
    inlinePlugin: (txt) => txt,

    stackPlugin: (txt, stack) => {
        stack = stack || [];
        stack.push(txt);
        return stack;
    },

    size: (stack) => Array.isArray(stack) ? stack.length : 0,

    substring: (str, p, l) => str.substring(p, l),
    smile: (txt) => \`(-: ${txt} :-)\`,
    hr: () => '--==#####==--',
    formatContent: (txt) => txt,

    pop: (stack) => {
        stack.pop();
        return stack;
    },
    push: (stack, val) => {
        stack.push(val);
        return stack;
    },

    npState: (npOn, c, t) => t,
}`,
  __in_rules_failure_analysis_mode__: false,
  is_custom_lexer: false,
}