
//=============================================================================
//                     JISON-LEX OPTIONS:

{
  lexerActionsUseYYLENG: '???',
  lexerActionsUseYYLINENO: '???',
  lexerActionsUseYYTEXT: '???',
  lexerActionsUseYYLOC: '???',
  lexerActionsUseParseError: '???',
  lexerActionsUseYYERROR: '???',
  lexerActionsUseLocationTracking: '???',
  lexerActionsUseMore: '???',
  lexerActionsUseUnput: '???',
  lexerActionsUseReject: '???',
  lexerActionsUseLess: '???',
  lexerActionsUseDisplayAPIs: '???',
  lexerActionsUseDescribeYYLOC: '???',
  lex_rule_dictionary: {
    rules: [
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: '// ignore',
        rule: '\\s+',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: `var msg = 'millenium hand';
			            log(rmCommonWS\`
			                bugger (\\\`%{\\\`${msg} ~ \\\`%{...%}\\\`) shrimp 
			            \`);
			            return yytext`,
        rule: 'a',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: `var msg = 'millenium hand';
			            log(rmCommonWS\`
			                bugger (\\\`%{\\\`${msg} ~ \\\`%{...%}\\\`) shrimp 
			            \`);
			            return yytext`,
        rule: 'b',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: `var msg = 'millenium hand';
			            log(rmCommonWS\`
			                bugger (\\\`%{\\\`${msg} ~ \\\`%{...%}\\\` ~ \\\`{{...}}\\\`) shrimp 
			            \`);
			            return yytext`,
        rule: 'c',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: `var msg = 'millenium hand';
			            log(rmCommonWS\`
			                bugger (\\\`%{\\\`${msg} ~ \\\`%{...%}\\\` ~ \\\`%{{...%}}\\\`) shrimp 
			            \`);
			            return yytext`,
        rule: 'd',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: `var msg = 'millenium hand';
			            log(rmCommonWS\`
			                bugger (\\\`%{\\\`${msg} ~ \\\`%{...%}\\\` ~ \\\`%{{...%}}\\\`) shrimp 
			            \`);
			            return yytext`,
        rule: 'e',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: `var msg = 'millenium hand';
			            log(rmCommonWS\`
			                bugger (\\\`%{\\\`${msg} ~ \\\`%{{{{...%}}}}\\\` ~ \\\`%{{...%}}\\\`) shrimp 
			            \`);
			            return yytext`,
        rule: 'f',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: `var msg = 'millenium hand';
			            log(rmCommonWS\`
			                bugger (\\\`%{\\\`${msg} ~ \\\`%{{{{...%}}}}\\\` ~ \\\`{{{{{...}}}}}\\\`) shrimp 
			            \`);
			            return yytext`,
        rule: 'g',
      },
    ],
    moduleInclude: `var rmCommonWS = helpers.rmCommonWS;

function log(msg) {}`,
    macros: {},
    startConditions: {},
    codeSections: [
      {
        qualifier: 'imports',
        include: "import helpers from '../../helpers-lib'",
      },
    ],
    importDecls: [],
    unknownDecls: [],
  },
  codeSections: [
    {
      qualifier: 'imports',
      include: "import helpers from '../../helpers-lib'",
    },
  ],
  importDecls: [],
  unknownDecls: [],
  options: {
    moduleType: 'commonjs',
    debug: false,
    enableDebugLogs: false,
    json: true,
    noMain: true,
    moduleMain: null,
    moduleMainImports: null,
    dumpSourceCodeOnFailure: false,
    throwErrorOnCompileFailure: true,
    doNotTestCompile: false,
    defaultModuleName: 'lexer',
    xregexp: false,
    lexerErrorsAreRecoverable: false,
    flex: false,
    backtrack_lexer: false,
    ranges: false,
    trackPosition: true,
    caseInsensitive: false,
    exportSourceCode: {
      enabled: false,
    },
    exportAST: false,
    prettyCfg: true,
  },
  conditions: {
    INITIAL: {
      rules: [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
      ],
      inclusive: true,
    },
  },
  performAction: `function lexer__performAction(yy, yyrulenumber, YY_START) {
            const yy_ = this;

            
const YYSTATE = YY_START;
switch(yyrulenumber) {
case 0 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       \\s+ */ 
 // ignore 
break;
case 1 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       a */ 
 var msg = 'millenium hand';
			            log(rmCommonWS\`
			                bugger (\\\`%{\\\`${msg} ~ \\\`%{...%}\\\`) shrimp 
			            \`);
			            return yy_.yytext 
break;
case 2 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       b */ 
 var msg = 'millenium hand';
			            log(rmCommonWS\`
			                bugger (\\\`%{\\\`${msg} ~ \\\`%{...%}\\\`) shrimp 
			            \`);
			            return yy_.yytext 
break;
case 3 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       c */ 
 var msg = 'millenium hand';
			            log(rmCommonWS\`
			                bugger (\\\`%{\\\`${msg} ~ \\\`%{...%}\\\` ~ \\\`{{...}}\\\`) shrimp 
			            \`);
			            return yy_.yytext 
break;
case 4 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       d */ 
 var msg = 'millenium hand';
			            log(rmCommonWS\`
			                bugger (\\\`%{\\\`${msg} ~ \\\`%{...%}\\\` ~ \\\`%{{...%}}\\\`) shrimp 
			            \`);
			            return yy_.yytext 
break;
case 5 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       e */ 
 var msg = 'millenium hand';
			            log(rmCommonWS\`
			                bugger (\\\`%{\\\`${msg} ~ \\\`%{...%}\\\` ~ \\\`%{{...%}}\\\`) shrimp 
			            \`);
			            return yy_.yytext 
break;
case 6 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       f */ 
 var msg = 'millenium hand';
			            log(rmCommonWS\`
			                bugger (\\\`%{\\\`${msg} ~ \\\`%{{{{...%}}}}\\\` ~ \\\`%{{...%}}\\\`) shrimp 
			            \`);
			            return yy_.yytext 
break;
case 7 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       g */ 
 var msg = 'millenium hand';
			            log(rmCommonWS\`
			                bugger (\\\`%{\\\`${msg} ~ \\\`%{{{{...%}}}}\\\` ~ \\\`{{{{{...}}}}}\\\`) shrimp 
			            \`);
			            return yy_.yytext 
break;
}
        }`,
  caseHelperInclude: `{

}`,
  rules: [
    {
      re: '/^(?:\\s+)/',
      source: '^(?:\\s+)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\s+)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:a)/',
      source: '^(?:a)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:a)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:b)/',
      source: '^(?:b)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:b)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:c)/',
      source: '^(?:c)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:c)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:d)/',
      source: '^(?:d)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:d)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:e)/',
      source: '^(?:e)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:e)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:f)/',
      source: '^(?:f)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:f)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:g)/',
      source: '^(?:g)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:g)',
        flags: '',
        isNative: true,
      },
    },
  ],
  macros: {},
  regular_rule_count: 8,
  simple_rule_count: 0,
  conditionStack: [
    'INITIAL',
  ],
  actionInclude: '',
  moduleInclude: `



var rmCommonWS = helpers.rmCommonWS;

function log(msg) {}`,
  __in_rules_failure_analysis_mode__: false,
  is_custom_lexer: false,
}