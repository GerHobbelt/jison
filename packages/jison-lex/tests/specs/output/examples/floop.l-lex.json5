
//=============================================================================
//                     JISON-LEX OPTIONS:

{
  lexerActionsUseYYLENG: '???',
  lexerActionsUseYYLINENO: '???',
  lexerActionsUseYYTEXT: '???',
  lexerActionsUseYYLOC: '???',
  lexerActionsUseParseError: '???',
  lexerActionsUseYYERROR: '???',
  lexerActionsUseLocationTracking: '???',
  lexerActionsUseMore: '???',
  lexerActionsUseUnput: '???',
  lexerActionsUseReject: '???',
  lexerActionsUseLess: '???',
  lexerActionsUseDisplayAPIs: '???',
  lexerActionsUseDescribeYYLOC: '???',
  lex_rule_dictionary: {
    rules: [
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: '/* ignore */',
        rule: '\\s+',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'NUMBER'",
        rule: '{NUM}',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'DEFINE'",
        rule: 'DEFINE',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'PROCEDURE'",
        rule: 'PROCEDURE',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'BLOCK'",
        rule: 'BLOCK',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'BEGIN'",
        rule: 'BEGIN',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'OUTPUT'",
        rule: 'OUTPUT',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'CELL'",
        rule: 'CELL',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'IF'",
        rule: 'IF',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'THEN'",
        rule: 'THEN',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'LOOP'",
        rule: 'LOOP',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: `return yy.bloop ? 'INVALID' : 'MU_LOOP'`,
        rule: 'MU-LOOP',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'AT'",
        rule: 'AT',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'MOST'",
        rule: 'MOST',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'TIMES'",
        rule: 'TIMES',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'ABORT'",
        rule: 'ABORT',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'END'",
        rule: 'END',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'QUIT'",
        rule: 'QUIT',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'AND'",
        rule: 'AND',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'YES'",
        rule: 'YES',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'NO'",
        rule: 'NO',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'IDENT'",
        rule: '{ID}',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return '.'",
        rule: '\\.',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'QUOTE'",
        rule: "''",
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return '['",
        rule: '\\[',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return ']'",
        rule: '\\]',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return '('",
        rule: '\\(',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return ')'",
        rule: '\\)',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return '{'",
        rule: '\\{',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return '}'",
        rule: '\\}',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return ':'",
        rule: ':',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return ';'",
        rule: ';',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return ','",
        rule: ',',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return '+'",
        rule: '\\+',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return '*'",
        rule: '\\*',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return '*'  //non-ascii",
        rule: '×',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return '<='",
        rule: '<=',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return '<=' //non-ascii",
        rule: '⇐',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return '<'",
        rule: '<',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return '>'",
        rule: '>',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return '='",
        rule: '=',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'EOF'",
        rule: '$',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'INVALID'",
        rule: '.',
      },
    ],
    macros: {
      ID: '[A-Z-]+\\??',
      NUM: '([1-9][0-9]+|[0-9])',
    },
    startConditions: {},
    codeSections: [],
    importDecls: [],
    unknownDecls: [],
    options: {
      flex: true,
      caseInsensitive: true,
    },
  },
  codeSections: [],
  importDecls: [],
  unknownDecls: [],
  options: {
    moduleType: 'commonjs',
    debug: false,
    enableDebugLogs: false,
    json: true,
    noMain: true,
    moduleMain: null,
    moduleMainImports: null,
    dumpSourceCodeOnFailure: false,
    throwErrorOnCompileFailure: true,
    doNotTestCompile: false,
    defaultModuleName: 'lexer',
    xregexp: false,
    lexerErrorsAreRecoverable: false,
    flex: true,
    backtrack_lexer: false,
    ranges: false,
    trackPosition: true,
    caseInsensitive: true,
    exportSourceCode: {
      enabled: false,
    },
    exportAST: false,
    prettyCfg: true,
  },
  conditions: {
    INITIAL: {
      rules: [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
      ],
      inclusive: true,
    },
  },
  performAction: `function lexer__performAction(yy, yyrulenumber, YY_START) {
            const yy_ = this;

            
const YYSTATE = YY_START;
switch(yyrulenumber) {
case 0 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       \\s+ */ 
 /* ignore */ 
break;
case 11 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       MU-LOOP */ 
 return yy.bloop ? 'INVALID' : 'MU_LOOP' 
break;
case 35 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       × */ 
 return '*'  //non-ascii 
break;
case 37 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       ⇐ */ 
 return '<=' //non-ascii 
break;
case 43 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       . */ 
 console.log("", yy_.yytext); /* \`flex\` lexing mode: the last resort rule! */ 
break;
default:
  return this.simpleCaseActionClusters[yyrulenumber];
}
        }`,
  caseHelperInclude: `{

  /*! Conditions:: INITIAL */ 
  /*! Rule::       {NUM} */ 
   1 : 'NUMBER',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       DEFINE */ 
   2 : 'DEFINE',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       PROCEDURE */ 
   3 : 'PROCEDURE',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       BLOCK */ 
   4 : 'BLOCK',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       BEGIN */ 
   5 : 'BEGIN',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       OUTPUT */ 
   6 : 'OUTPUT',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       CELL */ 
   7 : 'CELL',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       IF */ 
   8 : 'IF',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       THEN */ 
   9 : 'THEN',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       LOOP */ 
   10 : 'LOOP',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       AT */ 
   12 : 'AT',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       MOST */ 
   13 : 'MOST',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       TIMES */ 
   14 : 'TIMES',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       ABORT */ 
   15 : 'ABORT',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       END */ 
   16 : 'END',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       QUIT */ 
   17 : 'QUIT',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       AND */ 
   18 : 'AND',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       YES */ 
   19 : 'YES',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       NO */ 
   20 : 'NO',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       {ID} */ 
   21 : 'IDENT',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \\. */ 
   22 : '.',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       '' */ 
   23 : 'QUOTE',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \\[ */ 
   24 : '[',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \\] */ 
   25 : ']',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \\( */ 
   26 : '(',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \\) */ 
   27 : ')',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \\{ */ 
   28 : '{',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \\} */ 
   29 : '}',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       : */ 
   30 : ':',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       ; */ 
   31 : ';',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       , */ 
   32 : ',',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \\+ */ 
   33 : '+',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \\* */ 
   34 : '*',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       <= */ 
   36 : '<=',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       < */ 
   38 : '<',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       > */ 
   39 : '>',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       = */ 
   40 : '=',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       $ */ 
   41 : 'EOF',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       . */ 
   42 : 'INVALID'
}`,
  rules: [
    {
      re: '/^(?:\\s+)/i',
      source: '^(?:\\s+)',
      flags: 'i',
      xregexp: {
        captureNames: null,
        source: '^(?:\\s+)',
        flags: 'i',
        isNative: true,
      },
    },
    {
      re: '/^(?:(([1-9][0-9]+|[0-9])))/i',
      source: '^(?:(([1-9][0-9]+|[0-9])))',
      flags: 'i',
      xregexp: {
        captureNames: null,
        source: '^(?:(([1-9][0-9]+|[0-9])))',
        flags: 'i',
        isNative: true,
      },
    },
    {
      re: '/^(?:DEFINE)/i',
      source: '^(?:DEFINE)',
      flags: 'i',
      xregexp: {
        captureNames: null,
        source: '^(?:DEFINE)',
        flags: 'i',
        isNative: true,
      },
    },
    {
      re: '/^(?:PROCEDURE)/i',
      source: '^(?:PROCEDURE)',
      flags: 'i',
      xregexp: {
        captureNames: null,
        source: '^(?:PROCEDURE)',
        flags: 'i',
        isNative: true,
      },
    },
    {
      re: '/^(?:BLOCK)/i',
      source: '^(?:BLOCK)',
      flags: 'i',
      xregexp: {
        captureNames: null,
        source: '^(?:BLOCK)',
        flags: 'i',
        isNative: true,
      },
    },
    {
      re: '/^(?:BEGIN)/i',
      source: '^(?:BEGIN)',
      flags: 'i',
      xregexp: {
        captureNames: null,
        source: '^(?:BEGIN)',
        flags: 'i',
        isNative: true,
      },
    },
    {
      re: '/^(?:OUTPUT)/i',
      source: '^(?:OUTPUT)',
      flags: 'i',
      xregexp: {
        captureNames: null,
        source: '^(?:OUTPUT)',
        flags: 'i',
        isNative: true,
      },
    },
    {
      re: '/^(?:CELL)/i',
      source: '^(?:CELL)',
      flags: 'i',
      xregexp: {
        captureNames: null,
        source: '^(?:CELL)',
        flags: 'i',
        isNative: true,
      },
    },
    {
      re: '/^(?:IF)/i',
      source: '^(?:IF)',
      flags: 'i',
      xregexp: {
        captureNames: null,
        source: '^(?:IF)',
        flags: 'i',
        isNative: true,
      },
    },
    {
      re: '/^(?:THEN)/i',
      source: '^(?:THEN)',
      flags: 'i',
      xregexp: {
        captureNames: null,
        source: '^(?:THEN)',
        flags: 'i',
        isNative: true,
      },
    },
    {
      re: '/^(?:LOOP)/i',
      source: '^(?:LOOP)',
      flags: 'i',
      xregexp: {
        captureNames: null,
        source: '^(?:LOOP)',
        flags: 'i',
        isNative: true,
      },
    },
    {
      re: '/^(?:MU-LOOP)/i',
      source: '^(?:MU-LOOP)',
      flags: 'i',
      xregexp: {
        captureNames: null,
        source: '^(?:MU-LOOP)',
        flags: 'i',
        isNative: true,
      },
    },
    {
      re: '/^(?:AT)/i',
      source: '^(?:AT)',
      flags: 'i',
      xregexp: {
        captureNames: null,
        source: '^(?:AT)',
        flags: 'i',
        isNative: true,
      },
    },
    {
      re: '/^(?:MOST)/i',
      source: '^(?:MOST)',
      flags: 'i',
      xregexp: {
        captureNames: null,
        source: '^(?:MOST)',
        flags: 'i',
        isNative: true,
      },
    },
    {
      re: '/^(?:TIMES)/i',
      source: '^(?:TIMES)',
      flags: 'i',
      xregexp: {
        captureNames: null,
        source: '^(?:TIMES)',
        flags: 'i',
        isNative: true,
      },
    },
    {
      re: '/^(?:ABORT)/i',
      source: '^(?:ABORT)',
      flags: 'i',
      xregexp: {
        captureNames: null,
        source: '^(?:ABORT)',
        flags: 'i',
        isNative: true,
      },
    },
    {
      re: '/^(?:END)/i',
      source: '^(?:END)',
      flags: 'i',
      xregexp: {
        captureNames: null,
        source: '^(?:END)',
        flags: 'i',
        isNative: true,
      },
    },
    {
      re: '/^(?:QUIT)/i',
      source: '^(?:QUIT)',
      flags: 'i',
      xregexp: {
        captureNames: null,
        source: '^(?:QUIT)',
        flags: 'i',
        isNative: true,
      },
    },
    {
      re: '/^(?:AND)/i',
      source: '^(?:AND)',
      flags: 'i',
      xregexp: {
        captureNames: null,
        source: '^(?:AND)',
        flags: 'i',
        isNative: true,
      },
    },
    {
      re: '/^(?:YES)/i',
      source: '^(?:YES)',
      flags: 'i',
      xregexp: {
        captureNames: null,
        source: '^(?:YES)',
        flags: 'i',
        isNative: true,
      },
    },
    {
      re: '/^(?:NO)/i',
      source: '^(?:NO)',
      flags: 'i',
      xregexp: {
        captureNames: null,
        source: '^(?:NO)',
        flags: 'i',
        isNative: true,
      },
    },
    {
      re: '/^(?:([A-Z-]+\\??))/i',
      source: '^(?:([A-Z-]+\\??))',
      flags: 'i',
      xregexp: {
        captureNames: null,
        source: '^(?:([A-Z-]+\\??))',
        flags: 'i',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\.)/i',
      source: '^(?:\\.)',
      flags: 'i',
      xregexp: {
        captureNames: null,
        source: '^(?:\\.)',
        flags: 'i',
        isNative: true,
      },
    },
    {
      re: "/^(?:'')/i",
      source: "^(?:'')",
      flags: 'i',
      xregexp: {
        captureNames: null,
        source: "^(?:'')",
        flags: 'i',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\[)/i',
      source: '^(?:\\[)',
      flags: 'i',
      xregexp: {
        captureNames: null,
        source: '^(?:\\[)',
        flags: 'i',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\])/i',
      source: '^(?:\\])',
      flags: 'i',
      xregexp: {
        captureNames: null,
        source: '^(?:\\])',
        flags: 'i',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\()/i',
      source: '^(?:\\()',
      flags: 'i',
      xregexp: {
        captureNames: null,
        source: '^(?:\\()',
        flags: 'i',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\))/i',
      source: '^(?:\\))',
      flags: 'i',
      xregexp: {
        captureNames: null,
        source: '^(?:\\))',
        flags: 'i',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\{)/i',
      source: '^(?:\\{)',
      flags: 'i',
      xregexp: {
        captureNames: null,
        source: '^(?:\\{)',
        flags: 'i',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\})/i',
      source: '^(?:\\})',
      flags: 'i',
      xregexp: {
        captureNames: null,
        source: '^(?:\\})',
        flags: 'i',
        isNative: true,
      },
    },
    {
      re: '/^(?::)/i',
      source: '^(?::)',
      flags: 'i',
      xregexp: {
        captureNames: null,
        source: '^(?::)',
        flags: 'i',
        isNative: true,
      },
    },
    {
      re: '/^(?:;)/i',
      source: '^(?:;)',
      flags: 'i',
      xregexp: {
        captureNames: null,
        source: '^(?:;)',
        flags: 'i',
        isNative: true,
      },
    },
    {
      re: '/^(?:,)/i',
      source: '^(?:,)',
      flags: 'i',
      xregexp: {
        captureNames: null,
        source: '^(?:,)',
        flags: 'i',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\+)/i',
      source: '^(?:\\+)',
      flags: 'i',
      xregexp: {
        captureNames: null,
        source: '^(?:\\+)',
        flags: 'i',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\*)/i',
      source: '^(?:\\*)',
      flags: 'i',
      xregexp: {
        captureNames: null,
        source: '^(?:\\*)',
        flags: 'i',
        isNative: true,
      },
    },
    {
      re: '/^(?:×)/i',
      source: '^(?:×)',
      flags: 'i',
      xregexp: {
        captureNames: null,
        source: '^(?:×)',
        flags: 'i',
        isNative: true,
      },
    },
    {
      re: '/^(?:<=)/i',
      source: '^(?:<=)',
      flags: 'i',
      xregexp: {
        captureNames: null,
        source: '^(?:<=)',
        flags: 'i',
        isNative: true,
      },
    },
    {
      re: '/^(?:⇐)/i',
      source: '^(?:⇐)',
      flags: 'i',
      xregexp: {
        captureNames: null,
        source: '^(?:⇐)',
        flags: 'i',
        isNative: true,
      },
    },
    {
      re: '/^(?:<)/i',
      source: '^(?:<)',
      flags: 'i',
      xregexp: {
        captureNames: null,
        source: '^(?:<)',
        flags: 'i',
        isNative: true,
      },
    },
    {
      re: '/^(?:>)/i',
      source: '^(?:>)',
      flags: 'i',
      xregexp: {
        captureNames: null,
        source: '^(?:>)',
        flags: 'i',
        isNative: true,
      },
    },
    {
      re: '/^(?:=)/i',
      source: '^(?:=)',
      flags: 'i',
      xregexp: {
        captureNames: null,
        source: '^(?:=)',
        flags: 'i',
        isNative: true,
      },
    },
    {
      re: '/^(?:$)/i',
      source: '^(?:$)',
      flags: 'i',
      xregexp: {
        captureNames: null,
        source: '^(?:$)',
        flags: 'i',
        isNative: true,
      },
    },
    {
      re: '/^(?:.)/i',
      source: '^(?:.)',
      flags: 'i',
      xregexp: {
        captureNames: null,
        source: '^(?:.)',
        flags: 'i',
        isNative: true,
      },
    },
    {
      re: '/^(?:.)/i',
      source: '^(?:.)',
      flags: 'i',
      xregexp: {
        captureNames: null,
        source: '^(?:.)',
        flags: 'i',
        isNative: true,
      },
    },
  ],
  macros: {
    ID: {
      in_set: {
        message: '[macro [ID] is unsuitable for use inside regex set expressions: "[[A-Z-]+\\??]"]',
        name: 'Error',
      },
      elsewhere: '[A-Z-]+\\??',
      raw: '[A-Z-]+\\??',
    },
    NUM: {
      in_set: {
        message: '[macro [NUM] is unsuitable for use inside regex set expressions: "[([1-9][0-9]+|[0-9])]"]',
        name: 'Error',
      },
      elsewhere: '([1-9][0-9]+|[0-9])',
      raw: '([1-9][0-9]+|[0-9])',
    },
  },
  regular_rule_count: 5,
  simple_rule_count: 39,
  conditionStack: [
    'INITIAL',
  ],
  actionInclude: '',
  moduleInclude: '',
  __in_rules_failure_analysis_mode__: false,
  is_custom_lexer: false,
}