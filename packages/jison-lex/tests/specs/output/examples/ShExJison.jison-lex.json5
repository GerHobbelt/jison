
//=============================================================================
//                     JISON-LEX OPTIONS:

{
  lexerActionsUseYYLENG: '???',
  lexerActionsUseYYLINENO: '???',
  lexerActionsUseYYTEXT: '???',
  lexerActionsUseYYLOC: '???',
  lexerActionsUseParseError: '???',
  lexerActionsUseYYERROR: '???',
  lexerActionsUseLocationTracking: '???',
  lexerActionsUseMore: '???',
  lexerActionsUseUnput: '???',
  lexerActionsUseReject: '???',
  lexerActionsUseLess: '???',
  lexerActionsUseDisplayAPIs: '???',
  lexerActionsUseDescribeYYLOC: '???',
  lex_rule_dictionary: {
    rules: [
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: '/**/',
        rule: '\\s+|{COMMENT}',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'ATPNAME_LN'",
        rule: '{ATPNAME_LN}',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'ATPNAME_NS'",
        rule: '{ATPNAME_NS}',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "yytext = yytext.substr(1); return 'LANGTAG'",
        rule: '{LANGTAG}',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return '@'",
        rule: '@',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'PNAME_LN'",
        rule: '{PNAME_LN}',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'REPEAT_RANGE'",
        rule: '{REPEAT_RANGE}',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'DOUBLE'",
        rule: '{DOUBLE}',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'DECIMAL'",
        rule: '{DECIMAL}',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'INTEGER'",
        rule: '{INTEGER}',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'ANON'",
        rule: '{ANON}',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'IRIREF'",
        rule: '{IRIREF}',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'PNAME_NS'",
        rule: '{PNAME_NS}',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'a'",
        rule: 'a',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'REGEXP'",
        rule: '{REGEXP}',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'BLANK_NODE_LABEL'",
        rule: '{BLANK_NODE_LABEL}',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'CODE'",
        rule: '{CODE}',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'LANG_STRING_LITERAL_LONG1'",
        rule: '{LANG_STRING_LITERAL_LONG1}',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'LANG_STRING_LITERAL_LONG2'",
        rule: '{LANG_STRING_LITERAL_LONG2}',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'LANG_STRING_LITERAL1'",
        rule: '{LANG_STRING_LITERAL1}',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'LANG_STRING_LITERAL2'",
        rule: '{LANG_STRING_LITERAL2}',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'STRING_LITERAL_LONG1'",
        rule: '{STRING_LITERAL_LONG1}',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'STRING_LITERAL_LONG2'",
        rule: '{STRING_LITERAL_LONG2}',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'STRING_LITERAL1'",
        rule: '{STRING_LITERAL1}',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'STRING_LITERAL2'",
        rule: '{STRING_LITERAL2}',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'IT_BASE'",
        rule: '{IT_BASE}',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'IT_PREFIX'",
        rule: '{IT_PREFIX}',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'IT_IMPORT'",
        rule: '{IT_IMPORT}',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'IT_start'",
        rule: '{IT_START}',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'IT_EXTERNAL'",
        rule: '{IT_EXTERNAL}',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'IT_CLOSED'",
        rule: '{IT_CLOSED}',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'IT_EXTRA'",
        rule: '{IT_EXTRA}',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'IT_LITERAL'",
        rule: '{IT_LITERAL}',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'IT_BNODE'",
        rule: '{IT_BNODE}',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'IT_IRI'",
        rule: '{IT_IRI}',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'IT_NONLITERAL'",
        rule: '{IT_NONLITERAL}',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'IT_AND'",
        rule: '{IT_AND}',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'IT_OR'",
        rule: '{IT_OR}',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'IT_NOT'",
        rule: '{IT_NOT}',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'IT_MININCLUSIVE'",
        rule: '{IT_MININCLUSIVE}',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'IT_MINEXCLUSIVE'",
        rule: '{IT_MINEXCLUSIVE}',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'IT_MAXINCLUSIVE'",
        rule: '{IT_MAXINCLUSIVE}',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'IT_MAXEXCLUSIVE'",
        rule: '{IT_MAXEXCLUSIVE}',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'IT_LENGTH'",
        rule: '{IT_LENGTH}',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'IT_MINLENGTH'",
        rule: '{IT_MINLENGTH}',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'IT_MAXLENGTH'",
        rule: '{IT_MAXLENGTH}',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'IT_TOTALDIGITS'",
        rule: '{IT_TOTALDIGITS}',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'IT_FRACTIONDIGITS'",
        rule: '{IT_FRACTIONDIGITS}',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return '='",
        rule: '=',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return '//'",
        rule: '\\/\\/',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return '{'",
        rule: '\\{',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return '}'",
        rule: '\\}',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return '&'",
        rule: '&',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return '||'",
        rule: '\\|\\|',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return '|'",
        rule: '\\|',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return ','",
        rule: ',',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return '('",
        rule: '\\(',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return ')'",
        rule: '\\)',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return '['",
        rule: '\\[',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return ']'",
        rule: '\\]',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return '$'",
        rule: '\\$',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return '!'",
        rule: '!',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return '^^'",
        rule: '\\^\\^',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return '^'",
        rule: '\\^',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return '.'",
        rule: '\\.',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return '~'",
        rule: '~',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return ';'",
        rule: ';',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return '*'",
        rule: '\\*',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return '+'",
        rule: '\\+',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return '?'",
        rule: '\\?',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return '-'",
        rule: '-',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return '%'",
        rule: '%',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'IT_true'",
        rule: 'true',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'IT_false'",
        rule: 'false',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'EOF'",
        rule: '$',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: `return 'unexpected word "'+yytext+'"'`,
        rule: '[a-zA-Z0-9_-]+',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'invalid character '+yytext",
        rule: '.',
      },
    ],
    macros: {
      IT_BASE: '[Bb][Aa][Ss][Ee]',
      IT_PREFIX: '[Pp][Rr][Ee][Ff][Ii][Xx]',
      IT_IMPORT: '[iI][mM][pP][oO][rR][tT]',
      IT_START: '[sS][tT][aA][rR][tT]',
      IT_EXTERNAL: '[eE][xX][tT][eE][rR][nN][aA][lL]',
      IT_CLOSED: '[Cc][Ll][Oo][Ss][Ee][Dd]',
      IT_EXTRA: '[Ee][Xx][Tt][Rr][Aa]',
      IT_LITERAL: '[Ll][Ii][Tt][Ee][Rr][Aa][Ll]',
      IT_BNODE: '[Bb][Nn][Oo][Dd][Ee]',
      IT_IRI: '[Ii][Rr][Ii]',
      IT_NONLITERAL: '[Nn][Oo][Nn][Ll][Ii][Tt][Ee][Rr][Aa][Ll]',
      IT_AND: '[Aa][Nn][Dd]',
      IT_OR: '[Oo][Rr]',
      IT_NOT: '[No][Oo][Tt]',
      IT_MININCLUSIVE: '[Mm][Ii][Nn][Ii][Nn][Cc][Ll][Uu][Ss][Ii][Vv][Ee]',
      IT_MINEXCLUSIVE: '[Mm][Ii][Nn][Ee][Xx][Cc][Ll][Uu][Ss][Ii][Vv][Ee]',
      IT_MAXINCLUSIVE: '[Mm][Aa][Xx][Ii][Nn][Cc][Ll][Uu][Ss][Ii][Vv][Ee]',
      IT_MAXEXCLUSIVE: '[Mm][Aa][Xx][Ee][Xx][Cc][Ll][Uu][Ss][Ii][Vv][Ee]',
      IT_LENGTH: '[Ll][Ee][Nn][Gg][Tt][Hh]',
      IT_MINLENGTH: '[Mm][Ii][Nn][Ll][Ee][Nn][Gg][Tt][Hh]',
      IT_MAXLENGTH: '[Mm][Aa][Xx][Ll][Ee][Nn][Gg][Tt][Hh]',
      IT_TOTALDIGITS: '[Tt][Oo][Tt][Aa][Ll][Dd][Ii][Gg][Ii][Tt][Ss]',
      IT_FRACTIONDIGITS: '[Ff][Rr][Aa][Cc][Tt][Ii][Oo][Nn][Dd][Ii][Gg][Ii][Tt][Ss]',
      LANGTAG: '@([A-Za-z])+((-([0-9A-Za-z])+))*',
      INTEGER: '([+-])?([0-9])+',
      REPEAT_RANGE: '\\{({INTEGER})((,(({INTEGER})|\\*)?))?\\}',
      DECIMAL: '([+-])?([0-9])*\\.([0-9])+',
      EXPONENT: '[Ee]([+-])?([0-9])+',
      DOUBLE: '([+-])?((([0-9])+\\.([0-9])*({EXPONENT}))|((\\.)?([0-9])+({EXPONENT})))',
      ECHAR: '\\\\[\\"\\\'\\\\bfnrt]',
      WS: '( )|((\\t)|((\\r)|(\\n)))',
      PN_CHARS_BASE: '[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF]',
      PN_CHARS_U: '{PN_CHARS_BASE}|_|_',
      PN_CHARS: '{PN_CHARS_U}|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040]',
      REGEXP: '\\/([^\\u002f\\u005C\\u000A\\u000D]|\\\\[nrt\\\\|.?*+(){}$\\u002D\\u005B\\u005D\\u005E/]|{UCHAR})+\\/[smix]*',
      BLANK_NODE_LABEL: '_:({PN_CHARS_U}|[0-9])(({PN_CHARS}|\\.)*{PN_CHARS})?',
      PN_PREFIX: '{PN_CHARS_BASE}(({PN_CHARS}|\\.)*{PN_CHARS})?',
      PNAME_NS: '{PN_PREFIX}?:',
      ATPNAME_NS: '@{PNAME_NS}',
      HEX: '[0-9]|[A-F]|[a-f]',
      PERCENT: '%{HEX}{HEX}',
      UCHAR: '\\\\u{HEX}{HEX}{HEX}{HEX}|\\\\U{HEX}{HEX}{HEX}{HEX}{HEX}{HEX}{HEX}{HEX}',
      CODE: '\\{([^%\\\\]|\\\\[%\\\\]|{UCHAR})*%\\}',
      STRING_LITERAL1: "'([^\\u0027\\u005c\\u000a\\u000d]|{ECHAR}|{UCHAR})*'",
      STRING_LITERAL2: '"([^\\u0022\\u005c\\u000a\\u000d]|{ECHAR}|{UCHAR})*"',
      STRING_LITERAL_LONG1: `'''(('|'')?([^\\'\\\\]|{ECHAR}|{UCHAR}))*'''`,
      STRING_LITERAL_LONG2: `"""(("|"")?([^\\"\\\\]|{ECHAR}|{UCHAR}))*"""`,
      LANG_STRING_LITERAL1: "'([^\\u0027\\u005c\\u000a\\u000d]|{ECHAR}|{UCHAR})*'{LANGTAG}",
      LANG_STRING_LITERAL2: '"([^\\u0022\\u005c\\u000a\\u000d]|{ECHAR}|{UCHAR})*"{LANGTAG}',
      LANG_STRING_LITERAL_LONG1: `'''(('|'')?([^\\'\\\\]|{ECHAR}|{UCHAR}))*'''{LANGTAG}`,
      LANG_STRING_LITERAL_LONG2: `"""(("|"")?([^\\"\\\\]|{ECHAR}|{UCHAR}))*"""{LANGTAG}`,
      IRIREF: '<([^\\u0000-\\u0020<>\\"{}|^`\\\\]|{UCHAR})*>',
      PN_LOCAL_ESC: "\\\\(_|~|\\.|-|!|\\$|&|'|\\(|\\)|\\*|\\+|,|;|=|\\/|\\?|#|@|%)",
      PLX: '{PERCENT}|{PN_LOCAL_ESC}',
      PN_LOCAL: '({PN_CHARS_U}|:|[0-9]|{PLX})({PN_CHARS}|\\.|:|{PLX})*',
      PNAME_LN: '{PNAME_NS}{PN_LOCAL}',
      ATPNAME_LN: '@{PNAME_LN}',
      COMMENT: '#[^\\u000a\\u000d]*|\\/\\*([^*]|\\*([^/]|\\\\\\/))*\\*\\/',
    },
    startConditions: {},
    codeSections: [
      {
        qualifier: 'init',
        include: `// Included by Jison: includes/unicode.helpers.js:

// helper APIs for testing the unicode*.jisonlex lexer specs

// WARNING: this stuff is purely here so the example(s) will pass the default run test. You mileage will be NIL on these!

let predictive_random_seed = 5;

function getSemiRandomNumber() {
	predictive_random_seed = (predictive_random_seed * 31 + 7) % 51;	
	return predictive_random_seed;
}

// these are used in a three-way test in unicode2 spec:
function is_constant(str) {
	return getSemiRandomNumber() % 3 === 1;
}
function is_function(str) {
	return getSemiRandomNumber() % 3 === 2;
}



const FERR_UNTERMINATED_INLINE_COMMENT = 0x0100;
const FKA_COMMA = 0x0101;
const FKA_FIXED_ROW_OR_COLUMN_MARKER = 0x0102;
const FKA_RANGE_MARKER = 0x0103;
const FKW_ADD = 0x0104;
const FKW_ALMOST_EQUAL = 0x0105;
const FKW_ARRAY_CONCATENATION_OPERATOR = 0x0106;
const FKW_BOOLEAN_AND_OPERATOR = 0x0107;
const FKW_BOOLEAN_NOT_OPERATOR = 0x0108;
const FKW_BOOLEAN_OR_OPERATOR = 0x0109;
const FKW_CUBE_OPERATOR = 0x010A;
const FKW_DATA_MARKER = 0x010B;
const FKW_DEGREES_OPERATOR = 0x010C;
const FKW_DIVIDE = 0x010D;
const FKW_DOT = 0x010E;
const FKW_EQUAL = 0x010F;
const FKW_GREATER_OR_EQUAL = 0x0110;
const FKW_GREATER_THAN = 0x0111;
const FKW_IS_IDENTICAL = 0x0112;
const FKW_LESS_OR_EQUAL = 0x0113;
const FKW_LESS_THAN = 0x0114;
const FKW_MODULO_OPERATOR = 0x0115;
const FKW_MULTIPLY = 0x0116;
const FKW_NOT_EQUAL = 0x0117;
const FKW_NOT_IDENTICAL = 0x0118;
const FKW_POWER = 0x0119;
const FKW_PROMILAGE_OPERATOR = 0x011A;
const FKW_SQRT_OPERATOR = 0x011B;
const FKW_SQUARE_OPERATOR = 0x011C;
const FKW_STRING_CONCATENATION_OPERATOR = 0x011D;
const FKW_SUBTRACT = 0x011E;
const FKW_VALUE = 0x011F;

const FT_BOOLEAN = 0x00100000;
const FT_NUMBER = 0x00200000;
const FT_STRING = 0x00400000;

const FU_ANY = 0x00010000;
const FU_DERIVED = 0x00020000;
const FU_STRING = 0x00040000;



class ASTnode {
	constructor(n) {
		this.id = n;
	}

	setLocationInfo(loc) {
		this._yylloc = loc;
		return this;
	}
	setCommentsIndex(n) {
		this._commentIndex = n;
		return this;
	}
    setLexedText(s) {
    	this._lexedText = s;
		return this;
    }
}

class lexerToken extends ASTnode {
	constructor(n) {
		super(n);
	}
}

class ASTcurrency extends ASTnode {
	constructor(v) {
		super('$');
		this._currency = v;
	}
}

class ASTerror extends ASTnode {
	constructor(e, msg) {
		super('E');
		this._errorCode = e;
		this._errorMessage = msg;
	}
}

class ASTopcode extends ASTnode {
	constructor(n) {
		super('C');
		this.opcode = n;
	}
}

class ASTvalue extends ASTnode {
	constructor(v, a) {
		super('V');
		this._value = v;
		this._attributes = a;
	}
}


const symbolHashTable = {};


const parser = {
	getNextCommentIndex() {
		return getSemiRandomNumber();
	}
	dedupQuotedString(s, q) {
		return s;
	}
	deepCopy(loc) {
		// fake a deep clone with a shallow one:
		return Object.assign({}, loc);
	}
	getSymbol4Currency(s) {
		return '$$$' + s;		
	}
	getSymbol4DefinedConstant(s) {
		if (!symbolHashTable[s]) {
			let n = getSemiRandomNumber();
			symbolHashTable[s] = 'S' + n;
		}
		return symbolHashTable[s];
	}
	pushComment() {
		/**/
	}
}


//----------------------------------------------------------------------
//
// ShEx
// 

const ShExUtil = {
	unescapeText(s, delim) {
	  return s;
	}
};

const Parser = {

}

// End Of Include by Jison: includes/unicode.helpers.js`,
      },
    ],
    importDecls: [],
    unknownDecls: [],
    actionInclude: `/*
    ShEx parser in the Jison parser generator format.
  */

  const UNBOUNDED = -1;

  //const ShExUtil = require("@shexjs/util");
  // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  // WARNING: brutal hack to make example compile and run in minimal jison-gho lexer CLI environment.

  // Common namespaces and entities
  const RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
      RDF_TYPE  = RDF + 'type',
      RDF_FIRST = RDF + 'first',
      RDF_REST  = RDF + 'rest',
      RDF_NIL   = RDF + 'nil',
      XSD = 'http://www.w3.org/2001/XMLSchema#',
      XSD_INTEGER  = XSD + 'integer',
      XSD_DECIMAL  = XSD + 'decimal',
      XSD_FLOAT   = XSD + 'float',
      XSD_DOUBLE   = XSD + 'double',
      XSD_BOOLEAN  = XSD + 'boolean',
      XSD_TRUE =  '"true"^^'  + XSD_BOOLEAN,
      XSD_FALSE = '"false"^^' + XSD_BOOLEAN,
      XSD_PATTERN        = XSD + 'pattern',
      XSD_MININCLUSIVE   = XSD + 'minInclusive',
      XSD_MINEXCLUSIVE   = XSD + 'minExclusive',
      XSD_MAXINCLUSIVE   = XSD + 'maxInclusive',
      XSD_MAXEXCLUSIVE   = XSD + 'maxExclusive',
      XSD_LENGTH         = XSD + 'length',
      XSD_MINLENGTH      = XSD + 'minLength',
      XSD_MAXLENGTH      = XSD + 'maxLength',
      XSD_TOTALDIGITS    = XSD + 'totalDigits',
      XSD_FRACTIONDIGITS = XSD + 'fractionDigits';

  const numericDatatypes = [
      XSD + "integer",
      XSD + "decimal",
      XSD + "float",
      XSD + "double",
      XSD + "string",
      XSD + "boolean",
      XSD + "dateTime",
      XSD + "nonPositiveInteger",
      XSD + "negativeInteger",
      XSD + "long",
      XSD + "int",
      XSD + "short",
      XSD + "byte",
      XSD + "nonNegativeInteger",
      XSD + "unsignedLong",
      XSD + "unsignedInt",
      XSD + "unsignedShort",
      XSD + "unsignedByte",
      XSD + "positiveInteger"
  ];

  const absoluteIRI = /^[a-z][a-z0-9+.-]*:/i,
    schemeAuthority = /^(?:([a-z][a-z0-9+.-]*:))?(?:\\/\\/[^\\/]*)?/i,
    dotSegments = /(?:^|\\/)\\.\\.?(?:$|[\\/#?])/;

  const numericFacets = ["mininclusive", "minexclusive",
                       "maxinclusive", "maxexclusive"];

  // Returns a lowercase version of the given string
  function lowercase(string) {
    return string.toLowerCase();
  }

  // Appends the item to the array and returns the array
  function appendTo(array, item) {
    return array.push(item), array;
  }

  // Appends the items to the array and returns the array
  function appendAllTo(array, items) {
    return array.push.apply(array, items), array;
  }

  // Extends a base object with properties of other objects
  function extend(base) {
    if (!base) base = {};
    for (let i = 1, l = arguments.length, arg; i < l && (arg = arguments[i] || {}); i++)
      for (let name in arg)
        base[name] = arg[name];
    return base;
  }

  // Creates an array that contains all items of the given arrays
  function unionAll() {
    let union = [];
    for (let i = 0, l = arguments.length; i < l; i++)
      union = union.concat.apply(union, arguments[i]);
    return union;
  }

  // N3.js:lib/N3Parser.js<0.4.5>:58 with
  //   s/this\\./Parser./g
  // ### \`_setBase\` sets the base IRI to resolve relative IRIs.
  Parser._setBase = function (baseIRI) {
    if (!baseIRI)
      baseIRI = null;

    // baseIRI '#' check disabled to allow -x 'data:text/shex,...#'
    // else if (baseIRI.indexOf('#') >= 0)
    //   throw new Error('Invalid base IRI ' + baseIRI);

    // Set base IRI and its components
    if (Parser._base = baseIRI) {
      Parser._basePath   = baseIRI.replace(/[^\\/?]*(?:\\?.*)?$/, '');
      baseIRI = baseIRI.match(schemeAuthority);
      Parser._baseRoot   = baseIRI[0];
      Parser._baseScheme = baseIRI[1];
    }
  }

  // N3.js:lib/N3Parser.js<0.4.5>:576 with
  //   s/this\\./Parser./g
  //   s/token/iri/
  // ### \`_resolveIRI\` resolves a relative IRI token against the base path,
  // assuming that a base path has been set and that the IRI is indeed relative.
  function _resolveIRI (iri) {
    switch (iri[0]) {
    // An empty relative IRI indicates the base IRI
    case undefined: return Parser._base;
    // Resolve relative fragment IRIs against the base IRI
    case '#': return Parser._base + iri;
    // Resolve relative query string IRIs by replacing the query string
    case '?': return Parser._base.replace(/(?:\\?.*)?$/, iri);
    // Resolve root-relative IRIs at the root of the base IRI
    case '/':
      // Resolve scheme-relative IRIs to the scheme
      return (iri[1] === '/' ? Parser._baseScheme : Parser._baseRoot) + _removeDotSegments(iri);
    // Resolve all other IRIs at the base IRI's path
    default: {
      return _removeDotSegments(Parser._basePath + iri);
    }
    }
  }

  // ### \`_removeDotSegments\` resolves './' and '../' path segments in an IRI as per RFC3986.
  function _removeDotSegments (iri) {
    // Don't modify the IRI if it does not contain any dot segments
    if (!dotSegments.test(iri))
      return iri;

    // Start with an imaginary slash before the IRI in order to resolve trailing './' and '../'
    const length = iri.length;
    let result = '', i = -1, pathStart = -1, next = '/', segmentStart = 0;

    while (i < length) {
      switch (next) {
      // The path starts with the first slash after the authority
      case ':':
        if (pathStart < 0) {
          // Skip two slashes before the authority
          if (iri[++i] === '/' && iri[++i] === '/')
            // Skip to slash after the authority
            while ((pathStart = i + 1) < length && iri[pathStart] !== '/')
              i = pathStart;
        }
        break;
      // Don't modify a query string or fragment
      case '?':
      case '#':
        i = length;
        break;
      // Handle '/.' or '/..' path segments
      case '/':
        if (iri[i + 1] === '.') {
          next = iri[++i + 1];
          switch (next) {
          // Remove a '/.' segment
          case '/':
            result += iri.substring(segmentStart, i - 1);
            segmentStart = i + 1;
            break;
          // Remove a trailing '/.' segment
          case undefined:
          case '?':
          case '#':
            return result + iri.substring(segmentStart, i) + iri.substr(i + 1);
          // Remove a '/..' segment
          case '.':
            next = iri[++i + 1];
            if (next === undefined || next === '/' || next === '?' || next === '#') {
              result += iri.substring(segmentStart, i - 2);
              // Try to remove the parent path from result
              if ((segmentStart = result.lastIndexOf('/')) >= pathStart)
                result = result.substr(0, segmentStart);
              // Remove a trailing '/..' segment
              if (next !== '/')
                return result + '/' + iri.substr(i + 1);
              segmentStart = i + 1;
            }
          }
        }
      }
      next = iri[++i];
    }
    return result + iri.substring(segmentStart);
  }

  // Creates an expression with the given type and attributes
  function expression(expr, attr) {
    const expression = { expression: expr };
    if (attr)
      for (let a in attr)
        expression[a] = attr[a];
    return expression;
  }

  // Creates a path with the given type and items
  function path(type, items) {
    return { type: 'path', pathType: type, items: items };
  }

  // Creates a literal with the given value and type
  function createLiteral(value, type) {
    return { value: value, type: type };
  }

  // Creates a new blank node identifier
  function blank() {
    return '_:b' + blankId++;
  };
  let blankId = 0;
  Parser._resetBlanks = function () { blankId = 0; }
  Parser.reset = function () {
    Parser._prefixes = Parser._imports = Parser._sourceMap = Parser.shapes = Parser.productions = Parser.start = Parser.startActs = null; // Reset state.
    Parser._base = Parser._baseIRI = Parser._baseIRIPath = Parser._baseIRIRoot = null;
  }
  let _fileName; // for debugging
  Parser._setFileName = function (fn) { _fileName = fn; }

  // Regular expression and replacement strings to escape strings
  const stringEscapeReplacements = { '\\\\': '\\\\', "'": "'", '"': '"',
                                   't': '\\t', 'b': '\\b', 'n': '\\n', 'r': '\\r', 'f': '\\f' },
      semactEscapeReplacements = { '\\\\': '\\\\', '%': '%' },
      pnameEscapeReplacements = {
        '\\\\': '\\\\', "'": "'", '"': '"',
        'n': '\\n', 'r': '\\r', 't': '\\t', 'f': '\\f', 'b': '\\b',
        '_': '_', '~': '~', '.': '.', '-': '-', '!': '!', '$': '$', '&': '&',
        '(': '(', ')': ')', '*': '*', '+': '+', ',': ',', ';': ';', '=': '=',
        '/': '/', '?': '?', '#': '#', '@': '@', '%': '%',
      };


  // Translates string escape codes in the string into their textual equivalent
  function unescapeString(string, trimLength) {
    string = string.substring(trimLength, string.length - trimLength);
    return { value: ShExUtil.unescapeText(string, stringEscapeReplacements) };
  }

  function unescapeLangString(string, trimLength) {
    const at = string.lastIndexOf("@");
    const lang = string.substr(at);
    string = string.substr(0, at);
    const u = unescapeString(string, trimLength);
    return extend(u, { language: lowercase(lang.substr(1)) });
  }

  // Translates regular expression escape codes in the string into their textual equivalent
  function unescapeRegexp (regexp) {
    const end = regexp.lastIndexOf("/");
    let s = regexp.substr(1, end-1);
    const regexpEscapeReplacements = {
      '.': "\\\\.", '\\\\': "\\\\\\\\", '?': "\\\\?", '*': "\\\\*", '+': "\\\\+",
      '{': "\\\\{", '}': "\\\\}", '(': "\\\\(", ')': "\\\\)", '|': "\\\\|",
      '^': "\\\\^", '$': "\\\\$", '[': "\\\\[", ']': "\\\\]", '/': "\\\\/",
      't': '\\\\t', 'n': '\\\\n', 'r': '\\\\r', '-': "\\\\-", '/': '/'
    };
    s = ShExUtil.unescapeText(s, regexpEscapeReplacements)
    const ret = {
      pattern: s
    };
    if (regexp.length > end+1)
      ret.flags = regexp.substr(end+1);
    return ret;
  }

  // Convenience function to return object with p1 key, value p2
  function keyValObject(key, val) {
    const ret = {};
    ret[key] = val;
    return ret;
  }

  // Return object with p1 key, p2 string value
  function unescapeSemanticAction(key, string) {
    string = string.substring(1, string.length - 2);
    return {
      type: "SemAct",
      name: key,
      code: ShExUtil.unescapeText(string, semactEscapeReplacements)
    };
  }

  function error (e, yy) {
    const hash = {
      text: yy.lexer.match,
      // token: this.terminals_[symbol] || symbol,
      line: yy.lexer.yylineno,
      loc: yy.lexer.yylloc,
      // expected: expected
      pos: yy.lexer.showPosition()
    }
    e.hash = hash;
    if (Parser.recoverable) {
      Parser.recoverable(e)
    } else {
      throw e;
      Parser.reset();
    }
  }

  // Expand declared prefix or throw Error
  function expandPrefix (prefix, yy) {
    if (!(prefix in Parser._prefixes))
      error(new Error('Parse error; unknown prefix "' + prefix + ':"'), yy);
    return Parser._prefixes[prefix];
  }

  // Add a shape to the map
  function addShape (label, shape, yy) {
    if (shape === EmptyShape)
      shape = { type: "Shape" };
    if (Parser.productions && label in Parser.productions)
      error(new Error("Structural error: "+label+" is a triple expression"), yy);
    if (!Parser.shapes)
      Parser.shapes = new Map();
    if (label in Parser.shapes) {
      if (Parser.options.duplicateShape === "replace")
        Parser.shapes[label] = shape;
      else if (Parser.options.duplicateShape !== "ignore")
        error(new Error("Parse error: "+label+" already defined"), yy);
    } else {
      Parser.shapes[label] = Object.assign({id: label}, shape);
    }
  }

  // Add a production to the map
  function addProduction (label, production, yy) {
    if (Parser.shapes && label in Parser.shapes)
      error(new Error("Structural error: "+label+" is a shape expression"), yy);
    if (!Parser.productions)
      Parser.productions = new Map();
    if (label in Parser.productions) {
      if (Parser.options.duplicateShape === "replace")
        Parser.productions[label] = production;
      else if (Parser.options.duplicateShape !== "ignore")
        error(new Error("Parse error: "+label+" already defined"), yy);
    } else
      Parser.productions[label] = production;
  }

  function addSourceMap (obj, yy) {
    if (!Parser._sourceMap)
      Parser._sourceMap = new Map();
    let list = Parser._sourceMap.get(obj)
    if (!list)
      Parser._sourceMap.set(obj, list = []);
    list.push(yy.lexer.yylloc);
    return obj;
  }

  // shapeJunction judiciously takes a shapeAtom and an optional list of con/disjuncts.
  // No created Shape{And,Or,Not} will have a \`nested\` shapeExpr.
  // Don't nonest arguments to shapeJunction.
  // shapeAtom emits \`nested\` so nonest every argument that can be a shapeAtom, i.e.
  //   shapeAtom, inlineShapeAtom, shapeAtomNoRef
  //   {,inline}shape{And,Or,Not}
  //   this does NOT include shapeOrRef or nodeConstraint.
  function shapeJunction (type, shapeAtom, juncts) {
    if (juncts.length === 0) {
      return nonest(shapeAtom);
    } else if (shapeAtom.type === type && !shapeAtom.nested) {
      nonest(shapeAtom).shapeExprs = nonest(shapeAtom).shapeExprs.concat(juncts);
      return shapeAtom;
    } else {
      return { type: type, shapeExprs: [nonest(shapeAtom)].concat(juncts) };
    }
  }

  // strip out .nested attribute
  function nonest (shapeAtom) {
    delete shapeAtom.nested;
    return shapeAtom;
  }

  const EmptyObject = {  };
  const EmptyShape = { type: "Shape" }`,
  },
  codeSections: [
    {
      qualifier: 'init',
      include: `// Included by Jison: includes/unicode.helpers.js:

// helper APIs for testing the unicode*.jisonlex lexer specs

// WARNING: this stuff is purely here so the example(s) will pass the default run test. You mileage will be NIL on these!

let predictive_random_seed = 5;

function getSemiRandomNumber() {
	predictive_random_seed = (predictive_random_seed * 31 + 7) % 51;	
	return predictive_random_seed;
}

// these are used in a three-way test in unicode2 spec:
function is_constant(str) {
	return getSemiRandomNumber() % 3 === 1;
}
function is_function(str) {
	return getSemiRandomNumber() % 3 === 2;
}



const FERR_UNTERMINATED_INLINE_COMMENT = 0x0100;
const FKA_COMMA = 0x0101;
const FKA_FIXED_ROW_OR_COLUMN_MARKER = 0x0102;
const FKA_RANGE_MARKER = 0x0103;
const FKW_ADD = 0x0104;
const FKW_ALMOST_EQUAL = 0x0105;
const FKW_ARRAY_CONCATENATION_OPERATOR = 0x0106;
const FKW_BOOLEAN_AND_OPERATOR = 0x0107;
const FKW_BOOLEAN_NOT_OPERATOR = 0x0108;
const FKW_BOOLEAN_OR_OPERATOR = 0x0109;
const FKW_CUBE_OPERATOR = 0x010A;
const FKW_DATA_MARKER = 0x010B;
const FKW_DEGREES_OPERATOR = 0x010C;
const FKW_DIVIDE = 0x010D;
const FKW_DOT = 0x010E;
const FKW_EQUAL = 0x010F;
const FKW_GREATER_OR_EQUAL = 0x0110;
const FKW_GREATER_THAN = 0x0111;
const FKW_IS_IDENTICAL = 0x0112;
const FKW_LESS_OR_EQUAL = 0x0113;
const FKW_LESS_THAN = 0x0114;
const FKW_MODULO_OPERATOR = 0x0115;
const FKW_MULTIPLY = 0x0116;
const FKW_NOT_EQUAL = 0x0117;
const FKW_NOT_IDENTICAL = 0x0118;
const FKW_POWER = 0x0119;
const FKW_PROMILAGE_OPERATOR = 0x011A;
const FKW_SQRT_OPERATOR = 0x011B;
const FKW_SQUARE_OPERATOR = 0x011C;
const FKW_STRING_CONCATENATION_OPERATOR = 0x011D;
const FKW_SUBTRACT = 0x011E;
const FKW_VALUE = 0x011F;

const FT_BOOLEAN = 0x00100000;
const FT_NUMBER = 0x00200000;
const FT_STRING = 0x00400000;

const FU_ANY = 0x00010000;
const FU_DERIVED = 0x00020000;
const FU_STRING = 0x00040000;



class ASTnode {
	constructor(n) {
		this.id = n;
	}

	setLocationInfo(loc) {
		this._yylloc = loc;
		return this;
	}
	setCommentsIndex(n) {
		this._commentIndex = n;
		return this;
	}
    setLexedText(s) {
    	this._lexedText = s;
		return this;
    }
}

class lexerToken extends ASTnode {
	constructor(n) {
		super(n);
	}
}

class ASTcurrency extends ASTnode {
	constructor(v) {
		super('$');
		this._currency = v;
	}
}

class ASTerror extends ASTnode {
	constructor(e, msg) {
		super('E');
		this._errorCode = e;
		this._errorMessage = msg;
	}
}

class ASTopcode extends ASTnode {
	constructor(n) {
		super('C');
		this.opcode = n;
	}
}

class ASTvalue extends ASTnode {
	constructor(v, a) {
		super('V');
		this._value = v;
		this._attributes = a;
	}
}


const symbolHashTable = {};


const parser = {
	getNextCommentIndex() {
		return getSemiRandomNumber();
	}
	dedupQuotedString(s, q) {
		return s;
	}
	deepCopy(loc) {
		// fake a deep clone with a shallow one:
		return Object.assign({}, loc);
	}
	getSymbol4Currency(s) {
		return '$$$' + s;		
	}
	getSymbol4DefinedConstant(s) {
		if (!symbolHashTable[s]) {
			let n = getSemiRandomNumber();
			symbolHashTable[s] = 'S' + n;
		}
		return symbolHashTable[s];
	}
	pushComment() {
		/**/
	}
}


//----------------------------------------------------------------------
//
// ShEx
// 

const ShExUtil = {
	unescapeText(s, delim) {
	  return s;
	}
};

const Parser = {

}

// End Of Include by Jison: includes/unicode.helpers.js`,
    },
  ],
  importDecls: [],
  unknownDecls: [],
  options: {
    moduleType: 'commonjs',
    debug: false,
    enableDebugLogs: false,
    json: true,
    noMain: true,
    moduleMain: null,
    moduleMainImports: null,
    dumpSourceCodeOnFailure: false,
    throwErrorOnCompileFailure: true,
    doNotTestCompile: false,
    defaultModuleName: 'lexer',
    xregexp: false,
    lexerErrorsAreRecoverable: false,
    flex: false,
    backtrack_lexer: false,
    ranges: false,
    trackPosition: true,
    caseInsensitive: false,
    exportSourceCode: {
      enabled: false,
    },
    exportAST: false,
    prettyCfg: true,
  },
  conditions: {
    INITIAL: {
      rules: [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
      ],
      inclusive: true,
    },
  },
  performAction: `function lexer__performAction(yy, yyrulenumber, YY_START) {
            const yy_ = this;

            /*
    ShEx parser in the Jison parser generator format.
  */

  const UNBOUNDED = -1;

  //const ShExUtil = require("@shexjs/util");
  // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  // WARNING: brutal hack to make example compile and run in minimal jison-gho lexer CLI environment.

  // Common namespaces and entities
  const RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
      RDF_TYPE  = RDF + 'type',
      RDF_FIRST = RDF + 'first',
      RDF_REST  = RDF + 'rest',
      RDF_NIL   = RDF + 'nil',
      XSD = 'http://www.w3.org/2001/XMLSchema#',
      XSD_INTEGER  = XSD + 'integer',
      XSD_DECIMAL  = XSD + 'decimal',
      XSD_FLOAT   = XSD + 'float',
      XSD_DOUBLE   = XSD + 'double',
      XSD_BOOLEAN  = XSD + 'boolean',
      XSD_TRUE =  '"true"^^'  + XSD_BOOLEAN,
      XSD_FALSE = '"false"^^' + XSD_BOOLEAN,
      XSD_PATTERN        = XSD + 'pattern',
      XSD_MININCLUSIVE   = XSD + 'minInclusive',
      XSD_MINEXCLUSIVE   = XSD + 'minExclusive',
      XSD_MAXINCLUSIVE   = XSD + 'maxInclusive',
      XSD_MAXEXCLUSIVE   = XSD + 'maxExclusive',
      XSD_LENGTH         = XSD + 'length',
      XSD_MINLENGTH      = XSD + 'minLength',
      XSD_MAXLENGTH      = XSD + 'maxLength',
      XSD_TOTALDIGITS    = XSD + 'totalDigits',
      XSD_FRACTIONDIGITS = XSD + 'fractionDigits';

  const numericDatatypes = [
      XSD + "integer",
      XSD + "decimal",
      XSD + "float",
      XSD + "double",
      XSD + "string",
      XSD + "boolean",
      XSD + "dateTime",
      XSD + "nonPositiveInteger",
      XSD + "negativeInteger",
      XSD + "long",
      XSD + "int",
      XSD + "short",
      XSD + "byte",
      XSD + "nonNegativeInteger",
      XSD + "unsignedLong",
      XSD + "unsignedInt",
      XSD + "unsignedShort",
      XSD + "unsignedByte",
      XSD + "positiveInteger"
  ];

  const absoluteIRI = /^[a-z][a-z0-9+.-]*:/i,
    schemeAuthority = /^(?:([a-z][a-z0-9+.-]*:))?(?:\\/\\/[^\\/]*)?/i,
    dotSegments = /(?:^|\\/)\\.\\.?(?:$|[\\/#?])/;

  const numericFacets = ["mininclusive", "minexclusive",
                       "maxinclusive", "maxexclusive"];

  // Returns a lowercase version of the given string
  function lowercase(string) {
    return string.toLowerCase();
  }

  // Appends the item to the array and returns the array
  function appendTo(array, item) {
    return array.push(item), array;
  }

  // Appends the items to the array and returns the array
  function appendAllTo(array, items) {
    return array.push.apply(array, items), array;
  }

  // Extends a base object with properties of other objects
  function extend(base) {
    if (!base) base = {};
    for (let i = 1, l = arguments.length, arg; i < l && (arg = arguments[i] || {}); i++)
      for (let name in arg)
        base[name] = arg[name];
    return base;
  }

  // Creates an array that contains all items of the given arrays
  function unionAll() {
    let union = [];
    for (let i = 0, l = arguments.length; i < l; i++)
      union = union.concat.apply(union, arguments[i]);
    return union;
  }

  // N3.js:lib/N3Parser.js<0.4.5>:58 with
  //   s/this\\./Parser./g
  // ### \`_setBase\` sets the base IRI to resolve relative IRIs.
  Parser._setBase = function (baseIRI) {
    if (!baseIRI)
      baseIRI = null;

    // baseIRI '#' check disabled to allow -x 'data:text/shex,...#'
    // else if (baseIRI.indexOf('#') >= 0)
    //   throw new Error('Invalid base IRI ' + baseIRI);

    // Set base IRI and its components
    if (Parser._base = baseIRI) {
      Parser._basePath   = baseIRI.replace(/[^\\/?]*(?:\\?.*)?$/, '');
      baseIRI = baseIRI.match(schemeAuthority);
      Parser._baseRoot   = baseIRI[0];
      Parser._baseScheme = baseIRI[1];
    }
  }

  // N3.js:lib/N3Parser.js<0.4.5>:576 with
  //   s/this\\./Parser./g
  //   s/token/iri/
  // ### \`_resolveIRI\` resolves a relative IRI token against the base path,
  // assuming that a base path has been set and that the IRI is indeed relative.
  function _resolveIRI (iri) {
    switch (iri[0]) {
    // An empty relative IRI indicates the base IRI
    case undefined: return Parser._base;
    // Resolve relative fragment IRIs against the base IRI
    case '#': return Parser._base + iri;
    // Resolve relative query string IRIs by replacing the query string
    case '?': return Parser._base.replace(/(?:\\?.*)?$/, iri);
    // Resolve root-relative IRIs at the root of the base IRI
    case '/':
      // Resolve scheme-relative IRIs to the scheme
      return (iri[1] === '/' ? Parser._baseScheme : Parser._baseRoot) + _removeDotSegments(iri);
    // Resolve all other IRIs at the base IRI's path
    default: {
      return _removeDotSegments(Parser._basePath + iri);
    }
    }
  }

  // ### \`_removeDotSegments\` resolves './' and '../' path segments in an IRI as per RFC3986.
  function _removeDotSegments (iri) {
    // Don't modify the IRI if it does not contain any dot segments
    if (!dotSegments.test(iri))
      return iri;

    // Start with an imaginary slash before the IRI in order to resolve trailing './' and '../'
    const length = iri.length;
    let result = '', i = -1, pathStart = -1, next = '/', segmentStart = 0;

    while (i < length) {
      switch (next) {
      // The path starts with the first slash after the authority
      case ':':
        if (pathStart < 0) {
          // Skip two slashes before the authority
          if (iri[++i] === '/' && iri[++i] === '/')
            // Skip to slash after the authority
            while ((pathStart = i + 1) < length && iri[pathStart] !== '/')
              i = pathStart;
        }
        break;
      // Don't modify a query string or fragment
      case '?':
      case '#':
        i = length;
        break;
      // Handle '/.' or '/..' path segments
      case '/':
        if (iri[i + 1] === '.') {
          next = iri[++i + 1];
          switch (next) {
          // Remove a '/.' segment
          case '/':
            result += iri.substring(segmentStart, i - 1);
            segmentStart = i + 1;
            break;
          // Remove a trailing '/.' segment
          case undefined:
          case '?':
          case '#':
            return result + iri.substring(segmentStart, i) + iri.substr(i + 1);
          // Remove a '/..' segment
          case '.':
            next = iri[++i + 1];
            if (next === undefined || next === '/' || next === '?' || next === '#') {
              result += iri.substring(segmentStart, i - 2);
              // Try to remove the parent path from result
              if ((segmentStart = result.lastIndexOf('/')) >= pathStart)
                result = result.substr(0, segmentStart);
              // Remove a trailing '/..' segment
              if (next !== '/')
                return result + '/' + iri.substr(i + 1);
              segmentStart = i + 1;
            }
          }
        }
      }
      next = iri[++i];
    }
    return result + iri.substring(segmentStart);
  }

  // Creates an expression with the given type and attributes
  function expression(expr, attr) {
    const expression = { expression: expr };
    if (attr)
      for (let a in attr)
        expression[a] = attr[a];
    return expression;
  }

  // Creates a path with the given type and items
  function path(type, items) {
    return { type: 'path', pathType: type, items: items };
  }

  // Creates a literal with the given value and type
  function createLiteral(value, type) {
    return { value: value, type: type };
  }

  // Creates a new blank node identifier
  function blank() {
    return '_:b' + blankId++;
  };
  let blankId = 0;
  Parser._resetBlanks = function () { blankId = 0; }
  Parser.reset = function () {
    Parser._prefixes = Parser._imports = Parser._sourceMap = Parser.shapes = Parser.productions = Parser.start = Parser.startActs = null; // Reset state.
    Parser._base = Parser._baseIRI = Parser._baseIRIPath = Parser._baseIRIRoot = null;
  }
  let _fileName; // for debugging
  Parser._setFileName = function (fn) { _fileName = fn; }

  // Regular expression and replacement strings to escape strings
  const stringEscapeReplacements = { '\\\\': '\\\\', "'": "'", '"': '"',
                                   't': '\\t', 'b': '\\b', 'n': '\\n', 'r': '\\r', 'f': '\\f' },
      semactEscapeReplacements = { '\\\\': '\\\\', '%': '%' },
      pnameEscapeReplacements = {
        '\\\\': '\\\\', "'": "'", '"': '"',
        'n': '\\n', 'r': '\\r', 't': '\\t', 'f': '\\f', 'b': '\\b',
        '_': '_', '~': '~', '.': '.', '-': '-', '!': '!', '$': '$', '&': '&',
        '(': '(', ')': ')', '*': '*', '+': '+', ',': ',', ';': ';', '=': '=',
        '/': '/', '?': '?', '#': '#', '@': '@', '%': '%',
      };


  // Translates string escape codes in the string into their textual equivalent
  function unescapeString(string, trimLength) {
    string = string.substring(trimLength, string.length - trimLength);
    return { value: ShExUtil.unescapeText(string, stringEscapeReplacements) };
  }

  function unescapeLangString(string, trimLength) {
    const at = string.lastIndexOf("@");
    const lang = string.substr(at);
    string = string.substr(0, at);
    const u = unescapeString(string, trimLength);
    return extend(u, { language: lowercase(lang.substr(1)) });
  }

  // Translates regular expression escape codes in the string into their textual equivalent
  function unescapeRegexp (regexp) {
    const end = regexp.lastIndexOf("/");
    let s = regexp.substr(1, end-1);
    const regexpEscapeReplacements = {
      '.': "\\\\.", '\\\\': "\\\\\\\\", '?': "\\\\?", '*': "\\\\*", '+': "\\\\+",
      '{': "\\\\{", '}': "\\\\}", '(': "\\\\(", ')': "\\\\)", '|': "\\\\|",
      '^': "\\\\^", '$': "\\\\$", '[': "\\\\[", ']': "\\\\]", '/': "\\\\/",
      't': '\\\\t', 'n': '\\\\n', 'r': '\\\\r', '-': "\\\\-", '/': '/'
    };
    s = ShExUtil.unescapeText(s, regexpEscapeReplacements)
    const ret = {
      pattern: s
    };
    if (regexp.length > end+1)
      ret.flags = regexp.substr(end+1);
    return ret;
  }

  // Convenience function to return object with p1 key, value p2
  function keyValObject(key, val) {
    const ret = {};
    ret[key] = val;
    return ret;
  }

  // Return object with p1 key, p2 string value
  function unescapeSemanticAction(key, string) {
    string = string.substring(1, string.length - 2);
    return {
      type: "SemAct",
      name: key,
      code: ShExUtil.unescapeText(string, semactEscapeReplacements)
    };
  }

  function error (e, yy) {
    const hash = {
      text: yy.lexer.match,
      // token: this.terminals_[symbol] || symbol,
      line: yy.lexer.yy_.yylineno,
      loc: yy.lexer.yy_.yylloc,
      // expected: expected
      pos: yy.lexer.showPosition()
    }
    e.hash = hash;
    if (Parser.recoverable) {
      Parser.recoverable(e)
    } else {
      throw e;
      Parser.reset();
    }
  }

  // Expand declared prefix or throw Error
  function expandPrefix (prefix, yy) {
    if (!(prefix in Parser._prefixes))
      error(new Error('Parse error; unknown prefix "' + prefix + ':"'), yy);
    return Parser._prefixes[prefix];
  }

  // Add a shape to the map
  function addShape (label, shape, yy) {
    if (shape === EmptyShape)
      shape = { type: "Shape" };
    if (Parser.productions && label in Parser.productions)
      error(new Error("Structural error: "+label+" is a triple expression"), yy);
    if (!Parser.shapes)
      Parser.shapes = new Map();
    if (label in Parser.shapes) {
      if (Parser.options.duplicateShape === "replace")
        Parser.shapes[label] = shape;
      else if (Parser.options.duplicateShape !== "ignore")
        error(new Error("Parse error: "+label+" already defined"), yy);
    } else {
      Parser.shapes[label] = Object.assign({id: label}, shape);
    }
  }

  // Add a production to the map
  function addProduction (label, production, yy) {
    if (Parser.shapes && label in Parser.shapes)
      error(new Error("Structural error: "+label+" is a shape expression"), yy);
    if (!Parser.productions)
      Parser.productions = new Map();
    if (label in Parser.productions) {
      if (Parser.options.duplicateShape === "replace")
        Parser.productions[label] = production;
      else if (Parser.options.duplicateShape !== "ignore")
        error(new Error("Parse error: "+label+" already defined"), yy);
    } else
      Parser.productions[label] = production;
  }

  function addSourceMap (obj, yy) {
    if (!Parser._sourceMap)
      Parser._sourceMap = new Map();
    let list = Parser._sourceMap.get(obj)
    if (!list)
      Parser._sourceMap.set(obj, list = []);
    list.push(yy.lexer.yy_.yylloc);
    return obj;
  }

  // shapeJunction judiciously takes a shapeAtom and an optional list of con/disjuncts.
  // No created Shape{And,Or,Not} will have a \`nested\` shapeExpr.
  // Don't nonest arguments to shapeJunction.
  // shapeAtom emits \`nested\` so nonest every argument that can be a shapeAtom, i.e.
  //   shapeAtom, inlineShapeAtom, shapeAtomNoRef
  //   {,inline}shape{And,Or,Not}
  //   this does NOT include shapeOrRef or nodeConstraint.
  function shapeJunction (type, shapeAtom, juncts) {
    if (juncts.length === 0) {
      return nonest(shapeAtom);
    } else if (shapeAtom.type === type && !shapeAtom.nested) {
      nonest(shapeAtom).shapeExprs = nonest(shapeAtom).shapeExprs.concat(juncts);
      return shapeAtom;
    } else {
      return { type: type, shapeExprs: [nonest(shapeAtom)].concat(juncts) };
    }
  }

  // strip out .nested attribute
  function nonest (shapeAtom) {
    delete shapeAtom.nested;
    return shapeAtom;
  }

  const EmptyObject = {  };
  const EmptyShape = { type: "Shape" }
const YYSTATE = YY_START;
switch(yyrulenumber) {
case 0 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       \\s+|{COMMENT} */ 
 /**/ 
break;
case 3 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       {LANGTAG} */ 
 yy_.yytext = yy_.yytext.substr(1); return 'LANGTAG' 
break;
case 75 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       [a-zA-Z0-9_-]+ */ 
 return 'unexpected word "'+yy_.yytext+'"' 
break;
case 76 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       . */ 
 return 'invalid character '+yy_.yytext 
break;
default:
  return this.simpleCaseActionClusters[yyrulenumber];
}
        }`,
  caseHelperInclude: `{

  /*! Conditions:: INITIAL */ 
  /*! Rule::       {ATPNAME_LN} */ 
   1 : 'ATPNAME_LN',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       {ATPNAME_NS} */ 
   2 : 'ATPNAME_NS',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       @ */ 
   4 : '@',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       {PNAME_LN} */ 
   5 : 'PNAME_LN',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       {REPEAT_RANGE} */ 
   6 : 'REPEAT_RANGE',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       {DOUBLE} */ 
   7 : 'DOUBLE',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       {DECIMAL} */ 
   8 : 'DECIMAL',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       {INTEGER} */ 
   9 : 'INTEGER',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       {ANON} */ 
   10 : 'ANON',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       {IRIREF} */ 
   11 : 'IRIREF',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       {PNAME_NS} */ 
   12 : 'PNAME_NS',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       a */ 
   13 : 'a',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       {REGEXP} */ 
   14 : 'REGEXP',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       {BLANK_NODE_LABEL} */ 
   15 : 'BLANK_NODE_LABEL',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       {CODE} */ 
   16 : 'CODE',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       {LANG_STRING_LITERAL_LONG1} */ 
   17 : 'LANG_STRING_LITERAL_LONG1',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       {LANG_STRING_LITERAL_LONG2} */ 
   18 : 'LANG_STRING_LITERAL_LONG2',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       {LANG_STRING_LITERAL1} */ 
   19 : 'LANG_STRING_LITERAL1',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       {LANG_STRING_LITERAL2} */ 
   20 : 'LANG_STRING_LITERAL2',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       {STRING_LITERAL_LONG1} */ 
   21 : 'STRING_LITERAL_LONG1',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       {STRING_LITERAL_LONG2} */ 
   22 : 'STRING_LITERAL_LONG2',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       {STRING_LITERAL1} */ 
   23 : 'STRING_LITERAL1',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       {STRING_LITERAL2} */ 
   24 : 'STRING_LITERAL2',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       {IT_BASE} */ 
   25 : 'IT_BASE',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       {IT_PREFIX} */ 
   26 : 'IT_PREFIX',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       {IT_IMPORT} */ 
   27 : 'IT_IMPORT',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       {IT_START} */ 
   28 : 'IT_start',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       {IT_EXTERNAL} */ 
   29 : 'IT_EXTERNAL',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       {IT_CLOSED} */ 
   30 : 'IT_CLOSED',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       {IT_EXTRA} */ 
   31 : 'IT_EXTRA',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       {IT_LITERAL} */ 
   32 : 'IT_LITERAL',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       {IT_BNODE} */ 
   33 : 'IT_BNODE',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       {IT_IRI} */ 
   34 : 'IT_IRI',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       {IT_NONLITERAL} */ 
   35 : 'IT_NONLITERAL',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       {IT_AND} */ 
   36 : 'IT_AND',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       {IT_OR} */ 
   37 : 'IT_OR',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       {IT_NOT} */ 
   38 : 'IT_NOT',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       {IT_MININCLUSIVE} */ 
   39 : 'IT_MININCLUSIVE',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       {IT_MINEXCLUSIVE} */ 
   40 : 'IT_MINEXCLUSIVE',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       {IT_MAXINCLUSIVE} */ 
   41 : 'IT_MAXINCLUSIVE',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       {IT_MAXEXCLUSIVE} */ 
   42 : 'IT_MAXEXCLUSIVE',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       {IT_LENGTH} */ 
   43 : 'IT_LENGTH',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       {IT_MINLENGTH} */ 
   44 : 'IT_MINLENGTH',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       {IT_MAXLENGTH} */ 
   45 : 'IT_MAXLENGTH',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       {IT_TOTALDIGITS} */ 
   46 : 'IT_TOTALDIGITS',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       {IT_FRACTIONDIGITS} */ 
   47 : 'IT_FRACTIONDIGITS',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       = */ 
   48 : '=',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \\/\\/ */ 
   49 : '//',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \\{ */ 
   50 : '{',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \\} */ 
   51 : '}',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       & */ 
   52 : '&',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \\|\\| */ 
   53 : '||',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \\| */ 
   54 : '|',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       , */ 
   55 : ',',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \\( */ 
   56 : '(',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \\) */ 
   57 : ')',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \\[ */ 
   58 : '[',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \\] */ 
   59 : ']',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \\$ */ 
   60 : '$',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       ! */ 
   61 : '!',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \\^\\^ */ 
   62 : '^^',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \\^ */ 
   63 : '^',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \\. */ 
   64 : '.',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       ~ */ 
   65 : '~',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       ; */ 
   66 : ';',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \\* */ 
   67 : '*',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \\+ */ 
   68 : '+',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \\? */ 
   69 : '?',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       - */ 
   70 : '-',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       % */ 
   71 : '%',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       true */ 
   72 : 'IT_true',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       false */ 
   73 : 'IT_false',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       $ */ 
   74 : 'EOF'
}`,
  rules: [
    {
      re: '/^(?:\\s+|(#[^\\u000a\\u000d]*|\\/\\*([^*]|\\*([^/]|\\\\\\/))*\\*\\/))/',
      source: '^(?:\\s+|(#[^\\u000a\\u000d]*|\\/\\*([^*]|\\*([^/]|\\\\\\/))*\\*\\/))',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\s+|(#[^\\u000a\\u000d]*|\\/\\*([^*]|\\*([^/]|\\\\\\/))*\\*\\/))',
        flags: '',
        isNative: true,
      },
    },
    {
      re: "/^(?:(@(?:(?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])(((?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040])|\\.)*(?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040]))?)?:)(?:((?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|:|[0-9]|(?:(?:%(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))|(?:\\\\(_|~|\\.|-|!|\\$|&|'|\\(|\\)|\\*|\\+|,|;|=|\\/|\\?|#|@|%))))((?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040])|\\.|:|(?:(?:%(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))|(?:\\\\(_|~|\\.|-|!|\\$|&|'|\\(|\\)|\\*|\\+|,|;|=|\\/|\\?|#|@|%))))*))))/",
      source: "^(?:(@(?:(?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])(((?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040])|\\.)*(?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040]))?)?:)(?:((?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|:|[0-9]|(?:(?:%(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))|(?:\\\\(_|~|\\.|-|!|\\$|&|'|\\(|\\)|\\*|\\+|,|;|=|\\/|\\?|#|@|%))))((?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040])|\\.|:|(?:(?:%(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))|(?:\\\\(_|~|\\.|-|!|\\$|&|'|\\(|\\)|\\*|\\+|,|;|=|\\/|\\?|#|@|%))))*))))",
      flags: '',
      xregexp: {
        captureNames: null,
        source: "^(?:(@(?:(?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])(((?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040])|\\.)*(?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040]))?)?:)(?:((?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|:|[0-9]|(?:(?:%(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))|(?:\\\\(_|~|\\.|-|!|\\$|&|'|\\(|\\)|\\*|\\+|,|;|=|\\/|\\?|#|@|%))))((?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040])|\\.|:|(?:(?:%(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))|(?:\\\\(_|~|\\.|-|!|\\$|&|'|\\(|\\)|\\*|\\+|,|;|=|\\/|\\?|#|@|%))))*))))",
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:(@(?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])(((?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040])|\\.)*(?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040]))?)?:)))/',
      source: '^(?:(@(?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])(((?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040])|\\.)*(?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040]))?)?:)))',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:(@(?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])(((?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040])|\\.)*(?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040]))?)?:)))',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:(@([A-Za-z])+((-([0-9A-Za-z])+))*))/',
      source: '^(?:(@([A-Za-z])+((-([0-9A-Za-z])+))*))',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:(@([A-Za-z])+((-([0-9A-Za-z])+))*))',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:@)/',
      source: '^(?:@)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:@)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: "/^(?:((?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])(((?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040])|\\.)*(?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040]))?)?:)(?:((?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|:|[0-9]|(?:(?:%(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))|(?:\\\\(_|~|\\.|-|!|\\$|&|'|\\(|\\)|\\*|\\+|,|;|=|\\/|\\?|#|@|%))))((?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040])|\\.|:|(?:(?:%(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))|(?:\\\\(_|~|\\.|-|!|\\$|&|'|\\(|\\)|\\*|\\+|,|;|=|\\/|\\?|#|@|%))))*)))/",
      source: "^(?:((?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])(((?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040])|\\.)*(?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040]))?)?:)(?:((?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|:|[0-9]|(?:(?:%(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))|(?:\\\\(_|~|\\.|-|!|\\$|&|'|\\(|\\)|\\*|\\+|,|;|=|\\/|\\?|#|@|%))))((?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040])|\\.|:|(?:(?:%(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))|(?:\\\\(_|~|\\.|-|!|\\$|&|'|\\(|\\)|\\*|\\+|,|;|=|\\/|\\?|#|@|%))))*)))",
      flags: '',
      xregexp: {
        captureNames: null,
        source: "^(?:((?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])(((?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040])|\\.)*(?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040]))?)?:)(?:((?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|:|[0-9]|(?:(?:%(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))|(?:\\\\(_|~|\\.|-|!|\\$|&|'|\\(|\\)|\\*|\\+|,|;|=|\\/|\\?|#|@|%))))((?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040])|\\.|:|(?:(?:%(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))|(?:\\\\(_|~|\\.|-|!|\\$|&|'|\\(|\\)|\\*|\\+|,|;|=|\\/|\\?|#|@|%))))*)))",
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:(\\{((?:([+-])?([0-9])+))((,(((?:([+-])?([0-9])+))|\\*)?))?\\}))/',
      source: '^(?:(\\{((?:([+-])?([0-9])+))((,(((?:([+-])?([0-9])+))|\\*)?))?\\}))',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:(\\{((?:([+-])?([0-9])+))((,(((?:([+-])?([0-9])+))|\\*)?))?\\}))',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:(([+-])?((([0-9])+\\.([0-9])*((?:[Ee]([+-])?([0-9])+)))|((\\.)?([0-9])+((?:[Ee]([+-])?([0-9])+))))))/',
      source: '^(?:(([+-])?((([0-9])+\\.([0-9])*((?:[Ee]([+-])?([0-9])+)))|((\\.)?([0-9])+((?:[Ee]([+-])?([0-9])+))))))',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:(([+-])?((([0-9])+\\.([0-9])*((?:[Ee]([+-])?([0-9])+)))|((\\.)?([0-9])+((?:[Ee]([+-])?([0-9])+))))))',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:(([+-])?([0-9])*\\.([0-9])+))/',
      source: '^(?:(([+-])?([0-9])*\\.([0-9])+))',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:(([+-])?([0-9])*\\.([0-9])+))',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:(([+-])?([0-9])+))/',
      source: '^(?:(([+-])?([0-9])+))',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:(([+-])?([0-9])+))',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:{ANON})/',
      source: '^(?:{ANON})',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:{ANON})',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:(<([^\\u0000-\\u0020<>\\"{}|^`\\\\]|(?:\\\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])))*>))/',
      source: '^(?:(<([^\\u0000-\\u0020<>\\"{}|^`\\\\]|(?:\\\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])))*>))',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:(<([^\\u0000-\\u0020<>\\"{}|^`\\\\]|(?:\\\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])))*>))',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:((?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])(((?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040])|\\.)*(?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040]))?)?:))/',
      source: '^(?:((?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])(((?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040])|\\.)*(?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040]))?)?:))',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:((?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])(((?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040])|\\.)*(?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040]))?)?:))',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:a)/',
      source: '^(?:a)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:a)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:(\\/([^\\u002f\\u005C\\u000A\\u000D]|\\\\[nrt\\\\|.?*+(){}$\\u002D\\u005B\\u005D\\u005E/]|(?:\\\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])))+\\/[smix]*))/',
      source: '^(?:(\\/([^\\u002f\\u005C\\u000A\\u000D]|\\\\[nrt\\\\|.?*+(){}$\\u002D\\u005B\\u005D\\u005E/]|(?:\\\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])))+\\/[smix]*))',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:(\\/([^\\u002f\\u005C\\u000A\\u000D]|\\\\[nrt\\\\|.?*+(){}$\\u002D\\u005B\\u005D\\u005E/]|(?:\\\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])))+\\/[smix]*))',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:(_:((?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|[0-9])(((?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040])|\\.)*(?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040]))?))/',
      source: '^(?:(_:((?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|[0-9])(((?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040])|\\.)*(?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040]))?))',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:(_:((?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|[0-9])(((?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040])|\\.)*(?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040]))?))',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:(\\{([^%\\\\]|\\\\[%\\\\]|(?:\\\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])))*%\\}))/',
      source: '^(?:(\\{([^%\\\\]|\\\\[%\\\\]|(?:\\\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])))*%\\}))',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:(\\{([^%\\\\]|\\\\[%\\\\]|(?:\\\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])))*%\\}))',
        flags: '',
        isNative: true,
      },
    },
    {
      re: `/^(?:('''(('|'')?([^\\'\\\\]|(?:\\\\[\\"\\'\\\\bfnrt])|(?:\\\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))))*'''(?:@([A-Za-z])+((-([0-9A-Za-z])+))*)))/`,
      source: `^(?:('''(('|'')?([^\\'\\\\]|(?:\\\\[\\"\\'\\\\bfnrt])|(?:\\\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))))*'''(?:@([A-Za-z])+((-([0-9A-Za-z])+))*)))`,
      flags: '',
      xregexp: {
        captureNames: null,
        source: `^(?:('''(('|'')?([^\\'\\\\]|(?:\\\\[\\"\\'\\\\bfnrt])|(?:\\\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))))*'''(?:@([A-Za-z])+((-([0-9A-Za-z])+))*)))`,
        flags: '',
        isNative: true,
      },
    },
    {
      re: `/^(?:("""(("|"")?([^\\"\\\\]|(?:\\\\[\\"\\'\\\\bfnrt])|(?:\\\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))))*"""(?:@([A-Za-z])+((-([0-9A-Za-z])+))*)))/`,
      source: `^(?:("""(("|"")?([^\\"\\\\]|(?:\\\\[\\"\\'\\\\bfnrt])|(?:\\\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))))*"""(?:@([A-Za-z])+((-([0-9A-Za-z])+))*)))`,
      flags: '',
      xregexp: {
        captureNames: null,
        source: `^(?:("""(("|"")?([^\\"\\\\]|(?:\\\\[\\"\\'\\\\bfnrt])|(?:\\\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))))*"""(?:@([A-Za-z])+((-([0-9A-Za-z])+))*)))`,
        flags: '',
        isNative: true,
      },
    },
    {
      re: `/^(?:('([^\\u0027\\u005c\\u000a\\u000d]|(?:\\\\[\\"\\'\\\\bfnrt])|(?:\\\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])))*'(?:@([A-Za-z])+((-([0-9A-Za-z])+))*)))/`,
      source: `^(?:('([^\\u0027\\u005c\\u000a\\u000d]|(?:\\\\[\\"\\'\\\\bfnrt])|(?:\\\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])))*'(?:@([A-Za-z])+((-([0-9A-Za-z])+))*)))`,
      flags: '',
      xregexp: {
        captureNames: null,
        source: `^(?:('([^\\u0027\\u005c\\u000a\\u000d]|(?:\\\\[\\"\\'\\\\bfnrt])|(?:\\\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])))*'(?:@([A-Za-z])+((-([0-9A-Za-z])+))*)))`,
        flags: '',
        isNative: true,
      },
    },
    {
      re: `/^(?:("([^\\u0022\\u005c\\u000a\\u000d]|(?:\\\\[\\"\\'\\\\bfnrt])|(?:\\\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])))*"(?:@([A-Za-z])+((-([0-9A-Za-z])+))*)))/`,
      source: `^(?:("([^\\u0022\\u005c\\u000a\\u000d]|(?:\\\\[\\"\\'\\\\bfnrt])|(?:\\\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])))*"(?:@([A-Za-z])+((-([0-9A-Za-z])+))*)))`,
      flags: '',
      xregexp: {
        captureNames: null,
        source: `^(?:("([^\\u0022\\u005c\\u000a\\u000d]|(?:\\\\[\\"\\'\\\\bfnrt])|(?:\\\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])))*"(?:@([A-Za-z])+((-([0-9A-Za-z])+))*)))`,
        flags: '',
        isNative: true,
      },
    },
    {
      re: `/^(?:('''(('|'')?([^\\'\\\\]|(?:\\\\[\\"\\'\\\\bfnrt])|(?:\\\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))))*'''))/`,
      source: `^(?:('''(('|'')?([^\\'\\\\]|(?:\\\\[\\"\\'\\\\bfnrt])|(?:\\\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))))*'''))`,
      flags: '',
      xregexp: {
        captureNames: null,
        source: `^(?:('''(('|'')?([^\\'\\\\]|(?:\\\\[\\"\\'\\\\bfnrt])|(?:\\\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))))*'''))`,
        flags: '',
        isNative: true,
      },
    },
    {
      re: `/^(?:("""(("|"")?([^\\"\\\\]|(?:\\\\[\\"\\'\\\\bfnrt])|(?:\\\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))))*"""))/`,
      source: `^(?:("""(("|"")?([^\\"\\\\]|(?:\\\\[\\"\\'\\\\bfnrt])|(?:\\\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))))*"""))`,
      flags: '',
      xregexp: {
        captureNames: null,
        source: `^(?:("""(("|"")?([^\\"\\\\]|(?:\\\\[\\"\\'\\\\bfnrt])|(?:\\\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))))*"""))`,
        flags: '',
        isNative: true,
      },
    },
    {
      re: `/^(?:('([^\\u0027\\u005c\\u000a\\u000d]|(?:\\\\[\\"\\'\\\\bfnrt])|(?:\\\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])))*'))/`,
      source: `^(?:('([^\\u0027\\u005c\\u000a\\u000d]|(?:\\\\[\\"\\'\\\\bfnrt])|(?:\\\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])))*'))`,
      flags: '',
      xregexp: {
        captureNames: null,
        source: `^(?:('([^\\u0027\\u005c\\u000a\\u000d]|(?:\\\\[\\"\\'\\\\bfnrt])|(?:\\\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])))*'))`,
        flags: '',
        isNative: true,
      },
    },
    {
      re: `/^(?:("([^\\u0022\\u005c\\u000a\\u000d]|(?:\\\\[\\"\\'\\\\bfnrt])|(?:\\\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])))*"))/`,
      source: `^(?:("([^\\u0022\\u005c\\u000a\\u000d]|(?:\\\\[\\"\\'\\\\bfnrt])|(?:\\\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])))*"))`,
      flags: '',
      xregexp: {
        captureNames: null,
        source: `^(?:("([^\\u0022\\u005c\\u000a\\u000d]|(?:\\\\[\\"\\'\\\\bfnrt])|(?:\\\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])))*"))`,
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:([Bb][Aa][Ss][Ee]))/',
      source: '^(?:([Bb][Aa][Ss][Ee]))',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:([Bb][Aa][Ss][Ee]))',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:([Pp][Rr][Ee][Ff][Ii][Xx]))/',
      source: '^(?:([Pp][Rr][Ee][Ff][Ii][Xx]))',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:([Pp][Rr][Ee][Ff][Ii][Xx]))',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:([iI][mM][pP][oO][rR][tT]))/',
      source: '^(?:([iI][mM][pP][oO][rR][tT]))',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:([iI][mM][pP][oO][rR][tT]))',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:([sS][tT][aA][rR][tT]))/',
      source: '^(?:([sS][tT][aA][rR][tT]))',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:([sS][tT][aA][rR][tT]))',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:([eE][xX][tT][eE][rR][nN][aA][lL]))/',
      source: '^(?:([eE][xX][tT][eE][rR][nN][aA][lL]))',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:([eE][xX][tT][eE][rR][nN][aA][lL]))',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:([Cc][Ll][Oo][Ss][Ee][Dd]))/',
      source: '^(?:([Cc][Ll][Oo][Ss][Ee][Dd]))',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:([Cc][Ll][Oo][Ss][Ee][Dd]))',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:([Ee][Xx][Tt][Rr][Aa]))/',
      source: '^(?:([Ee][Xx][Tt][Rr][Aa]))',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:([Ee][Xx][Tt][Rr][Aa]))',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:([Ll][Ii][Tt][Ee][Rr][Aa][Ll]))/',
      source: '^(?:([Ll][Ii][Tt][Ee][Rr][Aa][Ll]))',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:([Ll][Ii][Tt][Ee][Rr][Aa][Ll]))',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:([Bb][Nn][Oo][Dd][Ee]))/',
      source: '^(?:([Bb][Nn][Oo][Dd][Ee]))',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:([Bb][Nn][Oo][Dd][Ee]))',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:([Ii][Rr][Ii]))/',
      source: '^(?:([Ii][Rr][Ii]))',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:([Ii][Rr][Ii]))',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:([Nn][Oo][Nn][Ll][Ii][Tt][Ee][Rr][Aa][Ll]))/',
      source: '^(?:([Nn][Oo][Nn][Ll][Ii][Tt][Ee][Rr][Aa][Ll]))',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:([Nn][Oo][Nn][Ll][Ii][Tt][Ee][Rr][Aa][Ll]))',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:([Aa][Nn][Dd]))/',
      source: '^(?:([Aa][Nn][Dd]))',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:([Aa][Nn][Dd]))',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:([Oo][Rr]))/',
      source: '^(?:([Oo][Rr]))',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:([Oo][Rr]))',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:([No][Oo][Tt]))/',
      source: '^(?:([No][Oo][Tt]))',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:([No][Oo][Tt]))',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:([Mm][Ii][Nn][Ii][Nn][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/',
      source: '^(?:([Mm][Ii][Nn][Ii][Nn][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:([Mm][Ii][Nn][Ii][Nn][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:([Mm][Ii][Nn][Ee][Xx][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/',
      source: '^(?:([Mm][Ii][Nn][Ee][Xx][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:([Mm][Ii][Nn][Ee][Xx][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:([Mm][Aa][Xx][Ii][Nn][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/',
      source: '^(?:([Mm][Aa][Xx][Ii][Nn][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:([Mm][Aa][Xx][Ii][Nn][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:([Mm][Aa][Xx][Ee][Xx][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/',
      source: '^(?:([Mm][Aa][Xx][Ee][Xx][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:([Mm][Aa][Xx][Ee][Xx][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:([Ll][Ee][Nn][Gg][Tt][Hh]))/',
      source: '^(?:([Ll][Ee][Nn][Gg][Tt][Hh]))',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:([Ll][Ee][Nn][Gg][Tt][Hh]))',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:([Mm][Ii][Nn][Ll][Ee][Nn][Gg][Tt][Hh]))/',
      source: '^(?:([Mm][Ii][Nn][Ll][Ee][Nn][Gg][Tt][Hh]))',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:([Mm][Ii][Nn][Ll][Ee][Nn][Gg][Tt][Hh]))',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:([Mm][Aa][Xx][Ll][Ee][Nn][Gg][Tt][Hh]))/',
      source: '^(?:([Mm][Aa][Xx][Ll][Ee][Nn][Gg][Tt][Hh]))',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:([Mm][Aa][Xx][Ll][Ee][Nn][Gg][Tt][Hh]))',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:([Tt][Oo][Tt][Aa][Ll][Dd][Ii][Gg][Ii][Tt][Ss]))/',
      source: '^(?:([Tt][Oo][Tt][Aa][Ll][Dd][Ii][Gg][Ii][Tt][Ss]))',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:([Tt][Oo][Tt][Aa][Ll][Dd][Ii][Gg][Ii][Tt][Ss]))',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:([Ff][Rr][Aa][Cc][Tt][Ii][Oo][Nn][Dd][Ii][Gg][Ii][Tt][Ss]))/',
      source: '^(?:([Ff][Rr][Aa][Cc][Tt][Ii][Oo][Nn][Dd][Ii][Gg][Ii][Tt][Ss]))',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:([Ff][Rr][Aa][Cc][Tt][Ii][Oo][Nn][Dd][Ii][Gg][Ii][Tt][Ss]))',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:=)/',
      source: '^(?:=)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:=)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\/\\/)/',
      source: '^(?:\\/\\/)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\/\\/)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\{)/',
      source: '^(?:\\{)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\{)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\})/',
      source: '^(?:\\})',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\})',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:&)/',
      source: '^(?:&)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:&)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\|\\|)/',
      source: '^(?:\\|\\|)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\|\\|)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\|)/',
      source: '^(?:\\|)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\|)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:,)/',
      source: '^(?:,)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:,)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\()/',
      source: '^(?:\\()',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\()',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\))/',
      source: '^(?:\\))',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\))',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\[)/',
      source: '^(?:\\[)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\[)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\])/',
      source: '^(?:\\])',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\])',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\$)/',
      source: '^(?:\\$)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\$)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:!)/',
      source: '^(?:!)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:!)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\^\\^)/',
      source: '^(?:\\^\\^)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\^\\^)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\^)/',
      source: '^(?:\\^)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\^)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\.)/',
      source: '^(?:\\.)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\.)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:~)/',
      source: '^(?:~)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:~)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:;)/',
      source: '^(?:;)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:;)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\*)/',
      source: '^(?:\\*)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\*)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\+)/',
      source: '^(?:\\+)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\+)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:\\?)/',
      source: '^(?:\\?)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:\\?)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:-)/',
      source: '^(?:-)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:-)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:%)/',
      source: '^(?:%)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:%)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:true)/',
      source: '^(?:true)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:true)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:false)/',
      source: '^(?:false)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:false)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:$)/',
      source: '^(?:$)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:$)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:[a-zA-Z0-9_-]+)/',
      source: '^(?:[a-zA-Z0-9_-]+)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:[a-zA-Z0-9_-]+)',
        flags: '',
        isNative: true,
      },
    },
    {
      re: '/^(?:.)/',
      source: '^(?:.)',
      flags: '',
      xregexp: {
        captureNames: null,
        source: '^(?:.)',
        flags: '',
        isNative: true,
      },
    },
  ],
  macros: {
    IT_BASE: {
      in_set: 'Bb',
      elsewhere: '[Bb][Aa][Ss][Ee]',
      raw: '[Bb][Aa][Ss][Ee]',
    },
    IT_PREFIX: {
      in_set: 'Pp',
      elsewhere: '[Pp][Rr][Ee][Ff][Ii][Xx]',
      raw: '[Pp][Rr][Ee][Ff][Ii][Xx]',
    },
    IT_IMPORT: {
      in_set: 'Ii',
      elsewhere: '[iI][mM][pP][oO][rR][tT]',
      raw: '[iI][mM][pP][oO][rR][tT]',
    },
    IT_START: {
      in_set: 'Ss',
      elsewhere: '[sS][tT][aA][rR][tT]',
      raw: '[sS][tT][aA][rR][tT]',
    },
    IT_EXTERNAL: {
      in_set: 'Ee',
      elsewhere: '[eE][xX][tT][eE][rR][nN][aA][lL]',
      raw: '[eE][xX][tT][eE][rR][nN][aA][lL]',
    },
    IT_CLOSED: {
      in_set: 'Cc',
      elsewhere: '[Cc][Ll][Oo][Ss][Ee][Dd]',
      raw: '[Cc][Ll][Oo][Ss][Ee][Dd]',
    },
    IT_EXTRA: {
      in_set: 'Ee',
      elsewhere: '[Ee][Xx][Tt][Rr][Aa]',
      raw: '[Ee][Xx][Tt][Rr][Aa]',
    },
    IT_LITERAL: {
      in_set: 'Ll',
      elsewhere: '[Ll][Ii][Tt][Ee][Rr][Aa][Ll]',
      raw: '[Ll][Ii][Tt][Ee][Rr][Aa][Ll]',
    },
    IT_BNODE: {
      in_set: 'Bb',
      elsewhere: '[Bb][Nn][Oo][Dd][Ee]',
      raw: '[Bb][Nn][Oo][Dd][Ee]',
    },
    IT_IRI: {
      in_set: 'Ii',
      elsewhere: '[Ii][Rr][Ii]',
      raw: '[Ii][Rr][Ii]',
    },
    IT_NONLITERAL: {
      in_set: 'Nn',
      elsewhere: '[Nn][Oo][Nn][Ll][Ii][Tt][Ee][Rr][Aa][Ll]',
      raw: '[Nn][Oo][Nn][Ll][Ii][Tt][Ee][Rr][Aa][Ll]',
    },
    IT_AND: {
      in_set: 'Aa',
      elsewhere: '[Aa][Nn][Dd]',
      raw: '[Aa][Nn][Dd]',
    },
    IT_OR: {
      in_set: 'Oo',
      elsewhere: '[Oo][Rr]',
      raw: '[Oo][Rr]',
    },
    IT_NOT: {
      in_set: 'No',
      elsewhere: '[No][Oo][Tt]',
      raw: '[No][Oo][Tt]',
    },
    IT_MININCLUSIVE: {
      in_set: 'Mm',
      elsewhere: '[Mm][Ii][Nn][Ii][Nn][Cc][Ll][Uu][Ss][Ii][Vv][Ee]',
      raw: '[Mm][Ii][Nn][Ii][Nn][Cc][Ll][Uu][Ss][Ii][Vv][Ee]',
    },
    IT_MINEXCLUSIVE: {
      in_set: 'Mm',
      elsewhere: '[Mm][Ii][Nn][Ee][Xx][Cc][Ll][Uu][Ss][Ii][Vv][Ee]',
      raw: '[Mm][Ii][Nn][Ee][Xx][Cc][Ll][Uu][Ss][Ii][Vv][Ee]',
    },
    IT_MAXINCLUSIVE: {
      in_set: 'Mm',
      elsewhere: '[Mm][Aa][Xx][Ii][Nn][Cc][Ll][Uu][Ss][Ii][Vv][Ee]',
      raw: '[Mm][Aa][Xx][Ii][Nn][Cc][Ll][Uu][Ss][Ii][Vv][Ee]',
    },
    IT_MAXEXCLUSIVE: {
      in_set: 'Mm',
      elsewhere: '[Mm][Aa][Xx][Ee][Xx][Cc][Ll][Uu][Ss][Ii][Vv][Ee]',
      raw: '[Mm][Aa][Xx][Ee][Xx][Cc][Ll][Uu][Ss][Ii][Vv][Ee]',
    },
    IT_LENGTH: {
      in_set: 'Ll',
      elsewhere: '[Ll][Ee][Nn][Gg][Tt][Hh]',
      raw: '[Ll][Ee][Nn][Gg][Tt][Hh]',
    },
    IT_MINLENGTH: {
      in_set: 'Mm',
      elsewhere: '[Mm][Ii][Nn][Ll][Ee][Nn][Gg][Tt][Hh]',
      raw: '[Mm][Ii][Nn][Ll][Ee][Nn][Gg][Tt][Hh]',
    },
    IT_MAXLENGTH: {
      in_set: 'Mm',
      elsewhere: '[Mm][Aa][Xx][Ll][Ee][Nn][Gg][Tt][Hh]',
      raw: '[Mm][Aa][Xx][Ll][Ee][Nn][Gg][Tt][Hh]',
    },
    IT_TOTALDIGITS: {
      in_set: 'Tt',
      elsewhere: '[Tt][Oo][Tt][Aa][Ll][Dd][Ii][Gg][Ii][Tt][Ss]',
      raw: '[Tt][Oo][Tt][Aa][Ll][Dd][Ii][Gg][Ii][Tt][Ss]',
    },
    IT_FRACTIONDIGITS: {
      in_set: 'Ff',
      elsewhere: '[Ff][Rr][Aa][Cc][Tt][Ii][Oo][Nn][Dd][Ii][Gg][Ii][Tt][Ss]',
      raw: '[Ff][Rr][Aa][Cc][Tt][Ii][Oo][Nn][Dd][Ii][Gg][Ii][Tt][Ss]',
    },
    LANGTAG: {
      in_set: {
        message: '[macro [LANGTAG] is unsuitable for use inside regex set expressions: "[@([A-Za-z])+((-([0-9A-Za-z])+))*]"]',
        name: 'Error',
      },
      elsewhere: '@([A-Za-z])+((-([0-9A-Za-z])+))*',
      raw: '@([A-Za-z])+((-([0-9A-Za-z])+))*',
    },
    INTEGER: {
      in_set: {
        message: '[macro [INTEGER] is unsuitable for use inside regex set expressions: "[([+-])?([0-9])+]"]',
        name: 'Error',
      },
      elsewhere: '([+-])?([0-9])+',
      raw: '([+-])?([0-9])+',
    },
    REPEAT_RANGE: {
      in_set: {
        message: '[macro [INTEGER] is unsuitable for use inside regex set expressions: "[([+-])?([0-9])+]"]',
        name: 'Error',
      },
      elsewhere: '\\{((?:([+-])?([0-9])+))((,(((?:([+-])?([0-9])+))|\\*)?))?\\}',
      raw: '\\{({INTEGER})((,(({INTEGER})|\\*)?))?\\}',
    },
    DECIMAL: {
      in_set: {
        message: '[macro [DECIMAL] is unsuitable for use inside regex set expressions: "[([+-])?([0-9])*\\.([0-9])+]"]',
        name: 'Error',
      },
      elsewhere: '([+-])?([0-9])*\\.([0-9])+',
      raw: '([+-])?([0-9])*\\.([0-9])+',
    },
    EXPONENT: {
      in_set: {
        message: '[macro [EXPONENT] is unsuitable for use inside regex set expressions: "[[Ee]([+-])?([0-9])+]"]',
        name: 'Error',
      },
      elsewhere: '[Ee]([+-])?([0-9])+',
      raw: '[Ee]([+-])?([0-9])+',
    },
    DOUBLE: {
      in_set: {
        message: '[macro [EXPONENT] is unsuitable for use inside regex set expressions: "[[Ee]([+-])?([0-9])+]"]',
        name: 'Error',
      },
      elsewhere: '([+-])?((([0-9])+\\.([0-9])*((?:[Ee]([+-])?([0-9])+)))|((\\.)?([0-9])+((?:[Ee]([+-])?([0-9])+))))',
      raw: '([+-])?((([0-9])+\\.([0-9])*({EXPONENT}))|((\\.)?([0-9])+({EXPONENT})))',
    },
    ECHAR: {
      in_set: '\\\\',
      elsewhere: '\\\\[\\"\\\'\\\\bfnrt]',
      raw: '\\\\[\\"\\\'\\\\bfnrt]',
    },
    WS: {
      in_set: {
        message: '[macro [WS] is unsuitable for use inside regex set expressions: "[( )|((\\t)|((\\r)|(\\n)))]"]',
        name: 'Error',
      },
      elsewhere: '( )|((\\t)|((\\r)|(\\n)))',
      raw: '( )|((\\t)|((\\r)|(\\n)))',
    },
    PN_CHARS_BASE: {
      in_set: 'A-Za-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-\\udb7f豈-﷏ﷰ-\\ufffd',
      elsewhere: '[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF]',
      raw: '[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF]',
    },
    PN_CHARS_U: {
      in_set: 'A_',
      elsewhere: '(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_',
      raw: '{PN_CHARS_BASE}|_|_',
    },
    PN_CHARS: {
      in_set: '\\-0-9A·̀-ͯ‿⁀',
      elsewhere: '(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040]',
      raw: '{PN_CHARS_U}|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040]',
    },
    REGEXP: {
      in_set: {
        message: '[macro [REGEXP] is unsuitable for use inside regex set expressions: "[\\/([^\\u002f\\u005C\\u000A\\u000D]|\\\\[nrt\\\\|.?*+(){}$\\u002D\\u005B\\u005D\\u005E/]|\\\\)+\\/[smix]*]"]',
        name: 'Error',
      },
      elsewhere: '\\/([^\\u002f\\u005C\\u000A\\u000D]|\\\\[nrt\\\\|.?*+(){}$\\u002D\\u005B\\u005D\\u005E/]|(?:\\\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])))+\\/[smix]*',
      raw: '\\/([^\\u002f\\u005C\\u000A\\u000D]|\\\\[nrt\\\\|.?*+(){}$\\u002D\\u005B\\u005D\\u005E/]|{UCHAR})+\\/[smix]*',
    },
    UCHAR: {
      in_set: '\\\\',
      elsewhere: '\\\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])',
      raw: '\\\\u{HEX}{HEX}{HEX}{HEX}|\\\\U{HEX}{HEX}{HEX}{HEX}{HEX}{HEX}{HEX}{HEX}',
    },
    HEX: {
      in_set: '0-9A-Fa-f',
      elsewhere: '[0-9]|[A-F]|[a-f]',
      raw: '[0-9]|[A-F]|[a-f]',
    },
    BLANK_NODE_LABEL: {
      in_set: {
        message: '[macro [BLANK_NODE_LABEL] is unsuitable for use inside regex set expressions: "[_:(A_|[0-9])((\\-0-9A·̀-ͯ‿⁀|\\.)*\\-0-9A·̀-ͯ‿⁀)?]"]',
        name: 'Error',
      },
      elsewhere: '_:((?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|[0-9])(((?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040])|\\.)*(?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040]))?',
      raw: '_:({PN_CHARS_U}|[0-9])(({PN_CHARS}|\\.)*{PN_CHARS})?',
    },
    PN_PREFIX: {
      in_set: {
        message: '[macro [PN_PREFIX] is unsuitable for use inside regex set expressions: "[A-Za-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-\\udb7f豈-﷏ﷰ-\\ufffd((\\-0-9A·̀-ͯ‿⁀|\\.)*\\-0-9A·̀-ͯ‿⁀)?]"]',
        name: 'Error',
      },
      elsewhere: '(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])(((?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040])|\\.)*(?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040]))?',
      raw: '{PN_CHARS_BASE}(({PN_CHARS}|\\.)*{PN_CHARS})?',
    },
    PNAME_NS: {
      in_set: {
        message: '[macro [PN_PREFIX] is unsuitable for use inside regex set expressions: "[A-Za-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-\\udb7f豈-﷏ﷰ-\\ufffd((\\-0-9A·̀-ͯ‿⁀|\\.)*\\-0-9A·̀-ͯ‿⁀)?]"]',
        name: 'Error',
      },
      elsewhere: '(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])(((?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040])|\\.)*(?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040]))?)?:',
      raw: '{PN_PREFIX}?:',
    },
    ATPNAME_NS: {
      in_set: {
        message: '[macro [PN_PREFIX] is unsuitable for use inside regex set expressions: "[A-Za-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-\\udb7f豈-﷏ﷰ-\\ufffd((\\-0-9A·̀-ͯ‿⁀|\\.)*\\-0-9A·̀-ͯ‿⁀)?]"]',
        name: 'Error',
      },
      elsewhere: '@(?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])(((?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040])|\\.)*(?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040]))?)?:)',
      raw: '@{PNAME_NS}',
    },
    PERCENT: {
      in_set: '%',
      elsewhere: '%(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])',
      raw: '%{HEX}{HEX}',
    },
    CODE: {
      in_set: {
        message: '[macro [CODE] is unsuitable for use inside regex set expressions: "[\\{([^%\\\\]|\\\\[%\\\\]|\\\\)*%\\}]"]',
        name: 'Error',
      },
      elsewhere: '\\{([^%\\\\]|\\\\[%\\\\]|(?:\\\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])))*%\\}',
      raw: '\\{([^%\\\\]|\\\\[%\\\\]|{UCHAR})*%\\}',
    },
    STRING_LITERAL1: {
      in_set: {
        message: `[macro [STRING_LITERAL1] is unsuitable for use inside regex set expressions: "['([^\\u0027\\u005c\\u000a\\u000d]|\\\\|\\\\)*']"]`,
        name: 'Error',
      },
      elsewhere: `'([^\\u0027\\u005c\\u000a\\u000d]|(?:\\\\[\\"\\'\\\\bfnrt])|(?:\\\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])))*'`,
      raw: "'([^\\u0027\\u005c\\u000a\\u000d]|{ECHAR}|{UCHAR})*'",
    },
    STRING_LITERAL2: {
      in_set: {
        message: `[macro [STRING_LITERAL2] is unsuitable for use inside regex set expressions: "["([^\\u0022\\u005c\\u000a\\u000d]|\\\\|\\\\)*"]"]`,
        name: 'Error',
      },
      elsewhere: `"([^\\u0022\\u005c\\u000a\\u000d]|(?:\\\\[\\"\\'\\\\bfnrt])|(?:\\\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])))*"`,
      raw: '"([^\\u0022\\u005c\\u000a\\u000d]|{ECHAR}|{UCHAR})*"',
    },
    STRING_LITERAL_LONG1: {
      in_set: {
        message: `[macro [STRING_LITERAL_LONG1] is unsuitable for use inside regex set expressions: "['''(('|'')?([^\\'\\\\]|\\\\|\\\\))*''']"]`,
        name: 'Error',
      },
      elsewhere: `'''(('|'')?([^\\'\\\\]|(?:\\\\[\\"\\'\\\\bfnrt])|(?:\\\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))))*'''`,
      raw: `'''(('|'')?([^\\'\\\\]|{ECHAR}|{UCHAR}))*'''`,
    },
    STRING_LITERAL_LONG2: {
      in_set: {
        message: `[macro [STRING_LITERAL_LONG2] is unsuitable for use inside regex set expressions: "["""(("|"")?([^\\"\\\\]|\\\\|\\\\))*"""]"]`,
        name: 'Error',
      },
      elsewhere: `"""(("|"")?([^\\"\\\\]|(?:\\\\[\\"\\'\\\\bfnrt])|(?:\\\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))))*"""`,
      raw: `"""(("|"")?([^\\"\\\\]|{ECHAR}|{UCHAR}))*"""`,
    },
    LANG_STRING_LITERAL1: {
      in_set: {
        message: '[macro [LANGTAG] is unsuitable for use inside regex set expressions: "[@([A-Za-z])+((-([0-9A-Za-z])+))*]"]',
        name: 'Error',
      },
      elsewhere: `'([^\\u0027\\u005c\\u000a\\u000d]|(?:\\\\[\\"\\'\\\\bfnrt])|(?:\\\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])))*'(?:@([A-Za-z])+((-([0-9A-Za-z])+))*)`,
      raw: "'([^\\u0027\\u005c\\u000a\\u000d]|{ECHAR}|{UCHAR})*'{LANGTAG}",
    },
    LANG_STRING_LITERAL2: {
      in_set: {
        message: '[macro [LANGTAG] is unsuitable for use inside regex set expressions: "[@([A-Za-z])+((-([0-9A-Za-z])+))*]"]',
        name: 'Error',
      },
      elsewhere: `"([^\\u0022\\u005c\\u000a\\u000d]|(?:\\\\[\\"\\'\\\\bfnrt])|(?:\\\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])))*"(?:@([A-Za-z])+((-([0-9A-Za-z])+))*)`,
      raw: '"([^\\u0022\\u005c\\u000a\\u000d]|{ECHAR}|{UCHAR})*"{LANGTAG}',
    },
    LANG_STRING_LITERAL_LONG1: {
      in_set: {
        message: '[macro [LANGTAG] is unsuitable for use inside regex set expressions: "[@([A-Za-z])+((-([0-9A-Za-z])+))*]"]',
        name: 'Error',
      },
      elsewhere: `'''(('|'')?([^\\'\\\\]|(?:\\\\[\\"\\'\\\\bfnrt])|(?:\\\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))))*'''(?:@([A-Za-z])+((-([0-9A-Za-z])+))*)`,
      raw: `'''(('|'')?([^\\'\\\\]|{ECHAR}|{UCHAR}))*'''{LANGTAG}`,
    },
    LANG_STRING_LITERAL_LONG2: {
      in_set: {
        message: '[macro [LANGTAG] is unsuitable for use inside regex set expressions: "[@([A-Za-z])+((-([0-9A-Za-z])+))*]"]',
        name: 'Error',
      },
      elsewhere: `"""(("|"")?([^\\"\\\\]|(?:\\\\[\\"\\'\\\\bfnrt])|(?:\\\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))))*"""(?:@([A-Za-z])+((-([0-9A-Za-z])+))*)`,
      raw: `"""(("|"")?([^\\"\\\\]|{ECHAR}|{UCHAR}))*"""{LANGTAG}`,
    },
    IRIREF: {
      in_set: {
        message: '[macro [IRIREF] is unsuitable for use inside regex set expressions: "[<([^\\u0000-\\u0020<>\\"{}|^`\\\\]|\\\\)*>]"]',
        name: 'Error',
      },
      elsewhere: '<([^\\u0000-\\u0020<>\\"{}|^`\\\\]|(?:\\\\u(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])|\\\\U(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f])))*>',
      raw: '<([^\\u0000-\\u0020<>\\"{}|^`\\\\]|{UCHAR})*>',
    },
    PN_LOCAL_ESC: {
      in_set: {
        message: `[macro [PN_LOCAL_ESC] is unsuitable for use inside regex set expressions: "[\\\\(_|~|\\.|-|!|\\$|&|'|\\(|\\)|\\*|\\+|,|;|=|\\/|\\?|#|@|%)]"]`,
        name: 'Error',
      },
      elsewhere: "\\\\(_|~|\\.|-|!|\\$|&|'|\\(|\\)|\\*|\\+|,|;|=|\\/|\\?|#|@|%)",
      raw: "\\\\(_|~|\\.|-|!|\\$|&|'|\\(|\\)|\\*|\\+|,|;|=|\\/|\\?|#|@|%)",
    },
    PLX: {
      in_set: {
        message: `[macro [PN_LOCAL_ESC] is unsuitable for use inside regex set expressions: "[\\\\(_|~|\\.|-|!|\\$|&|'|\\(|\\)|\\*|\\+|,|;|=|\\/|\\?|#|@|%)]"]`,
        name: 'Error',
      },
      elsewhere: "(?:%(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))|(?:\\\\(_|~|\\.|-|!|\\$|&|'|\\(|\\)|\\*|\\+|,|;|=|\\/|\\?|#|@|%))",
      raw: '{PERCENT}|{PN_LOCAL_ESC}',
    },
    PN_LOCAL: {
      in_set: {
        message: `[macro [PN_LOCAL_ESC] is unsuitable for use inside regex set expressions: "[\\\\(_|~|\\.|-|!|\\$|&|'|\\(|\\)|\\*|\\+|,|;|=|\\/|\\?|#|@|%)]"]`,
        name: 'Error',
      },
      elsewhere: "((?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|:|[0-9]|(?:(?:%(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))|(?:\\\\(_|~|\\.|-|!|\\$|&|'|\\(|\\)|\\*|\\+|,|;|=|\\/|\\?|#|@|%))))((?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040])|\\.|:|(?:(?:%(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))|(?:\\\\(_|~|\\.|-|!|\\$|&|'|\\(|\\)|\\*|\\+|,|;|=|\\/|\\?|#|@|%))))*",
      raw: '({PN_CHARS_U}|:|[0-9]|{PLX})({PN_CHARS}|\\.|:|{PLX})*',
    },
    PNAME_LN: {
      in_set: {
        message: '[macro [PN_PREFIX] is unsuitable for use inside regex set expressions: "[A-Za-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-\\udb7f豈-﷏ﷰ-\\ufffd((\\-0-9A·̀-ͯ‿⁀|\\.)*\\-0-9A·̀-ͯ‿⁀)?]"]',
        name: 'Error',
      },
      elsewhere: "(?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])(((?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040])|\\.)*(?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040]))?)?:)(?:((?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|:|[0-9]|(?:(?:%(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))|(?:\\\\(_|~|\\.|-|!|\\$|&|'|\\(|\\)|\\*|\\+|,|;|=|\\/|\\?|#|@|%))))((?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040])|\\.|:|(?:(?:%(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))|(?:\\\\(_|~|\\.|-|!|\\$|&|'|\\(|\\)|\\*|\\+|,|;|=|\\/|\\?|#|@|%))))*)",
      raw: '{PNAME_NS}{PN_LOCAL}',
    },
    ATPNAME_LN: {
      in_set: {
        message: '[macro [PN_PREFIX] is unsuitable for use inside regex set expressions: "[A-Za-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌‍⁰-↏Ⰰ-⿯、-\\udb7f豈-﷏ﷰ-\\ufffd((\\-0-9A·̀-ͯ‿⁀|\\.)*\\-0-9A·̀-ͯ‿⁀)?]"]',
        name: 'Error',
      },
      elsewhere: "@(?:(?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])(((?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040])|\\.)*(?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040]))?)?:)(?:((?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|:|[0-9]|(?:(?:%(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))|(?:\\\\(_|~|\\.|-|!|\\$|&|'|\\(|\\)|\\*|\\+|,|;|=|\\/|\\?|#|@|%))))((?:(?:(?:[A-Z]|[a-z]|[\\u00c0-\\u00d6]|[\\u00d8-\\u00f6]|[\\u00f8-\\u02ff]|[\\u0370-\\u037d]|[\\u037f-\\u1fff]|[\\u200c-\\u200d]|[\\u2070-\\u218f]|[\\u2c00-\\u2fef]|[\\u3001-\\ud7ff]|[\\uf900-\\ufdcf]|[\\ufdf0-\\ufffd]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])|_|_)|-|[0-9]|[\\u00b7]|[\\u0300-\\u036f]|[\\u203f-\\u2040])|\\.|:|(?:(?:%(?:[0-9]|[A-F]|[a-f])(?:[0-9]|[A-F]|[a-f]))|(?:\\\\(_|~|\\.|-|!|\\$|&|'|\\(|\\)|\\*|\\+|,|;|=|\\/|\\?|#|@|%))))*))",
      raw: '@{PNAME_LN}',
    },
    COMMENT: {
      in_set: {
        message: '[macro [COMMENT] is unsuitable for use inside regex set expressions: "[#[^\\u000a\\u000d]*|\\/\\*([^*]|\\*([^/]|\\\\\\/))*\\*\\/]"]',
        name: 'Error',
      },
      elsewhere: '#[^\\u000a\\u000d]*|\\/\\*([^*]|\\*([^/]|\\\\\\/))*\\*\\/',
      raw: '#[^\\u000a\\u000d]*|\\/\\*([^*]|\\*([^/]|\\\\\\/))*\\*\\/',
    },
  },
  regular_rule_count: 4,
  simple_rule_count: 73,
  conditionStack: [
    'INITIAL',
  ],
  actionInclude: `/*
    ShEx parser in the Jison parser generator format.
  */

  const UNBOUNDED = -1;

  //const ShExUtil = require("@shexjs/util");
  // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  // WARNING: brutal hack to make example compile and run in minimal jison-gho lexer CLI environment.

  // Common namespaces and entities
  const RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
      RDF_TYPE  = RDF + 'type',
      RDF_FIRST = RDF + 'first',
      RDF_REST  = RDF + 'rest',
      RDF_NIL   = RDF + 'nil',
      XSD = 'http://www.w3.org/2001/XMLSchema#',
      XSD_INTEGER  = XSD + 'integer',
      XSD_DECIMAL  = XSD + 'decimal',
      XSD_FLOAT   = XSD + 'float',
      XSD_DOUBLE   = XSD + 'double',
      XSD_BOOLEAN  = XSD + 'boolean',
      XSD_TRUE =  '"true"^^'  + XSD_BOOLEAN,
      XSD_FALSE = '"false"^^' + XSD_BOOLEAN,
      XSD_PATTERN        = XSD + 'pattern',
      XSD_MININCLUSIVE   = XSD + 'minInclusive',
      XSD_MINEXCLUSIVE   = XSD + 'minExclusive',
      XSD_MAXINCLUSIVE   = XSD + 'maxInclusive',
      XSD_MAXEXCLUSIVE   = XSD + 'maxExclusive',
      XSD_LENGTH         = XSD + 'length',
      XSD_MINLENGTH      = XSD + 'minLength',
      XSD_MAXLENGTH      = XSD + 'maxLength',
      XSD_TOTALDIGITS    = XSD + 'totalDigits',
      XSD_FRACTIONDIGITS = XSD + 'fractionDigits';

  const numericDatatypes = [
      XSD + "integer",
      XSD + "decimal",
      XSD + "float",
      XSD + "double",
      XSD + "string",
      XSD + "boolean",
      XSD + "dateTime",
      XSD + "nonPositiveInteger",
      XSD + "negativeInteger",
      XSD + "long",
      XSD + "int",
      XSD + "short",
      XSD + "byte",
      XSD + "nonNegativeInteger",
      XSD + "unsignedLong",
      XSD + "unsignedInt",
      XSD + "unsignedShort",
      XSD + "unsignedByte",
      XSD + "positiveInteger"
  ];

  const absoluteIRI = /^[a-z][a-z0-9+.-]*:/i,
    schemeAuthority = /^(?:([a-z][a-z0-9+.-]*:))?(?:\\/\\/[^\\/]*)?/i,
    dotSegments = /(?:^|\\/)\\.\\.?(?:$|[\\/#?])/;

  const numericFacets = ["mininclusive", "minexclusive",
                       "maxinclusive", "maxexclusive"];

  // Returns a lowercase version of the given string
  function lowercase(string) {
    return string.toLowerCase();
  }

  // Appends the item to the array and returns the array
  function appendTo(array, item) {
    return array.push(item), array;
  }

  // Appends the items to the array and returns the array
  function appendAllTo(array, items) {
    return array.push.apply(array, items), array;
  }

  // Extends a base object with properties of other objects
  function extend(base) {
    if (!base) base = {};
    for (let i = 1, l = arguments.length, arg; i < l && (arg = arguments[i] || {}); i++)
      for (let name in arg)
        base[name] = arg[name];
    return base;
  }

  // Creates an array that contains all items of the given arrays
  function unionAll() {
    let union = [];
    for (let i = 0, l = arguments.length; i < l; i++)
      union = union.concat.apply(union, arguments[i]);
    return union;
  }

  // N3.js:lib/N3Parser.js<0.4.5>:58 with
  //   s/this\\./Parser./g
  // ### \`_setBase\` sets the base IRI to resolve relative IRIs.
  Parser._setBase = function (baseIRI) {
    if (!baseIRI)
      baseIRI = null;

    // baseIRI '#' check disabled to allow -x 'data:text/shex,...#'
    // else if (baseIRI.indexOf('#') >= 0)
    //   throw new Error('Invalid base IRI ' + baseIRI);

    // Set base IRI and its components
    if (Parser._base = baseIRI) {
      Parser._basePath   = baseIRI.replace(/[^\\/?]*(?:\\?.*)?$/, '');
      baseIRI = baseIRI.match(schemeAuthority);
      Parser._baseRoot   = baseIRI[0];
      Parser._baseScheme = baseIRI[1];
    }
  }

  // N3.js:lib/N3Parser.js<0.4.5>:576 with
  //   s/this\\./Parser./g
  //   s/token/iri/
  // ### \`_resolveIRI\` resolves a relative IRI token against the base path,
  // assuming that a base path has been set and that the IRI is indeed relative.
  function _resolveIRI (iri) {
    switch (iri[0]) {
    // An empty relative IRI indicates the base IRI
    case undefined: return Parser._base;
    // Resolve relative fragment IRIs against the base IRI
    case '#': return Parser._base + iri;
    // Resolve relative query string IRIs by replacing the query string
    case '?': return Parser._base.replace(/(?:\\?.*)?$/, iri);
    // Resolve root-relative IRIs at the root of the base IRI
    case '/':
      // Resolve scheme-relative IRIs to the scheme
      return (iri[1] === '/' ? Parser._baseScheme : Parser._baseRoot) + _removeDotSegments(iri);
    // Resolve all other IRIs at the base IRI's path
    default: {
      return _removeDotSegments(Parser._basePath + iri);
    }
    }
  }

  // ### \`_removeDotSegments\` resolves './' and '../' path segments in an IRI as per RFC3986.
  function _removeDotSegments (iri) {
    // Don't modify the IRI if it does not contain any dot segments
    if (!dotSegments.test(iri))
      return iri;

    // Start with an imaginary slash before the IRI in order to resolve trailing './' and '../'
    const length = iri.length;
    let result = '', i = -1, pathStart = -1, next = '/', segmentStart = 0;

    while (i < length) {
      switch (next) {
      // The path starts with the first slash after the authority
      case ':':
        if (pathStart < 0) {
          // Skip two slashes before the authority
          if (iri[++i] === '/' && iri[++i] === '/')
            // Skip to slash after the authority
            while ((pathStart = i + 1) < length && iri[pathStart] !== '/')
              i = pathStart;
        }
        break;
      // Don't modify a query string or fragment
      case '?':
      case '#':
        i = length;
        break;
      // Handle '/.' or '/..' path segments
      case '/':
        if (iri[i + 1] === '.') {
          next = iri[++i + 1];
          switch (next) {
          // Remove a '/.' segment
          case '/':
            result += iri.substring(segmentStart, i - 1);
            segmentStart = i + 1;
            break;
          // Remove a trailing '/.' segment
          case undefined:
          case '?':
          case '#':
            return result + iri.substring(segmentStart, i) + iri.substr(i + 1);
          // Remove a '/..' segment
          case '.':
            next = iri[++i + 1];
            if (next === undefined || next === '/' || next === '?' || next === '#') {
              result += iri.substring(segmentStart, i - 2);
              // Try to remove the parent path from result
              if ((segmentStart = result.lastIndexOf('/')) >= pathStart)
                result = result.substr(0, segmentStart);
              // Remove a trailing '/..' segment
              if (next !== '/')
                return result + '/' + iri.substr(i + 1);
              segmentStart = i + 1;
            }
          }
        }
      }
      next = iri[++i];
    }
    return result + iri.substring(segmentStart);
  }

  // Creates an expression with the given type and attributes
  function expression(expr, attr) {
    const expression = { expression: expr };
    if (attr)
      for (let a in attr)
        expression[a] = attr[a];
    return expression;
  }

  // Creates a path with the given type and items
  function path(type, items) {
    return { type: 'path', pathType: type, items: items };
  }

  // Creates a literal with the given value and type
  function createLiteral(value, type) {
    return { value: value, type: type };
  }

  // Creates a new blank node identifier
  function blank() {
    return '_:b' + blankId++;
  };
  let blankId = 0;
  Parser._resetBlanks = function () { blankId = 0; }
  Parser.reset = function () {
    Parser._prefixes = Parser._imports = Parser._sourceMap = Parser.shapes = Parser.productions = Parser.start = Parser.startActs = null; // Reset state.
    Parser._base = Parser._baseIRI = Parser._baseIRIPath = Parser._baseIRIRoot = null;
  }
  let _fileName; // for debugging
  Parser._setFileName = function (fn) { _fileName = fn; }

  // Regular expression and replacement strings to escape strings
  const stringEscapeReplacements = { '\\\\': '\\\\', "'": "'", '"': '"',
                                   't': '\\t', 'b': '\\b', 'n': '\\n', 'r': '\\r', 'f': '\\f' },
      semactEscapeReplacements = { '\\\\': '\\\\', '%': '%' },
      pnameEscapeReplacements = {
        '\\\\': '\\\\', "'": "'", '"': '"',
        'n': '\\n', 'r': '\\r', 't': '\\t', 'f': '\\f', 'b': '\\b',
        '_': '_', '~': '~', '.': '.', '-': '-', '!': '!', '$': '$', '&': '&',
        '(': '(', ')': ')', '*': '*', '+': '+', ',': ',', ';': ';', '=': '=',
        '/': '/', '?': '?', '#': '#', '@': '@', '%': '%',
      };


  // Translates string escape codes in the string into their textual equivalent
  function unescapeString(string, trimLength) {
    string = string.substring(trimLength, string.length - trimLength);
    return { value: ShExUtil.unescapeText(string, stringEscapeReplacements) };
  }

  function unescapeLangString(string, trimLength) {
    const at = string.lastIndexOf("@");
    const lang = string.substr(at);
    string = string.substr(0, at);
    const u = unescapeString(string, trimLength);
    return extend(u, { language: lowercase(lang.substr(1)) });
  }

  // Translates regular expression escape codes in the string into their textual equivalent
  function unescapeRegexp (regexp) {
    const end = regexp.lastIndexOf("/");
    let s = regexp.substr(1, end-1);
    const regexpEscapeReplacements = {
      '.': "\\\\.", '\\\\': "\\\\\\\\", '?': "\\\\?", '*': "\\\\*", '+': "\\\\+",
      '{': "\\\\{", '}': "\\\\}", '(': "\\\\(", ')': "\\\\)", '|': "\\\\|",
      '^': "\\\\^", '$': "\\\\$", '[': "\\\\[", ']': "\\\\]", '/': "\\\\/",
      't': '\\\\t', 'n': '\\\\n', 'r': '\\\\r', '-': "\\\\-", '/': '/'
    };
    s = ShExUtil.unescapeText(s, regexpEscapeReplacements)
    const ret = {
      pattern: s
    };
    if (regexp.length > end+1)
      ret.flags = regexp.substr(end+1);
    return ret;
  }

  // Convenience function to return object with p1 key, value p2
  function keyValObject(key, val) {
    const ret = {};
    ret[key] = val;
    return ret;
  }

  // Return object with p1 key, p2 string value
  function unescapeSemanticAction(key, string) {
    string = string.substring(1, string.length - 2);
    return {
      type: "SemAct",
      name: key,
      code: ShExUtil.unescapeText(string, semactEscapeReplacements)
    };
  }

  function error (e, yy) {
    const hash = {
      text: yy.lexer.match,
      // token: this.terminals_[symbol] || symbol,
      line: yy.lexer.yylineno,
      loc: yy.lexer.yylloc,
      // expected: expected
      pos: yy.lexer.showPosition()
    }
    e.hash = hash;
    if (Parser.recoverable) {
      Parser.recoverable(e)
    } else {
      throw e;
      Parser.reset();
    }
  }

  // Expand declared prefix or throw Error
  function expandPrefix (prefix, yy) {
    if (!(prefix in Parser._prefixes))
      error(new Error('Parse error; unknown prefix "' + prefix + ':"'), yy);
    return Parser._prefixes[prefix];
  }

  // Add a shape to the map
  function addShape (label, shape, yy) {
    if (shape === EmptyShape)
      shape = { type: "Shape" };
    if (Parser.productions && label in Parser.productions)
      error(new Error("Structural error: "+label+" is a triple expression"), yy);
    if (!Parser.shapes)
      Parser.shapes = new Map();
    if (label in Parser.shapes) {
      if (Parser.options.duplicateShape === "replace")
        Parser.shapes[label] = shape;
      else if (Parser.options.duplicateShape !== "ignore")
        error(new Error("Parse error: "+label+" already defined"), yy);
    } else {
      Parser.shapes[label] = Object.assign({id: label}, shape);
    }
  }

  // Add a production to the map
  function addProduction (label, production, yy) {
    if (Parser.shapes && label in Parser.shapes)
      error(new Error("Structural error: "+label+" is a shape expression"), yy);
    if (!Parser.productions)
      Parser.productions = new Map();
    if (label in Parser.productions) {
      if (Parser.options.duplicateShape === "replace")
        Parser.productions[label] = production;
      else if (Parser.options.duplicateShape !== "ignore")
        error(new Error("Parse error: "+label+" already defined"), yy);
    } else
      Parser.productions[label] = production;
  }

  function addSourceMap (obj, yy) {
    if (!Parser._sourceMap)
      Parser._sourceMap = new Map();
    let list = Parser._sourceMap.get(obj)
    if (!list)
      Parser._sourceMap.set(obj, list = []);
    list.push(yy.lexer.yylloc);
    return obj;
  }

  // shapeJunction judiciously takes a shapeAtom and an optional list of con/disjuncts.
  // No created Shape{And,Or,Not} will have a \`nested\` shapeExpr.
  // Don't nonest arguments to shapeJunction.
  // shapeAtom emits \`nested\` so nonest every argument that can be a shapeAtom, i.e.
  //   shapeAtom, inlineShapeAtom, shapeAtomNoRef
  //   {,inline}shape{And,Or,Not}
  //   this does NOT include shapeOrRef or nodeConstraint.
  function shapeJunction (type, shapeAtom, juncts) {
    if (juncts.length === 0) {
      return nonest(shapeAtom);
    } else if (shapeAtom.type === type && !shapeAtom.nested) {
      nonest(shapeAtom).shapeExprs = nonest(shapeAtom).shapeExprs.concat(juncts);
      return shapeAtom;
    } else {
      return { type: type, shapeExprs: [nonest(shapeAtom)].concat(juncts) };
    }
  }

  // strip out .nested attribute
  function nonest (shapeAtom) {
    delete shapeAtom.nested;
    return shapeAtom;
  }

  const EmptyObject = {  };
  const EmptyShape = { type: "Shape" }`,
  moduleInclude: '',
  __in_rules_failure_analysis_mode__: false,
  is_custom_lexer: false,
}