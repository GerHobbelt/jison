[
  {
    id: -1,
    token: null,
    fail: 1,
    err: {
      secondary_exception: {
        hash: {
          errStr: 'Parsing aborted due to exception.',
          exception: {
            message: '$MACRO_NAME is not defined',
            name: 'ReferenceError',
          },
          text: '',
          value: '',
          token: '"$accept"',
          token_id: 0,
          line: 7,
          loc: {
            first_line: 8,
            first_column: 47,
            last_line: 8,
            last_column: 47,
            range: [
              515,
              515,
            ],
          },
          expected: null,
          recoverable: false,
          state: 89,
          action: 2,
          new_state: 9,
          symbol_stack: [],
          state_stack: [],
          value_stack: [],
          location_stack: [],
          stack_pointer: 6,
          yy: {
            actionInclude: [],
            options: {},
            startConditions: {},
            __options_flags__: 0,
            __options_category_description__: '???',
            __inside_scoped_ruleset__: false,
            __context_cfg_stack__: [],
          },
          lexer: {
            yy: {},
            __decompressed: true,
            _input: '',
            _clear_state: -1,
            _signaled_error_token: false,
            done: false,
            yylineno: 0,
            matched: '',
            conditionStack: [
              'INITIAL',
            ],
            yylloc: {
              first_line: 1,
              first_column: 0,
              last_line: 1,
              last_column: 0,
              range: [
                0,
                0,
              ],
            },
            offset: 0,
            base_position: 0,
            yytext: '',
            yyleng: 0,
            match: '',
            matches: false,
            _more: false,
            _backtrack: false,
          },
          parser: {
            yy: {},
            options: {
              type: 'lalr',
              hasPartialLrUpgradeOnConflict: true,
              errorRecoveryTokenDiscardCount: 3,
              ebnf: true,
            },
            symbols_: {
              $: 16,
              $accept: 0,
              $end: 1,
              '%%': 34,
              '(': 8,
              ')': 9,
              '*': 11,
              '+': 10,
              ',': 17,
              '.': 14,
              '/': 13,
              '/!': 42,
              '<': 3,
              '=': 18,
              '>': 6,
              '?': 12,
              ACTION_BODY: 36,
              ACTION_END: 24,
              ACTION_START: 26,
              ACTION_START_AT_SOL: 23,
              ARROW_ACTION_START: 35,
              BRACKET_MISSING: 38,
              BRACKET_SURPLUS: 39,
              CHARACTER_LIT: 51,
              DUMMY: 19,
              EOF: 1,
              ESCAPED_CHAR: 44,
              IMPORT: 29,
              INCLUDE: 31,
              INCLUDE_PLACEMENT_ERROR: 37,
              INIT_CODE: 30,
              MACRO_END: 21,
              MACRO_NAME: 20,
              NAME_BRACE: 45,
              OPTIONS: 28,
              OPTIONS_END: 22,
              OPTION_STRING: 52,
              OPTION_VALUE: 53,
              RANGE_REGEX: 49,
              REGEX_SET: 48,
              REGEX_SET_END: 47,
              REGEX_SET_START: 46,
              REGEX_SPECIAL_CHAR: 43,
              SPECIAL_GROUP: 41,
              START_EXC: 33,
              START_INC: 32,
              STRING_LIT: 50,
              TRAILING_CODE_CHUNK: 54,
              UNKNOWN_DECL: 27,
              UNTERMINATED_ACTION_BLOCK: 25,
              UNTERMINATED_STRING_ERROR: 40,
              '^': 15,
              action: 73,
              any_group_regex: 81,
              definition: 59,
              definitions: 58,
              epilogue: 90,
              epilogue_chunk: 92,
              epilogue_chunks: 91,
              err: 94,
              error: 2,
              import_keyword: 61,
              include_keyword: 63,
              include_macro_code: 93,
              init: 57,
              init_code_keyword: 62,
              lex: 55,
              literal_string: 85,
              name_expansion: 80,
              nonempty_regex_list: 77,
              option: 87,
              option_keyword: 60,
              option_list: 86,
              option_name: 88,
              option_value: 89,
              range_regex: 84,
              regex: 75,
              regex_base: 79,
              regex_concat: 78,
              regex_list: 76,
              regex_set: 82,
              regex_set_atom: 83,
              rule: 72,
              rule_block: 71,
              rules: 69,
              rules_and_epilogue: 56,
              scoped_rules_collective: 70,
              start_conditions: 74,
              start_conditions_marker: 66,
              start_epilogue_marker: 68,
              start_exclusive_keyword: 65,
              start_inclusive_keyword: 64,
              start_productions_marker: 67,
              '{': 4,
              '|': 7,
              '}': 5,
            },
            terminals_: {
              '1': 'EOF',
              '2': 'error',
              '3': '<',
              '4': '{',
              '5': '}',
              '6': '>',
              '7': '|',
              '8': '(',
              '9': ')',
              '10': '+',
              '11': '*',
              '12': '?',
              '13': '/',
              '14': '.',
              '15': '^',
              '16': '$',
              '17': ',',
              '18': '=',
              '19': 'DUMMY',
              '20': 'MACRO_NAME',
              '21': 'MACRO_END',
              '22': 'OPTIONS_END',
              '23': 'ACTION_START_AT_SOL',
              '24': 'ACTION_END',
              '25': 'UNTERMINATED_ACTION_BLOCK',
              '26': 'ACTION_START',
              '27': 'UNKNOWN_DECL',
              '28': 'OPTIONS',
              '29': 'IMPORT',
              '30': 'INIT_CODE',
              '31': 'INCLUDE',
              '32': 'START_INC',
              '33': 'START_EXC',
              '34': '%%',
              '35': 'ARROW_ACTION_START',
              '36': 'ACTION_BODY',
              '37': 'INCLUDE_PLACEMENT_ERROR',
              '38': 'BRACKET_MISSING',
              '39': 'BRACKET_SURPLUS',
              '40': 'UNTERMINATED_STRING_ERROR',
              '41': 'SPECIAL_GROUP',
              '42': '/!',
              '43': 'REGEX_SPECIAL_CHAR',
              '44': 'ESCAPED_CHAR',
              '45': 'NAME_BRACE',
              '46': 'REGEX_SET_START',
              '47': 'REGEX_SET_END',
              '48': 'REGEX_SET',
              '49': 'RANGE_REGEX',
              '50': 'STRING_LIT',
              '51': 'CHARACTER_LIT',
              '52': 'OPTION_STRING',
              '53': 'OPTION_VALUE',
              '54': 'TRAILING_CODE_CHUNK',
            },
            terminal_descriptions_: {
              '45': "macro name in '{...}' curly braces",
            },
            TERROR: 2,
            EOF: 1,
            __reentrant_call_depth: 0,
            __error_infos: [
              {
                errStr: `Parse error on line 2:
 "a" %{ ret...
-^
Unexpected "ACTION_BODY"`,
                exception: null,
                text: '"a"',
                value: '"a"',
                token: '"ACTION_BODY"',
                token_id: 36,
                line: 1,
                recoverable: true,
                state: 77,
                action: 0,
                new_state: 193,
                stack_pointer: 6,
              },
              {
                errStr: `
There's probably an error in one or more of your lexer regex rules.
Did you perhaps indent the rule regex? Note that all rule regexes
MUST start at the start of the line, i.e. text column 1. Indented text
is perceived as JavaScript action code related to the last lexer
rule regex.
    
  Erroneous code:
1: %%
2:  "a" %{ return true; %}
^...^^^
3:  "b" %{ return 1; %}
    
  Technical error report:
Parse error on line 2:
 "a" %{ ret...
-^
Unexpected "ACTION_BODY"
`,
                exception: null,
                text: '"a"',
                value: '"a"',
                token: '"$accept"',
                token_id: 0,
                line: 1,
                loc: {
                  first_line: 2,
                  first_column: 1,
                  last_line: 2,
                  last_column: 4,
                  range: [
                    4,
                    7,
                  ],
                },
                expected: [
                  'end of input',
                  '"<"',
                  '"}"',
                  '"|"',
                  '"("',
                  '"/"',
                  '"."',
                  '"^"',
                  '"$"',
                  '"ACTION_START_AT_SOL"',
                  '"UNTERMINATED_ACTION_BLOCK"',
                  '"ACTION_START"',
                  '"UNKNOWN_DECL"',
                  '"OPTIONS"',
                  '"IMPORT"',
                  '"INIT_CODE"',
                  '"START_INC"',
                  '"START_EXC"',
                  '"%%"',
                  '"SPECIAL_GROUP"',
                  '"/!"',
                  '"REGEX_SPECIAL_CHAR"',
                  '"ESCAPED_CHAR"',
                  "macro name in '{...}' curly braces",
                  '"REGEX_SET_START"',
                  '"STRING_LIT"',
                  '"CHARACTER_LIT"',
                ],
                recoverable: false,
                state: 143,
                action: 2,
                new_state: 59,
                symbol_stack: [],
                state_stack: [],
                value_stack: [],
                location_stack: [],
                stack_pointer: 7,
                yy: '[reference to sibling --> *.[0].err.secondary_exception.hash.parser.__error_infos.[1].parser.__error_recovery_infos.[0].value_stack.[7].yy]',
                lexer: '[lexer]',
                parser: '[parser]',
              },
              {
                errStr: `
The lexer rule's action code section does not compile: Line 3: Unexpected number
    
  Erroneous area:
2: "a" %{ return true; 
^......^^^^^^^^^^^^^^^^
3: "b" %{ return 1; %}
^..^^^^^^^^^^^^^^^^^^^
`,
                exception: null,
                text: '',
                value: '',
                token: '"$accept"',
                token_id: 0,
                line: 2,
                loc: {
                  first_line: 3,
                  first_column: 19,
                  last_line: 3,
                  last_column: 19,
                  range: [
                    43,
                    43,
                  ],
                },
                expected: [
                  'end of input',
                  '"<"',
                  '"}"',
                  '"|"',
                  '"("',
                  '"/"',
                  '"."',
                  '"^"',
                  '"$"',
                  '"ACTION_START_AT_SOL"',
                  '"UNTERMINATED_ACTION_BLOCK"',
                  '"ACTION_START"',
                  '"UNKNOWN_DECL"',
                  '"OPTIONS"',
                  '"IMPORT"',
                  '"INIT_CODE"',
                  '"START_INC"',
                  '"START_EXC"',
                  '"%%"',
                  '"SPECIAL_GROUP"',
                  '"/!"',
                  '"REGEX_SPECIAL_CHAR"',
                  '"ESCAPED_CHAR"',
                  "macro name in '{...}' curly braces",
                  '"REGEX_SET_START"',
                  '"STRING_LIT"',
                  '"CHARACTER_LIT"',
                ],
                recoverable: false,
                state: 187,
                action: 2,
                new_state: 49,
                symbol_stack: [],
                state_stack: [],
                value_stack: [],
                location_stack: [],
                stack_pointer: 9,
                yy: '[reference to sibling --> *.[0].err.secondary_exception.hash.parser.__error_infos.[1].parser.__error_recovery_infos.[2].yy]',
                lexer: '[lexer]',
                parser: '[parser]',
              },
              {
                errStr: `
The '%%' lexer epilogue code does not compile: Line 4: Unexpected token **
    
  Erroneous area:
4: %%
^....^
5: **This is gibberish!**
^..^^^^^^^^^^^^^^^^^^^^^^
`,
                exception: null,
                text: '',
                value: '',
                token: 'end of input',
                token_id: 1,
                line: 4,
                loc: {
                  first_line: 5,
                  first_column: 22,
                  last_line: 5,
                  last_column: 22,
                  range: [
                    71,
                    71,
                  ],
                },
                expected: [
                  'end of input',
                  '"ACTION_START_AT_SOL"',
                  '"UNTERMINATED_ACTION_BLOCK"',
                  '"TRAILING_CODE_CHUNK"',
                  '"epilogue_chunk"',
                ],
                recoverable: false,
                state: 128,
                action: 2,
                new_state: 126,
                symbol_stack: [],
                state_stack: [],
                value_stack: [],
                location_stack: [],
                stack_pointer: 7,
                yy: '[reference to sibling --> *.[0].err.secondary_exception.hash.parser.__error_infos.[1].parser.__error_recovery_infos.[3].yy]',
                lexer: '[lexer]',
                parser: '[parser]',
              },
              {
                errStr: `
\`%code\` statements must be placed in
the top section of the lexer spec file, above the first '%%'
separator. You cannot specify any in the second section as has been
done here.
    
  Erroneous code:
1: %%
2: "a" %{ return true; %}
3: "b" %{ return 1; %}
4: %code bugger %{ **This is gibberish!** %}
^..^^^^^
`,
                exception: null,
                text: '%code',
                value: '%code',
                token: '"$accept"',
                token_id: 0,
                line: 3,
                loc: {
                  first_line: 4,
                  first_column: 0,
                  last_line: 4,
                  last_column: 5,
                  range: [
                    46,
                    51,
                  ],
                },
                expected: [
                  'end of input',
                  '"<"',
                  '"}"',
                  '"|"',
                  '"("',
                  '"/"',
                  '"."',
                  '"^"',
                  '"$"',
                  '"ACTION_START_AT_SOL"',
                  '"UNTERMINATED_ACTION_BLOCK"',
                  '"ACTION_START"',
                  '"UNKNOWN_DECL"',
                  '"OPTIONS"',
                  '"IMPORT"',
                  '"INIT_CODE"',
                  '"START_INC"',
                  '"START_EXC"',
                  '"%%"',
                  '"SPECIAL_GROUP"',
                  '"/!"',
                  '"REGEX_SPECIAL_CHAR"',
                  '"ESCAPED_CHAR"',
                  "macro name in '{...}' curly braces",
                  '"REGEX_SET_START"',
                  '"STRING_LIT"',
                  '"CHARACTER_LIT"',
                ],
                recoverable: false,
                state: 83,
                action: 2,
                new_state: 65,
                symbol_stack: [],
                state_stack: [],
                value_stack: [],
                location_stack: [],
                stack_pointer: 6,
                yy: '[reference to sibling --> *.[0].err.secondary_exception.hash.parser.__error_infos.[1].parser.__error_recovery_infos.[4].yy]',
                lexer: '[lexer]',
                parser: '[parser]',
              },
              {
                errStr: `
Expected a valid name/argument (with optional value assignment) in a %option statement.
Entries (names) must look like regular programming language
identifiers, with the addition that option names MAY contain
'-' dashes, e.g. 'example-option-1'.
    
Suggested name:
    _8bit
    
  Erroneous area:
20: */
21: 
22: 
23: %option 8bit
^^..........^^^^
24: %option case-insensitive
25: %option never-interactive
`,
                exception: null,
                text: '8bit',
                value: '8bit',
                token: '"$accept"',
                token_id: 0,
                line: 22,
                loc: {
                  first_line: 23,
                  first_column: 8,
                  last_line: 23,
                  last_column: 12,
                  range: [
                    835,
                    839,
                  ],
                },
                expected: [
                  '"*"',
                  '","',
                  '"="',
                  '"OPTIONS_END"',
                  '"ACTION_START"',
                  '"OPTION_STRING"',
                  '"OPTION_VALUE"',
                ],
                recoverable: false,
                state: 54,
                action: 2,
                new_state: 120,
                symbol_stack: [],
                state_stack: [],
                value_stack: [],
                location_stack: [],
                stack_pointer: 5,
                yy: '[reference to sibling --> *.[0].err.secondary_exception.hash.parser.__error_infos.[1].parser.__error_recovery_infos.[5].yy]',
                lexer: '[lexer]',
                parser: '[parser]',
              },
              {
                errStr: `
Expected a valid name/argument (with optional value assignment) in a %option statement.
Entries (names) must look like regular programming language
identifiers, with the addition that option names MAY contain
'-' dashes, e.g. 'example-option-1'.
    
Suggested name:
    _8bit
    
  Erroneous area:
20: */
21: 
22: 
23: %option 8bit
^^..........^^^^
24: %option case-insensitive
25: %option never-interactive
`,
                exception: null,
                text: '8bit',
                value: '8bit',
                token: '"$accept"',
                token_id: 0,
                line: 22,
                loc: {
                  first_line: 23,
                  first_column: 8,
                  last_line: 23,
                  last_column: 12,
                  range: [
                    836,
                    840,
                  ],
                },
                expected: [
                  '"*"',
                  '","',
                  '"="',
                  '"OPTIONS_END"',
                  '"ACTION_START"',
                  '"OPTION_STRING"',
                  '"OPTION_VALUE"',
                ],
                recoverable: false,
                state: 54,
                action: 2,
                new_state: 120,
                symbol_stack: [],
                state_stack: [],
                value_stack: [],
                location_stack: [],
                stack_pointer: 5,
                yy: '[reference to sibling --> *.[0].err.secondary_exception.hash.parser.__error_infos.[1].parser.__error_recovery_infos.[6].yy]',
                lexer: '[lexer]',
                parser: '[parser]',
              },
              {
                errStr: `Parse error on line 25:
"\\"(?:{esc}[\\"bfnrt/{esc}]|{esc}u[a-fA-F0-9]{4}|[^\\"{esc}])*\\"", "yytext ...
---------------------------------------------------------------^
Expecting "|", "(", ")", "+", "*", "?", "/", ".", "^", "$", "MACRO_END", "ACTION_START_AT_SOL", "ACTION_START", "ARROW_ACTION_START", "SPECIAL_GROUP", "/!", "REGEX_SPECIAL_CHAR", "ESCAPED_CHAR", macro name in '{...}' curly braces, "REGEX_SET_START", "RANGE_REGEX", "STRING_LIT", "CHARACTER_LIT", "range_regex", got unexpected ","`,
                exception: null,
                text: ',',
                value: ',',
                token: '","',
                token_id: 17,
                line: 24,
                recoverable: true,
                state: 33,
                action: 0,
                new_state: 193,
                stack_pointer: 6,
              },
              {
                errStr: `
Lexer rule regex action code declaration error?
    
  Erroneous code:
25: "\\"(?:{esc}[\\"bfnrt/{esc}]|{esc}u[a-fA-F0-9]{4}|[^\\"{esc}])*\\"", "yytext = yytext.substr(1,yyleng-2); return 'STRING';"
^^.................................................................^
26: 
27: '/'                             return '/'
    
  Technical error report:
Parse error on line 25:
"\\"(?:{esc}[\\"bfnrt/{esc}]|{esc}u[a-fA-F0-9]{4}|[^\\"{esc}])*\\"", "yytext ...
---------------------------------------------------------------^
Expecting "|", "(", ")", "+", "*", "?", "/", ".", "^", "$", "MACRO_END", "ACTION_START_AT_SOL", "ACTION_START", "ARROW_ACTION_START", "SPECIAL_GROUP", "/!", "REGEX_SPECIAL_CHAR", "ESCAPED_CHAR", macro name in '{...}' curly braces, "REGEX_SET_START", "RANGE_REGEX", "STRING_LIT", "CHARACTER_LIT", "range_regex", got unexpected ","
`,
                exception: null,
                text: ',',
                value: ',',
                token: '"$accept"',
                token_id: 0,
                line: 24,
                loc: {
                  first_line: 25,
                  first_column: 63,
                  last_line: 25,
                  last_column: 64,
                  range: [
                    776,
                    777,
                  ],
                },
                expected: [
                  'end of input',
                  '"<"',
                  '"}"',
                  '"|"',
                  '"("',
                  '"/"',
                  '"."',
                  '"^"',
                  '"$"',
                  '"ACTION_START_AT_SOL"',
                  '"UNTERMINATED_ACTION_BLOCK"',
                  '"ACTION_START"',
                  '"UNKNOWN_DECL"',
                  '"OPTIONS"',
                  '"IMPORT"',
                  '"INIT_CODE"',
                  '"START_INC"',
                  '"START_EXC"',
                  '"%%"',
                  '"SPECIAL_GROUP"',
                  '"/!"',
                  '"REGEX_SPECIAL_CHAR"',
                  '"ESCAPED_CHAR"',
                  "macro name in '{...}' curly braces",
                  '"REGEX_SET_START"',
                  '"STRING_LIT"',
                  '"CHARACTER_LIT"',
                ],
                recoverable: false,
                state: 140,
                action: 2,
                new_state: 55,
                symbol_stack: [],
                state_stack: [],
                value_stack: [],
                location_stack: [],
                stack_pointer: 7,
                yy: '[reference to sibling --> *.[0].err.secondary_exception.hash.parser.__error_infos.[1].parser.__error_recovery_infos.[7].value_stack.[10].yy]',
                lexer: '[lexer]',
                parser: '[parser]',
              },
              {
                errStr: 'Parsing aborted due to exception.',
                exception: {
                  message: '$MACRO_NAME is not defined',
                  name: 'ReferenceError',
                  stack: `ReferenceError: $MACRO_NAME is not defined
    at Object.parser__PerformAction (/regexp-lexer-cjs.js:3039:34)
    at Object.parse (/regexp-lexer-cjs.js:8438:24)
    at Object.yyparse [as parse] (/regexp-lexer-cjs.js:12095:25)
    at autodetectAndConvertToJSONformat (/regexp-lexer-cjs.js:13288:35)
    at processGrammar (/regexp-lexer-cjs.js:16345:12)
    at test_me (/regexp-lexer-cjs.js:14269:23)
    at new RegExpLexer (/regexp-lexer-cjs.js:14387:17)
    at Context.testEachLexerExample (/regexplexer.js:3685:25)
    at callFn (/runnable.js:364:21)
    at Test.Runnable.run (/runnable.js:352:5)
    at Runner.runTest (/runner.js:677:10)
    at /runner.js:801:12
    at next (/runner.js:594:14)
    at /runner.js:604:7
    at next (/runner.js:486:14)
    at cbHookRun (/runner.js:551:7)
    at done (/runnable.js:308:5)
    at callFn (/runnable.js:387:7)
    at Hook.Runnable.run (/runnable.js:352:5)
    at next (/runner.js:510:10)
    at Immediate._onImmediate (/runner.js:572:5)
    at processImmediate (/timers.js:456:21)`,
                },
                text: '',
                value: '',
                token: '"$accept"',
                token_id: 0,
                line: 7,
                loc: {
                  first_line: 8,
                  first_column: 47,
                  last_line: 8,
                  last_column: 47,
                  range: [
                    515,
                    515,
                  ],
                },
                expected: null,
                recoverable: false,
                state: 89,
                action: 2,
                new_state: 9,
                symbol_stack: [],
                state_stack: [],
                value_stack: [],
                location_stack: [],
                stack_pointer: 6,
                yy: {
                  actionInclude: [],
                  options: {},
                  startConditions: {},
                  __options_flags__: 0,
                  __options_category_description__: '???',
                  __inside_scoped_ruleset__: false,
                  __context_cfg_stack__: [],
                },
                lexer: '[lexer]',
                parser: '[parser]',
              },
            ],
            __error_recovery_infos: '[reference to sibling array --> *.[0].err.secondary_exception.hash.parser.__error_infos.[1].parser.__error_recovery_infos, length = 9]',
            lexer: {
              EOF: 1,
              ERROR: 2,
              __error_infos: '[reference to sibling array --> *.[0].err.secondary_exception.hash.parser.__error_infos.[1].parser.lexer.__error_infos, length = 2]',
              __decompressed: false,
              done: false,
              _backtrack: false,
              _input: '',
              _more: false,
              _signaled_error_token: false,
              _clear_state: 0,
              conditionStack: [],
              match: '',
              matched: '',
              matches: false,
              yytext: '',
              offset: 0,
              base_position: 0,
              yyleng: 0,
              yylineno: 0,
              yylloc: null,
              CRLF_Re: {
                re: '/\\r\\n?|\\n/',
                source: '\\r\\n?|\\n',
                flags: '',
              },
              options: {
                xregexp: true,
                ranges: true,
                trackPosition: true,
                easy_keyword_rules: true,
              },
            },
            __lexer__: {
              yy: {},
              __decompressed: true,
              _input: '',
              _clear_state: -1,
              _signaled_error_token: false,
              done: false,
              yylineno: 0,
              matched: '',
              conditionStack: [
                'INITIAL',
              ],
              __currentRuleSet__: null,
              yylloc: {
                first_line: 1,
                first_column: 0,
                last_line: 1,
                last_column: 0,
                range: [
                  0,
                  0,
                ],
              },
              offset: 0,
              base_position: 0,
              yytext: '',
              yyleng: 0,
              match: '',
              matches: false,
              _more: false,
              _backtrack: false,
            },
          },
        },
        message: '$MACRO_NAME is not defined',
        name: 'JisonParserError',
        stack: `ReferenceError: $MACRO_NAME is not defined
    at Object.parser__PerformAction (/regexp-lexer-cjs.js:3039:34)
    at Object.parse (/regexp-lexer-cjs.js:8438:24)
    at Object.yyparse [as parse] (/regexp-lexer-cjs.js:12095:25)
    at autodetectAndConvertToJSONformat (/regexp-lexer-cjs.js:13288:35)
    at processGrammar (/regexp-lexer-cjs.js:16345:12)
    at test_me (/regexp-lexer-cjs.js:14269:23)
    at new RegExpLexer (/regexp-lexer-cjs.js:14387:17)
    at Context.testEachLexerExample (/regexplexer.js:3685:25)
    at callFn (/runnable.js:364:21)
    at Test.Runnable.run (/runnable.js:352:5)
    at Runner.runTest (/runner.js:677:10)
    at /runner.js:801:12
    at next (/runner.js:594:14)
    at /runner.js:604:7
    at next (/runner.js:486:14)
    at cbHookRun (/runner.js:551:7)
    at done (/runnable.js:308:5)
    at callFn (/runnable.js:387:7)
    at Hook.Runnable.run (/runnable.js:352:5)
    at next (/runner.js:510:10)
    at Immediate._onImmediate (/runner.js:572:5)
    at processImmediate (/timers.js:456:21)`,
      },
      message: `Could not parse jison lexer spec in JSON AUTODETECT mode:
in JISON Mode we get Error: $MACRO_NAME is not defined

while JSON5 Mode produces Error: JSON5: invalid character 'D' at 2:1`,
      name: 'Error',
      stack: `SyntaxError: JSON5: invalid character 'D' at 2:1
    at syntaxError (/index.js:1954:16)
    at invalidChar (/index.js:1895:13)
    at Object.value (/index.js:964:16)
    at lex (/index.js:743:41)
    at Object.parse (/index.js:689:18)
    at autodetectAndConvertToJSONformat (/regexp-lexer-cjs.js:13272:51)
    at processGrammar (/regexp-lexer-cjs.js:16345:12)
    at test_me (/regexp-lexer-cjs.js:14269:23)
    at new RegExpLexer (/regexp-lexer-cjs.js:14387:17)
    at Context.testEachLexerExample (/regexplexer.js:3685:25)
    at callFn (/runnable.js:364:21)
    at Test.Runnable.run (/runnable.js:352:5)
    at Runner.runTest (/runner.js:677:10)
    at /runner.js:801:12
    at next (/runner.js:594:14)
    at /runner.js:604:7
    at next (/runner.js:486:14)
    at cbHookRun (/runner.js:551:7)
    at done (/runnable.js:308:5)
    at callFn (/runnable.js:387:7)
    at Hook.Runnable.run (/runnable.js:352:5)
    at next (/runner.js:510:10)
    at Immediate._onImmediate (/runner.js:572:5)
    at processImmediate (/timers.js:456:21)`,
    },
  },
  {
    id: -2,
    token: null,
    summary: {
      totalTokenCount: 1,
      EOFTokenCount: 0,
      ERRORTokenCount: 0,
      ParseErrorCallCount: 0,
      fatalExceptionCount: 1,
    },
  },
]