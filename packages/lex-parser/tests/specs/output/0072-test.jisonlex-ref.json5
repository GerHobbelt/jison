/* 
 * grammar spec generated by @gerhobbelt/lex-parser for input file:
 *     :/0072-test.jisonlex
 */

{
  id: -1,
  token: null,
  fail: 1,
  spec: `//
// title: test braced action with surplus whitespace between rules
// test_input: 'ababbaab'
//
// ...
//

%%
"a" %{  //
return true;
%}  //
  //
"b" %{    return 11;
%}  //
  //

`,
  err: {
    name: 'JisonParserError',
    hash: {
      errStr: `
There's probably an error in one or more of your lexer regex rules.
    
Did you perhaps indent the rule regex? 
    
Note that all rule regexes MUST start at the start of the line, 
i.e. text column 1. 
Indented text is perceived as JavaScript action code related to the last 
lexer rule regex.
    
  Erroneous code:
 8: %%
 9: "a" %{  //
10: return true;
11: %}  //
^^......^^
12:   //
13: "b" %{    return 11;
    
  Technical error report:
Parse error on line 11:
%}  //
----^
Unexpected "ACTION_BODY"
`,
      exception: null,
      text: '//',
      value: '//',
      token: '"$accept"',
      token_id: 0,
      line: 10,
      recoverable: false,
      state: 156,
      action: 2,
      new_state: 59,
      stack_pointer: 7,
    },
    message: `
There's probably an error in one or more of your lexer regex rules.
    
Did you perhaps indent the rule regex? 
    
Note that all rule regexes MUST start at the start of the line, 
i.e. text column 1. 
Indented text is perceived as JavaScript action code related to the last 
lexer rule regex.
    
  Erroneous code:
 8: %%
 9: "a" %{  //
10: return true;
11: %}  //
^^......^^
12:   //
13: "b" %{    return 11;
    
  Technical error report:
Parse error on line 11:
%}  //
----^
Unexpected "ACTION_BODY"
`,
    stack: `JisonParserError: 
There's probably an error in one or more of your lexer regex rules.
    
Did you perhaps indent the rule regex? 
    
Note that all rule regexes MUST start at the start of the line, 
i.e. text column 1. 
Indented text is perceived as JavaScript action code related to the last 
lexer rule regex.
    
  Erroneous code:
 8: %%
 9: "a" %{  //
10: return true;
11: %}  //
^^......^^
12:   //
13: "b" %{    return 11;
    
  Technical error report:
Parse error on line 11:
%}  //
----^
Unexpected "ACTION_BODY"

    at Object.parseError (/lex-parser-cjs.js:8009:15)
    at Object.yyError (/lex-parser-cjs.js:8194:25)
    at Object.parser__PerformAction (/lex-parser-cjs.js:4877:18)
    at Object.parse (/lex-parser-cjs.js:9263:24)
    at Object.yyparse [as parse] (/lex-parser-cjs.js:13065:25)
    at Context.testEachParserExample (/all-tests.js:356:27)
    at callFn (/runnable.js:364:21)
    at Test.Runnable.run (/runnable.js:352:5)
    at Runner.runTest (/runner.js:677:10)
    at /runner.js:801:12
    at next (/runner.js:594:14)
    at /runner.js:604:7
    at next (/runner.js:486:14)
    at cbHookRun (/runner.js:551:7)
    at done (/runnable.js:308:5)
    at callFn (/runnable.js:387:7)
    at Hook.Runnable.run (/runnable.js:352:5)
    at next (/runner.js:510:10)
    at Immediate._onImmediate (/runner.js:572:5)
    at processImmediate (/timers.js:456:21)`,
  },
  __extra_diag_info__: {
    pre_parse_callback_callCount: 1,
    post_parse_callback_callCount: 1,
    post_parse_diaginfo: {
      sharedState_yy: {
        actionInclude: [],
        options: {},
        startConditions: {},
        __options_flags__: 0,
        __options_category_description__: 'the lexer rules definition section',
        __inside_scoped_ruleset__: false,
        __context_cfg_stack__: [
          {
            flags: 0,
            descr: '???',
            scoped: false,
          },
        ],
        depth: 0,
        include_command_allowed: false,
      },
      hash: {
        errStr: null,
        exception: null,
        text: '//',
        value: '//',
        token: '"$accept"',
        token_id: 0,
        line: 10,
        expected: null,
        recoverable: false,
        state: 156,
        action: 2,
        new_state: 59,
        stack_pointer: 7,
      },
      reentrant_call_depth: 1,
      error_infos_stack: [
        {
          errStr: `Parse error on line 11:
%}  //
----^
Unexpected "ACTION_BODY"`,
          exception: null,
          text: '//',
          value: '//',
          token: '"ACTION_BODY"',
          token_id: 38,
          line: 10,
          recoverable: true,
          state: 82,
          action: 0,
          new_state: 201,
          stack_pointer: 6,
          errorRuleDepth: 0,
        },
        {
          errStr: `
There's probably an error in one or more of your lexer regex rules.
    
Did you perhaps indent the rule regex? 
    
Note that all rule regexes MUST start at the start of the line, 
i.e. text column 1. 
Indented text is perceived as JavaScript action code related to the last 
lexer rule regex.
    
  Erroneous code:
 8: %%
 9: "a" %{  //
10: return true;
11: %}  //
^^......^^
12:   //
13: "b" %{    return 11;
    
  Technical error report:
Parse error on line 11:
%}  //
----^
Unexpected "ACTION_BODY"
`,
          exception: null,
          text: '//',
          value: '//',
          token: '"$accept"',
          token_id: 0,
          line: 10,
          recoverable: false,
          state: 156,
          action: 2,
          new_state: 59,
          stack_pointer: 7,
        },
        {
          errStr: null,
          exception: null,
          text: '//',
          value: '//',
          token: '"$accept"',
          token_id: 0,
          line: 10,
          expected: null,
          recoverable: false,
          state: 156,
          action: 2,
          new_state: 59,
          stack_pointer: 7,
        },
      ],
      error_recovery_stack: [
        {
          errStr: `Parse error on line 11:
%}  //
----^
Unexpected "ACTION_BODY"`,
          exception: null,
          text: '//',
          value: '//',
          token: '"ACTION_BODY"',
          token_id: 38,
          line: 10,
          recoverable: true,
          state: 82,
          action: 0,
          new_state: 201,
          stack_pointer: 6,
          base_pointer: 7,
          info_stack_pointer: 10,
          root_failure_pointer: 6,
        },
        {
          errStr: `
There's probably an error in one or more of your lexer regex rules.
    
Did you perhaps indent the rule regex? 
    
Note that all rule regexes MUST start at the start of the line, 
i.e. text column 1. 
Indented text is perceived as JavaScript action code related to the last 
lexer rule regex.
    
  Erroneous code:
 8: %%
 9: "a" %{  //
10: return true;
11: %}  //
^^......^^
12:   //
13: "b" %{    return 11;
    
  Technical error report:
Parse error on line 11:
%}  //
----^
Unexpected "ACTION_BODY"
`,
          exception: null,
          text: '//',
          value: '//',
          token: '"$accept"',
          token_id: 0,
          line: 10,
          recoverable: false,
          state: 156,
          action: 2,
          new_state: 59,
          stack_pointer: 7,
          base_pointer: 7,
          info_stack_pointer: 7,
          root_failure_pointer: 7,
          yyError: true,
          errorRuleDepth: -1,
          recovering: 3,
        },
      ],
      error_infos_stack_size: 3,
      error_recovery_stack_size: 2,
    },
    reentrant_call_depth: 0,
    error_infos_stack_size: 0,
    error_recovery_stack_size: 0,
  },
  __original_input__: `//
// title: test braced action with surplus whitespace between rules
// test_input: 'ababbaab'
//
// ...
//

%%
"a" %{  //
return true;
%}  //
  //
"b" %{    return 11;
%}  //
  //

`,
}