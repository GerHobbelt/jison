[
  {
    id: 34,
    token: '"%%"',
    yytext: '%%',
    yylloc: {
      first_line: 1,
      first_column: 0,
      last_line: 1,
      last_column: 2,
      range: [
        0,
        2,
      ],
    },
  },
  {
    id: 51,
    token: '"STRING_LIT"',
    yytext: '"["',
    yylloc: {
      first_line: 2,
      first_column: 0,
      last_line: 2,
      last_column: 3,
      range: [
        3,
        6,
      ],
    },
  },
  {
    id: 46,
    token: '"REGEX_SET_START"',
    yytext: '[',
    yylloc: {
      first_line: 2,
      first_column: 3,
      last_line: 2,
      last_column: 4,
      range: [
        6,
        7,
      ],
    },
  },
  {
    id: 49,
    token: '"REGEX_SET"',
    yytext: 'abc',
    yylloc: {
      first_line: 2,
      first_column: 4,
      last_line: 2,
      last_column: 7,
      range: [
        7,
        10,
      ],
    },
  },
  {
    id: 48,
    token: '"UNTERMINATED_REGEX_SET"',
    yytext: {
      errStr: `Lexical error on line 2: 
regex [...] sets cannot span multiple lines.

If you want a CR/LF to be part of a regex set, you can simply
specify those as character escapes '\\r' and '\\n'.

  Erroneous area:
1: %%
2: "["[abc
^.........^
3: def]"]" -> 'BAD_REGEX'
4: 
`,
      recoverable: false,
      text: '',
      token: null,
      line: 1,
      loc: {
        first_line: 2,
        first_column: 7,
        last_line: 2,
        last_column: 7,
        range: [
          10,
          10,
        ],
      },
      yy: {},
      lexer: {
        EOF: 1,
        ERROR: 2,
        __error_infos: [
          {
            errStr: `Lexical error on line 2: 
regex [...] sets cannot span multiple lines.

If you want a CR/LF to be part of a regex set, you can simply
specify those as character escapes '\\r' and '\\n'.

  Erroneous area:
1: %%
2: "["[abc
^.........^
3: def]"]" -> 'BAD_REGEX'
4: 
`,
            recoverable: false,
            text: '',
            token: null,
            line: 1,
            loc: {
              first_line: 2,
              first_column: 7,
              last_line: 2,
              last_column: 7,
              range: [
                10,
                10,
              ],
            },
            yy: {
              depth: 0,
              include_command_allowed: false,
            },
            lexer: '[lexer]',
          },
          {
            errStr: `Lexical error on line 3: 
unsupported lexer input encountered while lexing
rules (i.e. jison lex regexes) in "rules" state.

    NOTE: When you want this input to be interpreted as a LITERAL part
          of a lex rule regex, you MUST enclose it in double or
          single quotes.

          If not, then know that this input is not accepted as a valid
          regex expression here in jison-lex rules.

  Erroneous area:
1: %%
2: "["[abc
3: def]"]" -> 'BAD_REGEX'
^.....^
4: 
5: 
`,
            recoverable: false,
            text: ']',
            token: null,
            line: 2,
            loc: {
              first_line: 3,
              first_column: 3,
              last_line: 3,
              last_column: 4,
              range: [
                14,
                15,
              ],
            },
            yy: '[reference to sibling --> *.[4].yytext.lexer.__error_infos.[0].yy]',
            lexer: '[lexer]',
          },
        ],
        __decompressed: true,
        done: true,
        _backtrack: false,
        _input: '',
        _more: false,
        _signaled_error_token: false,
        _clear_state: 0,
        conditionStack: [
          'INITIAL',
          'code',
        ],
        match: '',
        matched: `%%
"["[abc
def]"]" -> 'BAD_REGEX'

`,
        matches: false,
        yytext: '',
        offset: 35,
        base_position: 0,
        yyleng: 0,
        yylineno: 4,
        yylloc: {
          first_line: 5,
          first_column: 0,
          last_line: 5,
          last_column: 0,
          range: [
            35,
            35,
          ],
        },
        CRLF_Re: {
          re: '/\\r\\n?|\\n/',
          source: '\\r\\n?|\\n',
          flags: '',
        },
        options: {
          xregexp: true,
          ranges: true,
          trackPosition: true,
          easy_keyword_rules: true,
        },
        yy: {
          depth: 0,
          include_command_allowed: false,
        },
      },
      errorDiag: {
        inputPos: 25,
        yytext: '',
        yyleng: 0,
        matches: [
          '\n',
          '\n',
        ],
        activeCondition: 'rules',
        conditionStackDepth: 2,
      },
    },
    yylloc: '[reference to sibling --> *.[4].yytext.lexer.__error_infos.[0].loc]',
  },
  {
    id: 52,
    token: '"CHARACTER_LIT"',
    yytext: 'def',
    yylloc: {
      first_line: 3,
      first_column: 0,
      last_line: 3,
      last_column: 3,
      range: [
        11,
        14,
      ],
    },
  },
  {
    id: 2,
    token: '"error"',
    yytext: {
      errStr: `Lexical error on line 3: 
unsupported lexer input encountered while lexing
rules (i.e. jison lex regexes) in "rules" state.

    NOTE: When you want this input to be interpreted as a LITERAL part
          of a lex rule regex, you MUST enclose it in double or
          single quotes.

          If not, then know that this input is not accepted as a valid
          regex expression here in jison-lex rules.

  Erroneous area:
1: %%
2: "["[abc
3: def]"]" -> 'BAD_REGEX'
^.....^
4: 
5: 
`,
      recoverable: false,
      text: ']',
      token: null,
      line: 2,
      loc: {
        first_line: 3,
        first_column: 3,
        last_line: 3,
        last_column: 4,
        range: [
          14,
          15,
        ],
      },
      yy: {},
      lexer: {
        EOF: 1,
        ERROR: 2,
        __error_infos: '[reference to sibling array --> *.[4].yytext.lexer.__error_infos, length = 2]',
        __decompressed: true,
        done: true,
        _backtrack: false,
        _input: '',
        _more: false,
        _signaled_error_token: false,
        _clear_state: 0,
        conditionStack: [
          'INITIAL',
          'code',
        ],
        match: '',
        matched: `%%
"["[abc
def]"]" -> 'BAD_REGEX'

`,
        matches: false,
        yytext: '',
        offset: 35,
        base_position: 0,
        yyleng: 0,
        yylineno: 4,
        yylloc: {
          first_line: 5,
          first_column: 0,
          last_line: 5,
          last_column: 0,
          range: [
            35,
            35,
          ],
        },
        CRLF_Re: {
          re: '/\\r\\n?|\\n/',
          source: '\\r\\n?|\\n',
          flags: '',
        },
        options: {
          xregexp: true,
          ranges: true,
          trackPosition: true,
          easy_keyword_rules: true,
        },
        yy: {
          depth: 0,
          include_command_allowed: false,
        },
      },
      errorDiag: {
        inputPos: 20,
        yytext: ']',
        yyleng: 1,
        matches: [
          ']',
        ],
        activeCondition: 'rules',
        conditionStackDepth: 2,
      },
    },
    yylloc: '[reference to sibling --> *.[4].yytext.lexer.__error_infos.[1].loc]',
  },
  {
    id: 51,
    token: '"STRING_LIT"',
    yytext: '"]"',
    yylloc: {
      first_line: 3,
      first_column: 4,
      last_line: 3,
      last_column: 7,
      range: [
        15,
        18,
      ],
    },
  },
  {
    id: 35,
    token: '"ARROW_ACTION_START"',
    yytext: '->',
    yylloc: {
      first_line: 3,
      first_column: 8,
      last_line: 3,
      last_column: 10,
      range: [
        19,
        21,
      ],
    },
  },
  {
    id: 36,
    token: '"ACTION_BODY"',
    yytext: ' ',
    yylloc: {
      first_line: 3,
      first_column: 10,
      last_line: 3,
      last_column: 11,
      range: [
        21,
        22,
      ],
    },
  },
  {
    id: 36,
    token: '"ACTION_BODY"',
    yytext: "'BAD_REGEX'",
    yylloc: {
      first_line: 3,
      first_column: 11,
      last_line: 3,
      last_column: 22,
      range: [
        22,
        33,
      ],
    },
  },
  {
    id: 24,
    token: '"ACTION_END"',
    yytext: '',
    yylloc: {
      first_line: 3,
      first_column: 22,
      last_line: 3,
      last_column: 22,
      range: [
        33,
        33,
      ],
    },
  },
  {
    id: 34,
    token: '"%%"',
    yytext: '',
    yylloc: {
      first_line: 5,
      first_column: 0,
      last_line: 5,
      last_column: 0,
      range: [
        35,
        35,
      ],
    },
  },
  {
    id: 1,
    token: 'end of input',
    yytext: '',
    yylloc: {
      first_line: 5,
      first_column: 0,
      last_line: 5,
      last_column: 0,
      range: [
        35,
        35,
      ],
    },
  },
  {
    id: 1,
    token: 'end of input',
    yytext: '',
    yylloc: {
      first_line: 5,
      first_column: 0,
      last_line: 5,
      last_column: 0,
      range: [
        35,
        35,
      ],
    },
  },
  {
    id: 1,
    token: 'end of input',
    yytext: '',
    yylloc: {
      first_line: 5,
      first_column: 0,
      last_line: 5,
      last_column: 0,
      range: [
        35,
        35,
      ],
    },
  },
  {
    id: 1,
    token: 'end of input',
    yytext: '',
    yylloc: {
      first_line: 5,
      first_column: 0,
      last_line: 5,
      last_column: 0,
      range: [
        35,
        35,
      ],
    },
  },
  {
    id: -2,
    token: null,
    summary: {
      totalTokenCount: 17,
      EOFTokenCount: 4,
      ERRORTokenCount: 1,
      ParseErrorCallCount: 2,
      DetectedParseErrorCallCount: 0,
      fatalExceptionCount: 0,
    },
  },
]