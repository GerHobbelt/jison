[
  {
    id: 34,
    token: '"%%"',
    yytext: '%%',
    yylloc: {
      first_line: 1,
      first_column: 0,
      last_line: 1,
      last_column: 2,
      range: [
        0,
        2,
      ],
    },
  },
  {
    id: 51,
    token: '"STRING_LIT"',
    yytext: '"["',
    yylloc: {
      first_line: 2,
      first_column: 0,
      last_line: 2,
      last_column: 3,
      range: [
        3,
        6,
      ],
    },
  },
  {
    id: 46,
    token: '"REGEX_SET_START"',
    yytext: '[',
    yylloc: {
      first_line: 2,
      first_column: 3,
      last_line: 2,
      last_column: 4,
      range: [
        6,
        7,
      ],
    },
  },
  {
    id: 49,
    token: '"REGEX_SET"',
    yytext: '^\\\\',
    yylloc: {
      first_line: 2,
      first_column: 4,
      last_line: 2,
      last_column: 7,
      range: [
        7,
        10,
      ],
    },
  },
  {
    id: 47,
    token: '"REGEX_SET_END"',
    yytext: ']',
    yylloc: {
      first_line: 2,
      first_column: 7,
      last_line: 2,
      last_column: 8,
      range: [
        10,
        11,
      ],
    },
  },
  {
    id: 2,
    token: '"error"',
    yytext: {
      orig: ']',
      errorDiag: {
        inputPos: 20,
        yytext: ']',
        yyleng: 1,
        matches: [
          ']',
        ],
        activeCondition: 'rules',
        conditionStackDepth: 2,
        hash: {
          errStr: `Lexical error on line 2: 
unsupported lexer input encountered while lexing
rules (i.e. jison lex regexes) in "rules" state.

    NOTE: When you want this input to be interpreted as a LITERAL part
          of a lex rule regex, you MUST enclose it in double or
          single quotes.

          If not, then know that this input is not accepted as a valid
          regex expression here in jison-lex rules.

  Erroneous area:
1: %%
2: "["[^\\\\]]"]" -> 'BAD_REGEX'
^..........^
3: 
4: 
`,
          recoverable: false,
          text: ']',
          token: null,
          line: 1,
          loc: {
            first_line: 2,
            first_column: 8,
            last_line: 2,
            last_column: 9,
            range: [
              11,
              12,
            ],
          },
          yy: {
            depth: 0,
            include_command_allowed: false,
          },
          lexer: {
            EOF: 1,
            ERROR: 2,
            __error_infos: [
              {
                errStr: `Lexical error on line 2: 
unsupported lexer input encountered while lexing
rules (i.e. jison lex regexes) in "rules" state.

    NOTE: When you want this input to be interpreted as a LITERAL part
          of a lex rule regex, you MUST enclose it in double or
          single quotes.

          If not, then know that this input is not accepted as a valid
          regex expression here in jison-lex rules.

  Erroneous area:
1: %%
2: "["[^\\\\]]"]" -> 'BAD_REGEX'
^..........^
3: 
4: 
`,
                recoverable: false,
                text: ']',
                token: null,
                line: 1,
                loc: {
                  first_line: 2,
                  first_column: 8,
                  last_line: 2,
                  last_column: 9,
                  range: [
                    11,
                    12,
                  ],
                },
                yy: {
                  depth: 0,
                  include_command_allowed: false,
                },
                lexer: '[lexer]',
              },
            ],
            __decompressed: true,
            done: true,
            _backtrack: false,
            _input: '',
            _more: false,
            _signaled_error_token: false,
            _clear_state: 0,
            conditionStack: [
              'INITIAL',
              'code',
            ],
            match: '',
            matched: `%%
"["[^\\\\]]"]" -> 'BAD_REGEX'

`,
            matches: false,
            yytext: '',
            offset: 32,
            base_position: 0,
            yyleng: 0,
            yylineno: 3,
            yylloc: {
              first_line: 4,
              first_column: 0,
              last_line: 4,
              last_column: 0,
              range: [
                32,
                32,
              ],
            },
            CRLF_Re: {
              re: '/\\r\\n?|\\n/',
              source: '\\r\\n?|\\n',
              flags: '',
            },
            options: {
              xregexp: true,
              ranges: true,
              trackPosition: true,
              easy_keyword_rules: true,
            },
            yy: {
              depth: 0,
              include_command_allowed: false,
            },
          },
        },
      },
    },
    yylloc: '[reference to sibling --> *.[5].yytext.errorDiag.hash.lexer.__error_infos.[0].loc]',
  },
  {
    id: 51,
    token: '"STRING_LIT"',
    yytext: '"]"',
    yylloc: {
      first_line: 2,
      first_column: 9,
      last_line: 2,
      last_column: 12,
      range: [
        12,
        15,
      ],
    },
  },
  {
    id: 35,
    token: '"ARROW_ACTION_START"',
    yytext: '->',
    yylloc: {
      first_line: 2,
      first_column: 13,
      last_line: 2,
      last_column: 15,
      range: [
        16,
        18,
      ],
    },
  },
  {
    id: 36,
    token: '"ACTION_BODY"',
    yytext: ' ',
    yylloc: {
      first_line: 2,
      first_column: 15,
      last_line: 2,
      last_column: 16,
      range: [
        18,
        19,
      ],
    },
  },
  {
    id: 36,
    token: '"ACTION_BODY"',
    yytext: "'BAD_REGEX'",
    yylloc: {
      first_line: 2,
      first_column: 16,
      last_line: 2,
      last_column: 27,
      range: [
        19,
        30,
      ],
    },
  },
  {
    id: 24,
    token: '"ACTION_END"',
    yytext: '',
    yylloc: {
      first_line: 2,
      first_column: 27,
      last_line: 2,
      last_column: 27,
      range: [
        30,
        30,
      ],
    },
  },
  {
    id: 34,
    token: '"%%"',
    yytext: '',
    yylloc: {
      first_line: 4,
      first_column: 0,
      last_line: 4,
      last_column: 0,
      range: [
        32,
        32,
      ],
    },
  },
  {
    id: 1,
    token: 'end of input',
    yytext: '',
    yylloc: {
      first_line: 4,
      first_column: 0,
      last_line: 4,
      last_column: 0,
      range: [
        32,
        32,
      ],
    },
  },
  {
    id: 1,
    token: 'end of input',
    yytext: '',
    yylloc: {
      first_line: 4,
      first_column: 0,
      last_line: 4,
      last_column: 0,
      range: [
        32,
        32,
      ],
    },
  },
  {
    id: 1,
    token: 'end of input',
    yytext: '',
    yylloc: {
      first_line: 4,
      first_column: 0,
      last_line: 4,
      last_column: 0,
      range: [
        32,
        32,
      ],
    },
  },
  {
    id: 1,
    token: 'end of input',
    yytext: '',
    yylloc: {
      first_line: 4,
      first_column: 0,
      last_line: 4,
      last_column: 0,
      range: [
        32,
        32,
      ],
    },
  },
  {
    id: -2,
    token: null,
    summary: {
      totalTokenCount: 16,
      EOFTokenCount: 4,
      ERRORTokenCount: 1,
      ParseErrorCallCount: 1,
      DetectedParseErrorCallCount: 0,
      fatalExceptionCount: 0,
    },
  },
]