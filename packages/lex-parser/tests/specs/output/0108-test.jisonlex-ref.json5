{
  id: -1,
  token: null,
  fail: 1,
  spec: `%s PERCENT_ALLOWED

%%

// \`%\`: the grammar is not LALR(1) unless we make the lexer smarter and have 
// it disambiguate the \`%\` between \`percent\` and \`modulo\` functionality by 
// additional look-ahead:
// we introduce a lexical predicate here to disambiguate the \`%\` and thus 
// keep the grammar LALR(1)!
//      https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions
// we also use an (inclusive) lexical scope which turns this rule on only 
// immediately after a number was lexed previously.

<PERCENT_ALLOWED>"%"(?=\\s*(?:[^0-9)]|E\\b|PI\\b|$))
                      // followed by another operator, i.e. anything that's 
                      // not a number, or The End: then this is a unary 
                      // \`percent\` operator.
                      //
                      // \`1%-2\` would be ambiguous but isn't: the \`-\` is 
                      // considered as a unary minus and thus \`%\` is a 
                      // \`modulo\` operator.
                      //
                      // \`1%*5\` thus is treated the same: any operator 
                      // following the \`%\` is assumed to be a *binary* 
                      // operator. Hence \`1% times 5\` which brings us to 
                      // operators which only exist in unary form: \`!\`, and 
                      // values which are not numbers, e.g. \`PI\` and \`E\`:
                      // how about
                      // - \`1%E\` -> modulo E,
                      // - \`1%!0\` -> modulo 1 (as !0 -> 1)
                      //
                      // Of course, the easier way to handle this would be to 
                      // keep the lexer itself dumb and put this additional 
                      // logic inside a post_lex handler which should then be 
                      // able to obtain additional look-ahead tokens and queue 
                      // them for later, while using those to inspect and 
                      // adjust the lexer output now -- a trick which is used 
                      // in the cockroachDB SQL parser code, for example.
                      //
                      // The above regex solution however is a more local 
                      // extra-lookahead solution and thus should cost us less 
                      // overhead than the suggested post_lex alternative, but 
                      // it comes at a cost itself: complex regex and 
                      // duplication of language knowledge in the lexer itself, 
                      // plus inclusion of *grammar* (syntactic) knowledge in 
                      // the lexer too, where it doesn't belong in an ideal 
                      // world...
                      console.log('percent: ', yytext);
                      return '%';

<PERCENT_ALLOWED>.                     
                      this.popState(); 
                      this.unput(yytext); 
                      // this.unput(yytext); can be used here instead of 
                      // this.reject(); which would only work when we set the 
                      // \`backtrack_lexer\` option




\\s+                   /* skip whitespace */

[0-9]+("."[0-9]+)?\\b  
                      this.pushState('PERCENT_ALLOWED'); 
                      return 'NUMBER';

<<EOF>>               return 'EOF';
.                     return 'CHAR';`,
  err: {
    hash: {
      errStr: `
Seems you did not correctly bracket a lex rule regex part in '(...)' braces.
    
  Unterminated regex part:
48:                       console.log('percent: ', yytext);
^^................................................^
49:                       return '%';
50: 
    
  Technical error report:
Parse error on line 48:
                      console.log('percent: ', yytext);
----------------------------------------------^
Expecting "|", ")", got unexpected "ACTION_START"
`,
      exception: null,
      text: ' ',
      value: ' ',
      token: '"ACTION_START"',
      token_id: 25,
      line: 47,
      recoverable: false,
      state: 160,
      action: 2,
      new_state: 92,
      stack_pointer: 10,
    },
    message: `
Seems you did not correctly bracket a lex rule regex part in '(...)' braces.
    
  Unterminated regex part:
48:                       console.log('percent: ', yytext);
^^................................................^
49:                       return '%';
50: 
    
  Technical error report:
Parse error on line 48:
                      console.log('percent: ', yytext);
----------------------------------------------^
Expecting "|", ")", got unexpected "ACTION_START"
`,
    name: 'JisonParserError',
    stack: `JisonParserError: 
Seems you did not correctly bracket a lex rule regex part in '(...)' braces.
    
  Unterminated regex part:
48:                       console.log('percent: ', yytext);
^^................................................^
49:                       return '%';
50: 
    
  Technical error report:
Parse error on line 48:
                      console.log('percent: ', yytext);
----------------------------------------------^
Expecting "|", ")", got unexpected "ACTION_START"

    at Object.parseError (/lex-parser-cjs.js:7477:15)
    at Object.yyError (/lex-parser-cjs.js:7667:25)
    at Object.parser__PerformAction (/lex-parser-cjs.js:4951:14)
    at Object.parse (/lex-parser-cjs.js:8731:24)
    at Object.yyparse [as parse] (/lex-parser-cjs.js:12757:25)
    at Context.testEachParserExample (/all-tests.js:483:27)
    at callFn (/runnable.js:364:21)
    at Test.Runnable.run (/runnable.js:352:5)
    at Runner.runTest (/runner.js:677:10)
    at /runner.js:801:12
    at next (/runner.js:594:14)
    at /runner.js:604:7
    at next (/runner.js:486:14)
    at cbHookRun (/runner.js:551:7)
    at done (/runnable.js:308:5)
    at callFn (/runnable.js:387:7)
    at Hook.Runnable.run (/runnable.js:352:5)
    at next (/runner.js:510:10)
    at Immediate._onImmediate (/runner.js:572:5)
    at processImmediate (/timers.js:456:21)`,
  },
  __extra_diag_info__: {
    pre_parse_callback_callCount: 1,
    post_parse_callback_callCount: 1,
    post_parse_diaginfo: {
      sharedState_yy: {
        actionInclude: [],
        options: {},
        startConditions: {
          PERCENT_ALLOWED: 0,
        },
        __options_flags__: 11,
        __options_category_description__: 'the <...> delimited set of lexer start conditions',
        __inside_scoped_ruleset__: true,
        __context_cfg_stack__: [
          {
            flags: 0,
            descr: '???',
            scoped: false,
          },
          {
            flags: 0,
            descr: 'the lexer rules definition section',
            scoped: false,
          },
        ],
        __inside_condition_set__: false,
        depth: 0,
        include_command_allowed: true,
      },
      hash: {
        errStr: null,
        exception: null,
        text: ' ',
        value: ' ',
        token: '"ACTION_START"',
        token_id: 25,
        line: 47,
        expected: null,
        recoverable: false,
        state: 160,
        action: 2,
        new_state: 92,
        stack_pointer: 10,
      },
      reentrant_call_depth: 1,
      error_infos_stack: [
        {
          errStr: `Parse error on line 48:
                      console.log('percent: ', yytext);
----------------------------------------------^
Expecting "|", ")", got unexpected "ACTION_START"`,
          exception: null,
          text: ' ',
          value: ' ',
          token: '"ACTION_START"',
          token_id: 25,
          line: 47,
          recoverable: true,
          state: 104,
          action: 0,
          new_state: 201,
          stack_pointer: 9,
        },
        {
          errStr: `
Seems you did not correctly bracket a lex rule regex part in '(...)' braces.
    
  Unterminated regex part:
48:                       console.log('percent: ', yytext);
^^................................................^
49:                       return '%';
50: 
    
  Technical error report:
Parse error on line 48:
                      console.log('percent: ', yytext);
----------------------------------------------^
Expecting "|", ")", got unexpected "ACTION_START"
`,
          exception: null,
          text: ' ',
          value: ' ',
          token: '"ACTION_START"',
          token_id: 25,
          line: 47,
          recoverable: false,
          state: 160,
          action: 2,
          new_state: 92,
          stack_pointer: 10,
        },
        {
          errStr: null,
          exception: null,
          text: ' ',
          value: ' ',
          token: '"ACTION_START"',
          token_id: 25,
          line: 47,
          expected: null,
          recoverable: false,
          state: 160,
          action: 2,
          new_state: 92,
          stack_pointer: 10,
        },
      ],
      error_recovery_stack: [
        {
          errStr: `Parse error on line 48:
                      console.log('percent: ', yytext);
----------------------------------------------^
Expecting "|", ")", got unexpected "ACTION_START"`,
          exception: null,
          text: ' ',
          value: ' ',
          token: '"ACTION_START"',
          token_id: 25,
          line: 47,
          recoverable: true,
          state: 104,
          action: 0,
          new_state: 201,
          stack_pointer: 9,
          base_pointer: 14,
          info_stack_pointer: 17,
          root_failure_pointer: 9,
        },
        {
          errStr: `
Seems you did not correctly bracket a lex rule regex part in '(...)' braces.
    
  Unterminated regex part:
48:                       console.log('percent: ', yytext);
^^................................................^
49:                       return '%';
50: 
    
  Technical error report:
Parse error on line 48:
                      console.log('percent: ', yytext);
----------------------------------------------^
Expecting "|", ")", got unexpected "ACTION_START"
`,
          exception: null,
          text: ' ',
          value: ' ',
          token: '"ACTION_START"',
          token_id: 25,
          line: 47,
          recoverable: false,
          state: 160,
          action: 2,
          new_state: 92,
          stack_pointer: 10,
          base_pointer: 14,
          info_stack_pointer: 14,
          root_failure_pointer: 10,
          yyError: true,
          errorRuleDepth: -1,
          recovering: 3,
        },
      ],
      error_infos_stack_size: 3,
      error_recovery_stack_size: 2,
    },
    reentrant_call_depth: 0,
    error_infos_stack_size: 0,
    error_recovery_stack_size: 0,
  },
  __original_input__: `%s PERCENT_ALLOWED

%%

// \`%\`: the grammar is not LALR(1) unless we make the lexer smarter and have 
// it disambiguate the \`%\` between \`percent\` and \`modulo\` functionality by 
// additional look-ahead:
// we introduce a lexical predicate here to disambiguate the \`%\` and thus 
// keep the grammar LALR(1)!
//      https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions
// we also use an (inclusive) lexical scope which turns this rule on only 
// immediately after a number was lexed previously.

<PERCENT_ALLOWED>"%"(?=\\s*(?:[^0-9)]|E\\b|PI\\b|$))
                      // followed by another operator, i.e. anything that's 
                      // not a number, or The End: then this is a unary 
                      // \`percent\` operator.
                      //
                      // \`1%-2\` would be ambiguous but isn't: the \`-\` is 
                      // considered as a unary minus and thus \`%\` is a 
                      // \`modulo\` operator.
                      //
                      // \`1%*5\` thus is treated the same: any operator 
                      // following the \`%\` is assumed to be a *binary* 
                      // operator. Hence \`1% times 5\` which brings us to 
                      // operators which only exist in unary form: \`!\`, and 
                      // values which are not numbers, e.g. \`PI\` and \`E\`:
                      // how about
                      // - \`1%E\` -> modulo E,
                      // - \`1%!0\` -> modulo 1 (as !0 -> 1)
                      //
                      // Of course, the easier way to handle this would be to 
                      // keep the lexer itself dumb and put this additional 
                      // logic inside a post_lex handler which should then be 
                      // able to obtain additional look-ahead tokens and queue 
                      // them for later, while using those to inspect and 
                      // adjust the lexer output now -- a trick which is used 
                      // in the cockroachDB SQL parser code, for example.
                      //
                      // The above regex solution however is a more local 
                      // extra-lookahead solution and thus should cost us less 
                      // overhead than the suggested post_lex alternative, but 
                      // it comes at a cost itself: complex regex and 
                      // duplication of language knowledge in the lexer itself, 
                      // plus inclusion of *grammar* (syntactic) knowledge in 
                      // the lexer too, where it doesn't belong in an ideal 
                      // world...
                      console.log('percent: ', yytext);
                      return '%';

<PERCENT_ALLOWED>.                     
                      this.popState(); 
                      this.unput(yytext); 
                      // this.unput(yytext); can be used here instead of 
                      // this.reject(); which would only work when we set the 
                      // \`backtrack_lexer\` option




\\s+                   /* skip whitespace */

[0-9]+("."[0-9]+)?\\b  
                      this.pushState('PERCENT_ALLOWED'); 
                      return 'NUMBER';

<<EOF>>               return 'EOF';
.                     return 'CHAR';`,
}