/* 
 * grammar spec generated by @gerhobbelt/lex-parser for input file:
 *     :/0109-test.jisonlex
 */

{
  id: -1,
  token: null,
  fail: 1,
  spec: `//
// title: "rule regexes may be indented one level max"
// test_input: main class extends nat if else for printNat readNat this new var null
//
// ...
//

digit      [0-9]
id         [a-zA-Z_][a-zA-Z0-9_]*

%%

// current heuristic is 8 spaces or 2 tabs or more: action code. Less? rule regex if nothing comes before already.

"//".*           /* ignore comment */
\\s+ return 'WS';
main return 'MAIN';
 class return 'CLASS';
  extends return 'EXTENDS';
   nat return 'NATTYPE';
    if return 'IF';
     else return 'ELSE';
      for return 'FOR';
       printNat return 'PRINTNAT';
       readNat return 'READNAT';
       this return 'THIS';
       new return 'NEW';
  var            
            return 'VAR';
null             
        return 'NUL';

// {id}             
//         return 'ID';
//
// when code is within a '{...}' scope, the scope holds it all together:        
{id} {             
return 'ID';
}



[^\\s]+ return 'ILLEGAL';

<<EOF>>                         return 'EOF';`,
  err: {
    name: 'JisonParserError',
    hash: {
      errStr: `
The lexer rule's action code section does not compile: Error: Line 18: Unexpected token return
    
  Erroneous area:
17: main return 'MAIN';
^^......^^^^^^^^^^^^^^^
18:  class return 'CLASS';
^^..^^^^^^^^^^^^^^^^^^^^^^
    (...continued...)
--  (---------------)
28:   var            
^^..^^^^^^^^^^^^^^^^^
29:             return 'VAR';
^^..^^^^^^^^^^^^^^^^^^^^^^^^^
30: null             
31:         return 'NUL';
`,
      exception: null,
      text: '',
      value: '',
      token: '"$accept"',
      token_id: 0,
      line: 28,
      recoverable: false,
      state: 149,
      action: 2,
      new_state: 49,
      stack_pointer: 7,
    },
    message: `
The lexer rule's action code section does not compile: Error: Line 18: Unexpected token return
    
  Erroneous area:
17: main return 'MAIN';
^^......^^^^^^^^^^^^^^^
18:  class return 'CLASS';
^^..^^^^^^^^^^^^^^^^^^^^^^
    (...continued...)
--  (---------------)
28:   var            
^^..^^^^^^^^^^^^^^^^^
29:             return 'VAR';
^^..^^^^^^^^^^^^^^^^^^^^^^^^^
30: null             
31:         return 'NUL';
`,
    stack: `JisonParserError: 
The lexer rule's action code section does not compile: Error: Line 18: Unexpected token return
    
  Erroneous area:
17: main return 'MAIN';
^^......^^^^^^^^^^^^^^^
18:  class return 'CLASS';
^^..^^^^^^^^^^^^^^^^^^^^^^
    (...continued...)
--  (---------------)
28:   var            
^^..^^^^^^^^^^^^^^^^^
29:             return 'VAR';
^^..^^^^^^^^^^^^^^^^^^^^^^^^^
30: null             
31:         return 'NUL';

    at Object.parseError (/lex-parser-cjs.js:8009:15)
    at Object.yyError (/lex-parser-cjs.js:8194:25)
    at Object.parser__PerformAction (/lex-parser-cjs.js:4576:18)
    at Object.parse (/lex-parser-cjs.js:9472:24)
    at Object.yyparse [as parse] (/lex-parser-cjs.js:13065:25)
    at Context.testEachParserExample (/all-tests.js:356:27)
    at callFn (/runnable.js:364:21)
    at Test.Runnable.run (/runnable.js:352:5)
    at Runner.runTest (/runner.js:677:10)
    at /runner.js:801:12
    at next (/runner.js:594:14)
    at /runner.js:604:7
    at next (/runner.js:486:14)
    at cbHookRun (/runner.js:551:7)
    at done (/runnable.js:308:5)
    at callFn (/runnable.js:387:7)
    at Hook.Runnable.run (/runnable.js:352:5)
    at next (/runner.js:510:10)
    at Immediate._onImmediate (/runner.js:572:5)
    at processImmediate (/timers.js:456:21)`,
  },
  __extra_diag_info__: {
    pre_parse_callback_callCount: 1,
    post_parse_callback_callCount: 1,
    post_parse_diaginfo: {
      sharedState_yy: {
        actionInclude: [],
        options: {},
        startConditions: {},
        __options_flags__: 0,
        __options_category_description__: 'the lexer rules definition section',
        __inside_scoped_ruleset__: false,
        __context_cfg_stack__: [
          {
            flags: 0,
            descr: '???',
            scoped: false,
          },
        ],
        depth: 0,
        include_command_allowed: false,
      },
      hash: {
        errStr: null,
        exception: null,
        text: '',
        value: '',
        token: '"$accept"',
        token_id: 0,
        line: 28,
        expected: null,
        recoverable: false,
        state: 149,
        action: 2,
        new_state: 49,
        stack_pointer: 7,
      },
      reentrant_call_depth: 1,
      error_infos_stack: [
        {
          errStr: `
The lexer rule's action code section does not compile: Error: Line 18: Unexpected token return
    
  Erroneous area:
17: main return 'MAIN';
^^......^^^^^^^^^^^^^^^
18:  class return 'CLASS';
^^..^^^^^^^^^^^^^^^^^^^^^^
    (...continued...)
--  (---------------)
28:   var            
^^..^^^^^^^^^^^^^^^^^
29:             return 'VAR';
^^..^^^^^^^^^^^^^^^^^^^^^^^^^
30: null             
31:         return 'NUL';
`,
          exception: null,
          text: '',
          value: '',
          token: '"$accept"',
          token_id: 0,
          line: 28,
          recoverable: false,
          state: 149,
          action: 2,
          new_state: 49,
          stack_pointer: 7,
        },
        {
          errStr: null,
          exception: null,
          text: '',
          value: '',
          token: '"$accept"',
          token_id: 0,
          line: 28,
          expected: null,
          recoverable: false,
          state: 149,
          action: 2,
          new_state: 49,
          stack_pointer: 7,
        },
      ],
      error_recovery_stack: [
        {
          errStr: `
The lexer rule's action code section does not compile: Error: Line 18: Unexpected token return
    
  Erroneous area:
17: main return 'MAIN';
^^......^^^^^^^^^^^^^^^
18:  class return 'CLASS';
^^..^^^^^^^^^^^^^^^^^^^^^^
    (...continued...)
--  (---------------)
28:   var            
^^..^^^^^^^^^^^^^^^^^
29:             return 'VAR';
^^..^^^^^^^^^^^^^^^^^^^^^^^^^
30: null             
31:         return 'NUL';
`,
          exception: null,
          text: '',
          value: '',
          token: '"$accept"',
          token_id: 0,
          line: 28,
          recoverable: false,
          state: 149,
          action: 2,
          new_state: 49,
          stack_pointer: 7,
          base_pointer: 9,
          info_stack_pointer: 9,
          root_failure_pointer: 7,
          yyError: true,
          errorRuleDepth: -1,
          recovering: 0,
        },
      ],
      error_infos_stack_size: 2,
      error_recovery_stack_size: 1,
    },
    reentrant_call_depth: 0,
    error_infos_stack_size: 0,
    error_recovery_stack_size: 0,
  },
  __original_input__: `//
// title: "rule regexes may be indented one level max"
// test_input: main class extends nat if else for printNat readNat this new var null
//
// ...
//

digit      [0-9]
id         [a-zA-Z_][a-zA-Z0-9_]*

%%

// current heuristic is 8 spaces or 2 tabs or more: action code. Less? rule regex if nothing comes before already.

"//".*           /* ignore comment */
\\s+ return 'WS';
main return 'MAIN';
 class return 'CLASS';
  extends return 'EXTENDS';
   nat return 'NATTYPE';
    if return 'IF';
     else return 'ELSE';
      for return 'FOR';
       printNat return 'PRINTNAT';
       readNat return 'READNAT';
       this return 'THIS';
       new return 'NEW';
  var            
            return 'VAR';
null             
        return 'NUL';

// {id}             
//         return 'ID';
//
// when code is within a '{...}' scope, the scope holds it all together:        
{id} {             
return 'ID';
}



[^\\s]+ return 'ILLEGAL';

<<EOF>>                         return 'EOF';`,
}