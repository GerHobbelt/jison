{
  id: -1,
  token: null,
  fail: 1,
  spec: `//
// title: "indented multi-line <A,B,...> condition block"
// test_input: |-
//   $A.8
//   B1
//   $$55Z...
//   $
//   ~
//
// ...
//

%s    
    CALL_DIRECTIVE_STATE,
    SOURCE_DIRECTIVE_STATE,
    DEFINE_DIRECTIVE_STATE,
    ON_OFF_DIRECTIVE_STATE,
    SET_DIRECTIVE_STATE,
    TURN_DIRECTIVE_STATE,
    IF_DIRECTIVE_STATE,
    ELSE_DIRECTIVE_STATE,
    ENDIF_DIRECTIVE_STATE,
    ALNUM_LITERAL_STATE,
    CONTROL_STATEMENT_STATE

%%

<CALL_DIRECTIVE_STATE,
SOURCE_DIRECTIVE_STATE,
DEFINE_DIRECTIVE_STATE,
ON_OFF_DIRECTIVE_STATE,
SET_DIRECTIVE_STATE,
TURN_DIRECTIVE_STATE,
IF_DIRECTIVE_STATE,
ELSE_DIRECTIVE_STATE,
ENDIF_DIRECTIVE_STATE,
ALNUM_LITERAL_STATE,
CONTROL_STATEMENT_STATE>{
  \\n            {
    this.popState();
    this.unput('\\n');
    return 'TERMINATOR';
  }
  [ ,;]+        { /* ignore */ }
  "."           {
    return DOT;
  }
  .             {
    return '#' + yytext[0].charCodeAt(0).toString(16);
  }
}

'$'                             
                                // using pushState/popState as a better way of doing \`begin()\`
                                // which would only increase the condition stack and never 
                                // pop one off, potentially leading to out-of-memory issues
                                // when you'ld feed such a lexer with long input.
                                this.pushState('CALL_DIRECTIVE_STATE');
                                return 'MARKER';

. 
                                return yytext.charCodeAt(0);

<<EOF>>                         yytext = {
                                    conditionStack: this.conditionStack,
                                    conditionsSet: Object.keys(this.conditions),
                                };
                                return 'EOF';`,
  err: {
    hash: {
      errStr: `
The lexer rule's action code section does not compile: Error: Line 42: Unexpected token }
    
  Erroneous area:
39:   \\n            {
^^......^^^^^^^^^^^^^
40:     this.popState();
^^..^^^^^^^^^^^^^^^^^^^^
    (...continued...)
--  (---------------)
49:     return '#' + yytext[0].charCodeAt(0).toString(16);
^^..^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
50:   }
^^..^^^
51: }
52: 
`,
      exception: null,
      text: '',
      value: '',
      token: '"$accept"',
      token_id: 0,
      line: 49,
      recoverable: false,
      state: 149,
      action: 2,
      new_state: 49,
      stack_pointer: 10,
    },
    message: `
The lexer rule's action code section does not compile: Error: Line 42: Unexpected token }
    
  Erroneous area:
39:   \\n            {
^^......^^^^^^^^^^^^^
40:     this.popState();
^^..^^^^^^^^^^^^^^^^^^^^
    (...continued...)
--  (---------------)
49:     return '#' + yytext[0].charCodeAt(0).toString(16);
^^..^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
50:   }
^^..^^^
51: }
52: 
`,
    name: 'JisonParserError',
    stack: `JisonParserError: 
The lexer rule's action code section does not compile: Error: Line 42: Unexpected token }
    
  Erroneous area:
39:   \\n            {
^^......^^^^^^^^^^^^^
40:     this.popState();
^^..^^^^^^^^^^^^^^^^^^^^
    (...continued...)
--  (---------------)
49:     return '#' + yytext[0].charCodeAt(0).toString(16);
^^..^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
50:   }
^^..^^^
51: }
52: 

    at Object.parseError (/lex-parser-cjs.js:7520:15)
    at Object.yyError (/lex-parser-cjs.js:7710:25)
    at Object.parser__PerformAction (/lex-parser-cjs.js:4087:18)
    at Object.parse (/lex-parser-cjs.js:8977:24)
    at Object.yyparse [as parse] (/lex-parser-cjs.js:12820:25)
    at Context.testEachParserExample (/all-tests.js:557:27)
    at callFn (/runnable.js:364:21)
    at Test.Runnable.run (/runnable.js:352:5)
    at Runner.runTest (/runner.js:677:10)
    at /runner.js:801:12
    at next (/runner.js:594:14)
    at /runner.js:604:7
    at next (/runner.js:486:14)
    at cbHookRun (/runner.js:551:7)
    at done (/runnable.js:308:5)
    at callFn (/runnable.js:387:7)
    at Hook.Runnable.run (/runnable.js:352:5)
    at next (/runner.js:510:10)
    at Immediate._onImmediate (/runner.js:572:5)
    at processImmediate (/timers.js:456:21)`,
  },
  __extra_diag_info__: {
    pre_parse_callback_callCount: 1,
    post_parse_callback_callCount: 1,
    post_parse_diaginfo: {
      sharedState_yy: {
        actionInclude: [],
        options: {},
        startConditions: {
          CALL_DIRECTIVE_STATE: 0,
          SOURCE_DIRECTIVE_STATE: 0,
          DEFINE_DIRECTIVE_STATE: 0,
          ON_OFF_DIRECTIVE_STATE: 0,
          SET_DIRECTIVE_STATE: 0,
          TURN_DIRECTIVE_STATE: 0,
          IF_DIRECTIVE_STATE: 0,
          ELSE_DIRECTIVE_STATE: 0,
          ENDIF_DIRECTIVE_STATE: 0,
          ALNUM_LITERAL_STATE: 0,
          CONTROL_STATEMENT_STATE: 0,
        },
        __options_flags__: 11,
        __options_category_description__: 'the <...> delimited set of lexer start conditions',
        __inside_scoped_ruleset__: true,
        __context_cfg_stack__: [
          {
            flags: 0,
            descr: '???',
            scoped: false,
          },
          {
            flags: 0,
            descr: 'the lexer rules definition section',
            scoped: false,
          },
        ],
        __inside_condition_set__: false,
        depth: 0,
        include_command_allowed: false,
      },
      hash: {
        errStr: null,
        exception: null,
        text: '',
        value: '',
        token: '"$accept"',
        token_id: 0,
        line: 49,
        expected: null,
        recoverable: false,
        state: 149,
        action: 2,
        new_state: 49,
        stack_pointer: 10,
      },
      reentrant_call_depth: 1,
      error_infos_stack: [
        {
          errStr: `
The lexer rule's action code section does not compile: Error: Line 42: Unexpected token }
    
  Erroneous area:
39:   \\n            {
^^......^^^^^^^^^^^^^
40:     this.popState();
^^..^^^^^^^^^^^^^^^^^^^^
    (...continued...)
--  (---------------)
49:     return '#' + yytext[0].charCodeAt(0).toString(16);
^^..^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
50:   }
^^..^^^
51: }
52: 
`,
          exception: null,
          text: '',
          value: '',
          token: '"$accept"',
          token_id: 0,
          line: 49,
          recoverable: false,
          state: 149,
          action: 2,
          new_state: 49,
          stack_pointer: 10,
        },
        {
          errStr: null,
          exception: null,
          text: '',
          value: '',
          token: '"$accept"',
          token_id: 0,
          line: 49,
          expected: null,
          recoverable: false,
          state: 149,
          action: 2,
          new_state: 49,
          stack_pointer: 10,
        },
      ],
      error_recovery_stack: [
        {
          errStr: `
The lexer rule's action code section does not compile: Error: Line 42: Unexpected token }
    
  Erroneous area:
39:   \\n            {
^^......^^^^^^^^^^^^^
40:     this.popState();
^^..^^^^^^^^^^^^^^^^^^^^
    (...continued...)
--  (---------------)
49:     return '#' + yytext[0].charCodeAt(0).toString(16);
^^..^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
50:   }
^^..^^^
51: }
52: 
`,
          exception: null,
          text: '',
          value: '',
          token: '"$accept"',
          token_id: 0,
          line: 49,
          recoverable: false,
          state: 149,
          action: 2,
          new_state: 49,
          stack_pointer: 10,
          base_pointer: 12,
          info_stack_pointer: 12,
          root_failure_pointer: 10,
          yyError: true,
          errorRuleDepth: -1,
          recovering: 0,
        },
      ],
      error_infos_stack_size: 2,
      error_recovery_stack_size: 1,
    },
    reentrant_call_depth: 0,
    error_infos_stack_size: 0,
    error_recovery_stack_size: 0,
  },
  __original_input__: `//
// title: "indented multi-line <A,B,...> condition block"
// test_input: |-
//   $A.8
//   B1
//   $$55Z...
//   $
//   ~
//
// ...
//

%s    
    CALL_DIRECTIVE_STATE,
    SOURCE_DIRECTIVE_STATE,
    DEFINE_DIRECTIVE_STATE,
    ON_OFF_DIRECTIVE_STATE,
    SET_DIRECTIVE_STATE,
    TURN_DIRECTIVE_STATE,
    IF_DIRECTIVE_STATE,
    ELSE_DIRECTIVE_STATE,
    ENDIF_DIRECTIVE_STATE,
    ALNUM_LITERAL_STATE,
    CONTROL_STATEMENT_STATE

%%

<CALL_DIRECTIVE_STATE,
SOURCE_DIRECTIVE_STATE,
DEFINE_DIRECTIVE_STATE,
ON_OFF_DIRECTIVE_STATE,
SET_DIRECTIVE_STATE,
TURN_DIRECTIVE_STATE,
IF_DIRECTIVE_STATE,
ELSE_DIRECTIVE_STATE,
ENDIF_DIRECTIVE_STATE,
ALNUM_LITERAL_STATE,
CONTROL_STATEMENT_STATE>{
  \\n            {
    this.popState();
    this.unput('\\n');
    return 'TERMINATOR';
  }
  [ ,;]+        { /* ignore */ }
  "."           {
    return DOT;
  }
  .             {
    return '#' + yytext[0].charCodeAt(0).toString(16);
  }
}

'$'                             
                                // using pushState/popState as a better way of doing \`begin()\`
                                // which would only increase the condition stack and never 
                                // pop one off, potentially leading to out-of-memory issues
                                // when you'ld feed such a lexer with long input.
                                this.pushState('CALL_DIRECTIVE_STATE');
                                return 'MARKER';

. 
                                return yytext.charCodeAt(0);

<<EOF>>                         yytext = {
                                    conditionStack: this.conditionStack,
                                    conditionsSet: Object.keys(this.conditions),
                                };
                                return 'EOF';`,
}