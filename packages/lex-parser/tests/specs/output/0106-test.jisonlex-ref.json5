{
  id: -1,
  token: null,
  fail: 1,
  spec: `%%

a {{
    {
        yytext += '+1';
        return 'A';
        // note the terminating 'action code block marker' just below:
        // it's a matching set of braces, yet looks a tad... off.
        //
        // To prevent mishaps with complex action blocks, the 'end marker'
        // must stand apart.
        // Hence this MUST be considered as ILLEGAL input.
    }}}

b {{{
    {
        yytext += '+1';
        return 'B';
        // This MUST be considered as legal input. The end marker stands apart
        // from any other confusing closing braces.
    } }}}

c {{{{
    {
        yytext += '+1';
        return 'C';
        // This MUST be considered as legal input. The end marker stands apart
        // from any other confusing closing braces.
    }}} }}}} }}}}
    //       ^^^^--- THAT, of course, will be illegal lexer spec input as these
    //               just dangle here. This MUST reflect in the lexer token 
    //               stream output for this buggy lexer spec!

<<EOF>>                         return 'EOF';`,
  err: {
    name: 'JisonLexerError',
    hash: {
      errStr: `Lexical error on line 21: 
                                                
TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO 

Confusingly terminated action code block. We're expecting the
'}}}' end marker to go with the given start marker.
Regrettably, it does not exist in the remainder of the input.


Erroneous area:
                                                12:         // Hence this MUST be considered as ILLEGAL input.
13:     }}}
14: 
15: b {{{
^^....^^^
16:     {
^^..^^^^^
    (...continued...)
--  (---------------)
20:         // from any other confusing closing braces.
^^..^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
21:     } }}}
^^..^^^^^^^^^
22: 
23: c {{{{
`,
      recoverable: false,
      text: `{{{
    {
        yytext += '+1';
        return 'B';
        // This MUST be considered as legal input. The end marker stands apart
        // from any other confusing closing braces.
    } }}}`,
      token: null,
      line: 20,
      isLexerError: true,
      yyErrorInvoked: true,
      isLexerBacktrackingNotSupportedError: false,
      isLexerInternalError: false,
      extra_error_attributes: null,
      lexerHasAlreadyForwardedCursorBy1: false,
    },
    message: `Lexical error on line 21: 
                                                
TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO 

Confusingly terminated action code block. We're expecting the
'}}}' end marker to go with the given start marker.
Regrettably, it does not exist in the remainder of the input.


Erroneous area:
                                                12:         // Hence this MUST be considered as ILLEGAL input.
13:     }}}
14: 
15: b {{{
^^....^^^
16:     {
^^..^^^^^
    (...continued...)
--  (---------------)
20:         // from any other confusing closing braces.
^^..^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
21:     } }}}
^^..^^^^^^^^^
22: 
23: c {{{{
`,
    stack: `JisonLexerError: Lexical error on line 21: 
                                                
TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO TODO 

Confusingly terminated action code block. We're expecting the
'}}}' end marker to go with the given start marker.
Regrettably, it does not exist in the remainder of the input.


Erroneous area:
                                                12:         // Hence this MUST be considered as ILLEGAL input.
13:     }}}
14: 
15: b {{{
^^....^^^
16:     {
^^..^^^^^
    (...continued...)
--  (---------------)
20:         // from any other confusing closing braces.
^^..^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
21:     } }}}
^^..^^^^^^^^^
22: 
23: c {{{{

    at Object.parseError (/lex-parser-cjs.js:7477:15)
    at Object.lexer_parseError [as parseError] (/lex-parser-cjs.js:9666:44)
    at Object.yyError [as yyerror] (/lex-parser-cjs.js:9696:19)
    at Object.lexer__performAction [as performAction] (/lex-parser-cjs.js:11356:17)
    at Object.lexer_test_match [as test_match] (/lex-parser-cjs.js:10690:38)
    at Object.lexer_next [as next] (/lex-parser-cjs.js:10815:28)
    at Object.lexer_fastLex [as fastLex] (/lex-parser-cjs.js:10999:18)
    at fastLex (/lex-parser-cjs.js:8072:27)
    at Object.parse (/lex-parser-cjs.js:8246:30)
    at Object.yyparse [as parse] (/lex-parser-cjs.js:12757:25)
    at Context.testEachParserExample (/all-tests.js:483:27)
    at callFn (/runnable.js:364:21)
    at Test.Runnable.run (/runnable.js:352:5)
    at Runner.runTest (/runner.js:677:10)
    at /runner.js:801:12
    at next (/runner.js:594:14)
    at /runner.js:604:7
    at next (/runner.js:486:14)
    at cbHookRun (/runner.js:551:7)
    at done (/runnable.js:308:5)
    at callFn (/runnable.js:387:7)
    at Hook.Runnable.run (/runnable.js:352:5)
    at next (/runner.js:510:10)
    at Immediate._onImmediate (/runner.js:572:5)
    at processImmediate (/timers.js:456:21)`,
  },
  __extra_diag_info__: {
    pre_parse_callback_callCount: 1,
    post_parse_callback_callCount: 1,
    post_parse_diaginfo: {
      sharedState_yy: {
        actionInclude: [],
        options: {},
        startConditions: {},
        __options_flags__: 0,
        __options_category_description__: 'the lexer rules definition section',
        __inside_scoped_ruleset__: false,
        __context_cfg_stack__: [
          {
            flags: 0,
            descr: '???',
            scoped: false,
          },
        ],
        depth: 0,
        include_command_allowed: false,
      },
      hash: {
        errStr: null,
        exception: null,
        text: `{{{
    {
        yytext += '+1';
        return 'B';
        // This MUST be considered as legal input. The end marker stands apart
        // from any other confusing closing braces.
    } }}}`,
        token: '"$accept"',
        token_id: 0,
        line: 20,
        expected: null,
        recoverable: false,
        state: 35,
        action: 2,
        new_state: 35,
        stack_pointer: 6,
      },
      reentrant_call_depth: 1,
      error_infos_stack: [
        {
          errStr: null,
          exception: null,
          text: `{{{
    {
        yytext += '+1';
        return 'B';
        // This MUST be considered as legal input. The end marker stands apart
        // from any other confusing closing braces.
    } }}}`,
          token: '"$accept"',
          token_id: 0,
          line: 20,
          expected: null,
          recoverable: false,
          state: 35,
          action: 2,
          new_state: 35,
          stack_pointer: 6,
        },
      ],
      error_recovery_stack: [],
      error_infos_stack_size: 1,
      error_recovery_stack_size: 0,
    },
    reentrant_call_depth: 0,
    error_infos_stack_size: 0,
    error_recovery_stack_size: 0,
  },
  __original_input__: `%%

a {{
    {
        yytext += '+1';
        return 'A';
        // note the terminating 'action code block marker' just below:
        // it's a matching set of braces, yet looks a tad... off.
        //
        // To prevent mishaps with complex action blocks, the 'end marker'
        // must stand apart.
        // Hence this MUST be considered as ILLEGAL input.
    }}}

b {{{
    {
        yytext += '+1';
        return 'B';
        // This MUST be considered as legal input. The end marker stands apart
        // from any other confusing closing braces.
    } }}}

c {{{{
    {
        yytext += '+1';
        return 'C';
        // This MUST be considered as legal input. The end marker stands apart
        // from any other confusing closing braces.
    }}} }}}} }}}}
    //       ^^^^--- THAT, of course, will be illegal lexer spec input as these
    //               just dangle here. This MUST reflect in the lexer token 
    //               stream output for this buggy lexer spec!

<<EOF>>                         return 'EOF';`,
}