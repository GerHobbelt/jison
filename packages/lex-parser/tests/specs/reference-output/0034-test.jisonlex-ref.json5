{
  rules: [
    [
      '\\n+',
      'yy.freshLine = true',
    ],
    [
      '\\s+',
      'yy.freshLine = false',
    ],
    [
      'y\\{[^}]*\\}',
      "yytext = yytext.substr(2, yyleng-3);return 'ACTION'",
    ],
    [
      '[a-zA-Z_][a-zA-Z0-9_]*',
      "return 'NAME'",
    ],
    [
      `"([^"]|\\\\")*"`,
      "return 'STRING_LIT'",
    ],
    [
      `'([^']|\\\\')*'`,
      "return 'STRING_LIT'",
    ],
    [
      '\\|',
      "return '|'",
    ],
    [
      '\\[(\\\\\\]|[^\\]])*\\]',
      "return 'ANY_GROUP_REGEX'",
    ],
    [
      '\\(',
      "return '('",
    ],
    [
      '\\)',
      "return ')'",
    ],
    [
      '\\+',
      "return '+'",
    ],
    [
      '\\*',
      "return '*'",
    ],
    [
      '\\?',
      "return '?'",
    ],
    [
      '\\^',
      "return '^'",
    ],
    [
      '\\/',
      "return '/'",
    ],
    [
      '\\\\[a-zA-Z0]',
      "return 'ESCAPE_CHAR'",
    ],
    [
      '\\$',
      "return '$'",
    ],
    [
      '<<EOF>>',
      "return '$'",
    ],
    [
      '\\.',
      "return '.'",
    ],
    [
      '%%',
      "return '%%'",
    ],
    [
      '\\{\\d+(,\\s?\\d+|,)?\\}',
      "return 'RANGE_REGEX'",
    ],
    [
      '(?=\\{)',
      `if(yy.freshLine){this.input('{');return '{';} else this.unput('y')`,
    ],
    [
      '\\}',
      "return '}'",
    ],
    [
      '%\\{(.|\\n)*?\\}%',
      "yytext = yytext.substr(2, yyleng-4);return 'ACTION'",
    ],
    [
      '.',
      '/* ignore bad characters */',
    ],
    [
      '$',
      "return 'EOF'",
    ],
  ],
  macros: {},
  startConditions: {},
  codeSections: [],
  importDecls: [],
  unknownDecls: [],
  __extra_diag_info__: {
    pre_parse_callback_callCount: 1,
    post_parse_callback_callCount: 1,
    post_parse_diaginfo: {
      sharedState_yy: {
        startConditions: {},
        __options_flags__: 0,
        __options_category_description__: '???',
        __inside_scoped_ruleset__: false,
        __context_cfg_stack__: [],
        depth: 0,
        include_command_allowed: false,
      },
      hash: {
        errStr: null,
        exception: null,
        text: '',
        value: '',
        token: '"$accept"',
        token_id: 0,
        line: 29,
        expected: null,
        recoverable: false,
        state: 24,
        action: 2,
        new_state: 1,
        stack_pointer: 5,
      },
      reentrant_call_depth: 1,
      error_infos_stack: [
        {
          errStr: null,
          exception: null,
          text: '',
          value: '',
          token: '"$accept"',
          token_id: 0,
          line: 29,
          expected: null,
          recoverable: false,
          state: 24,
          action: 2,
          new_state: 1,
          stack_pointer: 5,
        },
      ],
      error_recovery_stack: [],
      error_infos_stack_size: 1,
      error_recovery_stack_size: 0,
    },
    reentrant_call_depth: 0,
    error_infos_stack_size: 0,
    error_recovery_stack_size: 0,
  },
  __original_input__: `
%%
\\n+     {yy.freshLine = true;}
\\s+     {yy.freshLine = false;}
"y{"[^}]*"}"      {yytext = yytext.substr(2, yyleng-3);return 'ACTION';}
[a-zA-Z_][a-zA-Z0-9_]*      {return 'NAME';}
'"'([^"]|'\\"')*'"'      {return 'STRING_LIT';}
"'"([^']|"\\'")*"'"      {return 'STRING_LIT';}
"|"     {return '|';}
"["("\\]"|[^\\]])*"]"     {return 'ANY_GROUP_REGEX';}
"("     {return '(';}
")"     {return ')';}
"+"     {return '+';}
"*"     {return '*';}
"?"     {return '?';}
"^"     {return '^';}
"/"     {return '/';}
"\\\\"[a-zA-Z0]     {return 'ESCAPE_CHAR';}
"$"     {return '$';}
"<<EOF>>"     {return '$';}
"."     {return '.';}
"%%"      {return '%%';}
"{"\\d+(","\\s?\\d+|",")?"}"     {return 'RANGE_REGEX';}
/"{"      %{if(yy.freshLine){this.input('{');return '{';} else this.unput('y');%}
"}"     %{return '}';%}
"%{"(.|\\n)*?"}%"      {yytext = yytext.substr(2, yyleng-4);return 'ACTION';}
.     {/* ignore bad characters */}
<<EOF>>     {return 'EOF';}

`,
}