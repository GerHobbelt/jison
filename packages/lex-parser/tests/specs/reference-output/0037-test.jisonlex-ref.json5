{
  rules: [
    [
      'enter-test',
      "this.begin('TEST')",
    ],
    [
      [
        'TEST',
        'EAT',
      ],
      'x',
      "return 'T'",
    ],
    [
      [
        '*',
      ],
      'z',
      "return 'Z'",
    ],
    [
      [
        'TEST',
      ],
      'y',
      `this.begin('INITIAL'); return 'TY'`,
    ],
  ],
  macros: {},
  startConditions: {
    TEST: 0,
    TEST2: 0,
    EAT: 1,
  },
  codeSections: [],
  importDecls: [],
  unknownDecls: [],
  __extra_diag_info__: {
    pre_parse_callback_callCount: 1,
    post_parse_callback_callCount: 1,
    post_parse_diaginfo: {
      sharedState_yy: {
        startConditions: '[reference to sibling --> *.startConditions]',
        __options_flags__: 0,
        __options_category_description__: '???',
        __inside_scoped_ruleset__: false,
        __context_cfg_stack__: [],
        depth: 0,
        include_command_allowed: false,
      },
      hash: {
        errStr: null,
        exception: null,
        text: '',
        value: '',
        token: '"$accept"',
        token_id: 0,
        line: 8,
        expected: null,
        recoverable: false,
        state: 24,
        action: 2,
        new_state: 1,
        stack_pointer: 5,
      },
      reentrant_call_depth: 1,
      error_infos_stack: [
        {
          errStr: null,
          exception: null,
          text: '',
          value: '',
          token: '"$accept"',
          token_id: 0,
          line: 8,
          expected: null,
          recoverable: false,
          state: 24,
          action: 2,
          new_state: 1,
          stack_pointer: 5,
        },
      ],
      error_recovery_stack: [],
      error_infos_stack_size: 1,
      error_recovery_stack_size: 0,
    },
    reentrant_call_depth: 0,
    error_infos_stack_size: 0,
    error_recovery_stack_size: 0,
  },
  __original_input__: `%s TEST TEST2
%x EAT
%%
"enter-test" {this.begin('TEST');}
<TEST,EAT>"x" {return 'T';}
<*>"z" {return 'Z';}
<TEST>"y" {this.begin('INITIAL'); return 'TY';}

`,
}