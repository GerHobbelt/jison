{
  rules: [
    [
      '{ASCII_LETTER}',
      "return 'A'",
    ],
    [
      '\\s',
      "return ' '",
    ],
    [
      '.',
      "return '?'",
    ],
  ],
  macros: {
    ASCII_LETTER: '[a-zA-z]',
  },
  startConditions: {},
  codeSections: [
    {
      qualifier: 'A',
      include: "// first A chunk\n  console.log('A')",
    },
    {
      qualifier: 'B',
      include: "// first B chunk\n  console.log('B')",
    },
    {
      qualifier: 'A',
      include: "// second A chunk\n  console.log('C')",
    },
  ],
  importDecls: [],
  unknownDecls: [],
  __extra_diag_info__: {
    pre_parse_callback_callCount: 1,
    post_parse_callback_callCount: 1,
    post_parse_diaginfo: {
      sharedState_yy: {
        startConditions: {},
        __options_flags__: 0,
        __options_category_description__: '???',
        __inside_scoped_ruleset__: false,
        __context_cfg_stack__: [],
        depth: 0,
        include_command_allowed: false,
      },
      hash: {
        errStr: null,
        exception: null,
        text: '',
        value: '',
        token: '"$accept"',
        token_id: 0,
        line: 22,
        expected: null,
        recoverable: false,
        state: 24,
        action: 2,
        new_state: 1,
        stack_pointer: 5,
      },
      reentrant_call_depth: 1,
      error_infos_stack: [
        {
          errStr: null,
          exception: null,
          text: '',
          value: '',
          token: '"$accept"',
          token_id: 0,
          line: 22,
          expected: null,
          recoverable: false,
          state: 24,
          action: 2,
          new_state: 1,
          stack_pointer: 5,
        },
      ],
      error_recovery_stack: [],
      error_infos_stack_size: 1,
      error_recovery_stack_size: 0,
    },
    reentrant_call_depth: 0,
    error_infos_stack_size: 0,
    error_recovery_stack_size: 0,
  },
  __original_input__: `%code A %{
  // first A chunk
  console.log('A');
%}

ASCII_LETTER                            [a-zA-z]

%code B %{
  // first B chunk
  console.log('B');
%}

%code A %{
  // second A chunk
  console.log('C');
%}



%%
{ASCII_LETTER}		-> 'A'
\\s 					-> ' '
.					-> '?'`,
}