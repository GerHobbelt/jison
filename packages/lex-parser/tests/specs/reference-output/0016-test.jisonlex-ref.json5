{
  id: -1,
  token: null,
  fail: 1,
  spec: `%%
"["[^\\]]"]" %{
return true;
%} }

`,
  err: {
    hash: {
      errStr: `Lexical error on line 4: 
too many closing curly braces in lexer rule action block.

Note: the action code chunk may be too complex for jison to parse
easily; we suggest you wrap the action code chunk in '%{...%}'
to help jison grok more or less complex action code chunks.

  Erroneous area:
1: %%
2: "["[^\\]]"]" %{
3: return true;
4: %} }
^.....^
5: 
6: 
`,
      recoverable: false,
      text: '}',
      token: null,
      line: 3,
    },
    message: `Lexical error on line 4: 
too many closing curly braces in lexer rule action block.

Note: the action code chunk may be too complex for jison to parse
easily; we suggest you wrap the action code chunk in '%{...%}'
to help jison grok more or less complex action code chunks.

  Erroneous area:
1: %%
2: "["[^\\]]"]" %{
3: return true;
4: %} }
^.....^
5: 
6: 
`,
    name: 'JisonLexerError',
    stack: `JisonLexerError: Lexical error on line 4: 
too many closing curly braces in lexer rule action block.

Note: the action code chunk may be too complex for jison to parse
easily; we suggest you wrap the action code chunk in '%{...%}'
to help jison grok more or less complex action code chunks.

  Erroneous area:
1: %%
2: "["[^\\]]"]" %{
3: return true;
4: %} }
^.....^
5: 
6: 

    at Object.parseError (/lex-parser-cjs.js:7138:15)
    at Object.lexer_parseError [as parseError] (/lex-parser-cjs.js:9233:44)
    at Object.yyError [as yyerror] (/lex-parser-cjs.js:9264:19)
    at Object.lexer__performAction [as performAction] (/lex-parser-cjs.js:10719:15)
    at Object.lexer_test_match [as test_match] (/lex-parser-cjs.js:10169:38)
    at Object.lexer_next [as next] (/lex-parser-cjs.js:10292:28)
    at Object.lexer_fastLex [as fastLex] (/lex-parser-cjs.js:10439:18)
    at fastLex (/lex-parser-cjs.js:7733:27)
    at Object.parse (/lex-parser-cjs.js:7907:30)
    at Object.yyparse [as parse] (/lex-parser-cjs.js:12302:25)
    at Context.testEachParserExample (/all-tests.js:489:27)
    at callFn (/runnable.js:364:21)
    at Test.Runnable.run (/runnable.js:352:5)
    at Runner.runTest (/runner.js:677:10)
    at /runner.js:801:12
    at next (/runner.js:594:14)
    at /runner.js:604:7
    at next (/runner.js:486:14)
    at cbHookRun (/runner.js:551:7)
    at done (/runnable.js:308:5)
    at callFn (/runnable.js:387:7)
    at Hook.Runnable.run (/runnable.js:352:5)
    at next (/runner.js:510:10)
    at Immediate._onImmediate (/runner.js:572:5)
    at processImmediate (/timers.js:456:21)`,
  },
  __extra_diag_info__: {
    pre_parse_callback_callCount: 1,
    post_parse_callback_callCount: 1,
    post_parse_diaginfo: {
      sharedState_yy: {
        actionInclude: [],
        options: {},
        startConditions: {},
        __options_flags__: 0,
        __options_category_description__: 'the lexer rules definition section',
        __inside_scoped_ruleset__: false,
        __context_cfg_stack__: [
          {
            flags: 0,
            descr: '???',
            scoped: false,
          },
        ],
        depth: 0,
        include_command_allowed: false,
      },
      hash: {
        errStr: null,
        exception: null,
        text: '}',
        value: '}',
        token: '"$accept"',
        token_id: 0,
        line: 3,
        expected: null,
        recoverable: false,
        state: 172,
        action: 2,
        new_state: 172,
        stack_pointer: 8,
      },
      reentrant_call_depth: 1,
      error_infos_stack: [
        {
          errStr: null,
          exception: null,
          text: '}',
          value: '}',
          token: '"$accept"',
          token_id: 0,
          line: 3,
          expected: null,
          recoverable: false,
          state: 172,
          action: 2,
          new_state: 172,
          stack_pointer: 8,
        },
      ],
      error_recovery_stack: [],
      error_infos_stack_size: 1,
      error_recovery_stack_size: 0,
    },
    reentrant_call_depth: 0,
    error_infos_stack_size: 0,
    error_recovery_stack_size: 0,
  },
  __original_input__: `%%
"["[^\\]]"]" %{
return true;
%} }

`,
}