{
  rules: [
    {
      ast: {
        source: "return 'EOF'",
        augmentedSource: `

                               return 'EOF'`,
        ast: {
          program: {
            type: 'Program',
            body: [
              {
                type: 'ReturnStatement',
                argument: {
                  type: 'Literal',
                  value: 'EOF',
                  raw: "'EOF'",
                  loc: {
                    start: {
                      line: 3,
                      column: 38,
                      token: 1,
                    },
                    end: {
                      line: 3,
                      column: 43,
                      token: 2,
                    },
                    lines: {
                      infos: [
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: "                               return 'EOF'",
                          indent: 31,
                          locked: false,
                          sliceStart: 31,
                          sliceEnd: 43,
                        },
                      ],
                      mappings: [],
                      cachedSourceMap: null,
                      length: 3,
                      name: null,
                    },
                    tokens: [
                      {
                        type: 'Keyword',
                        value: 'return',
                      },
                      {
                        type: 'String',
                        value: "'EOF'",
                      },
                    ],
                    indent: 31,
                  },
                },
                loc: {
                  start: {
                    line: 3,
                    column: 31,
                    token: 0,
                  },
                  end: {
                    line: 3,
                    column: 43,
                    token: 2,
                  },
                  lines: '[reference to sibling --> *.rules.[0].ast.ast.program.body.[0].argument.loc.lines]',
                  tokens: [
                    '[reference to sibling --> *.rules.[0].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
                    '[reference to sibling --> *.rules.[0].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
                  ],
                  indent: 31,
                },
              },
            ],
            sourceType: 'script',
            loc: {
              start: {
                line: 3,
                column: 31,
                token: 0,
              },
              end: {
                line: 3,
                column: 43,
                token: 2,
              },
              lines: '[reference to sibling --> *.rules.[0].ast.ast.program.body.[0].argument.loc.lines]',
              indent: 31,
              tokens: [
                '[reference to sibling --> *.rules.[0].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
                '[reference to sibling --> *.rules.[0].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
              ],
            },
            errors: [
              {
                index: 41,
                lineNumber: 3,
                description: 'Illegal return statement',
                message: 'Line 3: Illegal return statement',
                name: 'Error',
                stack: `Error: Line 3: Illegal return statement
    at ErrorHandler.constructError (/esprima.js:5012:22)
    at ErrorHandler.createError (/esprima.js:5028:27)
    at ErrorHandler.tolerateError (/esprima.js:5038:27)
    at JSXParser.Parser.tolerateError (/esprima.js:1951:28)
    at JSXParser.Parser.parseReturnStatement (/esprima.js:3911:19)
    at JSXParser.Parser.parseStatement (/esprima.js:4148:43)
    at JSXParser.Parser.parseStatementListItem (/esprima.js:3388:39)
    at JSXParser.Parser.parseScript (/esprima.js:4723:29)
    at Object.parse (/esprima.js:122:61)
    at Object.parse (/esprima.js:14:34)
    at Object.parse (/parser.js:23:30)
    at parseCodeChunkToAST (/lex-parser-cjs.js:1160:44)
    at checkActionBlock (/lex-parser-cjs.js:1286:18)
    at Object.parser__PerformAction (/lex-parser-cjs.js:4535:15)
    at Object.parse (/lex-parser-cjs.js:8934:24)
    at Object.yyparse [as parse] (/lex-parser-cjs.js:12757:25)
    at Context.testEachParserExample (/all-tests.js:483:27)
    at callFn (/runnable.js:364:21)
    at Test.Runnable.run (/runnable.js:352:5)
    at Runner.runTest (/runner.js:677:10)
    at /runner.js:801:12
    at next (/runner.js:594:14)
    at /runner.js:604:7
    at next (/runner.js:486:14)
    at cbHookRun (/runner.js:551:7)
    at done (/runnable.js:308:5)
    at callFn (/runnable.js:387:7)
    at Hook.Runnable.run (/runnable.js:352:5)
    at next (/runner.js:510:10)
    at Immediate._onImmediate (/runner.js:572:5)
    at processImmediate (/timers.js:456:21)`,
              },
            ],
          },
          name: null,
          loc: {
            start: {
              line: 1,
              column: 0,
              token: 0,
            },
            end: {
              line: 3,
              column: 43,
              token: 2,
            },
            lines: '[reference to sibling --> *.rules.[0].ast.ast.program.body.[0].argument.loc.lines]',
            indent: 0,
            tokens: [
              '[reference to sibling --> *.rules.[0].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
              '[reference to sibling --> *.rules.[0].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
            ],
          },
          type: 'File',
          comments: null,
          tokens: [
            '[reference to sibling --> *.rules.[0].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
            '[reference to sibling --> *.rules.[0].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
          ],
        },
        fault: false,
      },
      fault: false,
      srcCode: "return 'EOF'",
      rule: '$',
    },
  ],
  macros: {},
  startConditions: {},
  codeSections: [],
  importDecls: [],
  unknownDecls: [],
  __extra_diag_info__: {
    pre_parse_callback_callCount: 1,
    post_parse_callback_callCount: 1,
    post_parse_diaginfo: {
      sharedState_yy: {
        startConditions: {},
        __options_flags__: 0,
        __options_category_description__: '???',
        __inside_scoped_ruleset__: false,
        __context_cfg_stack__: [],
        depth: 0,
        include_command_allowed: false,
      },
      hash: {
        errStr: null,
        exception: null,
        text: '',
        value: '',
        token: '"$accept"',
        token_id: 0,
        line: 2,
        expected: null,
        recoverable: false,
        state: 26,
        action: 2,
        new_state: 1,
        stack_pointer: 5,
      },
      reentrant_call_depth: 1,
      error_infos_stack: [
        {
          errStr: null,
          exception: null,
          text: '',
          value: '',
          token: '"$accept"',
          token_id: 0,
          line: 2,
          expected: null,
          recoverable: false,
          state: 26,
          action: 2,
          new_state: 1,
          stack_pointer: 5,
        },
      ],
      error_recovery_stack: [],
      error_infos_stack_size: 1,
      error_recovery_stack_size: 0,
    },
    reentrant_call_depth: 0,
    error_infos_stack_size: 0,
    error_recovery_stack_size: 0,
  },
  __original_input__: `%%

<<EOF>>                         return 'EOF';`,
}