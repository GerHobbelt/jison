/* 
 * grammar spec generated by @gerhobbelt/lex-parser for input file:
 *     :/0014-test.jisonlex
 */

{
  id: -1,
  token: null,
  fail: 1,
  spec: `//
// title: test multiline action with unmatching end marker
//
// ...
//
// This test is expected to FAIL!
// 

%%
"["[^\\]]"]" %{
return true;
}}

`,
  err: {
    name: 'JisonLexerError',
    hash: {
      errStr: `Lexical error on line 10: 
                                                
Incorrectly terminated action code block. We're expecting the
'%}' end marker to go with the given start marker.
Regrettably, it does not exist in the remainder of the input.


Erroneous area:
                                                 7: // 
 8: 
 9: %%
10: "["[^\\]]"]" %{
^^..............^
11: return true;
12: }}
`,
      recoverable: false,
      text: '%{',
      token: null,
      line: 9,
      isLexerError: true,
      yyErrorInvoked: true,
      isLexerBacktrackingNotSupportedError: false,
      isLexerInternalError: false,
      extra_error_attributes: null,
      lexerHasAlreadyForwardedCursorBy1: false,
    },
    message: `Lexical error on line 10: 
                                                
Incorrectly terminated action code block. We're expecting the
'%}' end marker to go with the given start marker.
Regrettably, it does not exist in the remainder of the input.


Erroneous area:
                                                 7: // 
 8: 
 9: %%
10: "["[^\\]]"]" %{
^^..............^
11: return true;
12: }}
`,
    stack: `JisonLexerError: Lexical error on line 10: 
                                                
Incorrectly terminated action code block. We're expecting the
'%}' end marker to go with the given start marker.
Regrettably, it does not exist in the remainder of the input.


Erroneous area:
                                                 7: // 
 8: 
 9: %%
10: "["[^\\]]"]" %{
^^..............^
11: return true;
12: }}

    at Object.parseError (/lex-parser-cjs.js:7935:15)
    at Object.lexer_parseError [as parseError] (/lex-parser-cjs.js:10078:50)
    at Object.yyError [as yyerror] (/lex-parser-cjs.js:10105:22)
    at Object.lexer__performAction [as performAction] (/lex-parser-cjs.js:11647:49)
    at Object.lexer_test_match [as test_match] (/lex-parser-cjs.js:11039:40)
    at Object.lexer_next [as next] (/lex-parser-cjs.js:11139:34)
    at Object.lexer_fastLex [as fastLex] (/lex-parser-cjs.js:11314:22)
    at fastLex (/lex-parser-cjs.js:8525:27)
    at Object.parse (/lex-parser-cjs.js:8699:30)
    at Object.yyparse [as parse] (/lex-parser-cjs.js:12991:25)
    at Context.testEachParserExample (/all-tests.js:358:27)
    at callFn (/runnable.js:364:21)
    at Test.Runnable.run (/runnable.js:352:5)
    at Runner.runTest (/runner.js:677:10)
    at /runner.js:801:12
    at next (/runner.js:594:14)
    at /runner.js:604:7
    at next (/runner.js:486:14)
    at cbHookRun (/runner.js:551:7)
    at done (/runnable.js:308:5)
    at callFn (/runnable.js:387:7)
    at Hook.Runnable.run (/runnable.js:352:5)
    at next (/runner.js:510:10)
    at Immediate._onImmediate (/runner.js:572:5)
    at processImmediate (/timers.js:456:21)`,
  },
  __extra_diag_info__: {
    pre_parse_callback_callCount: 1,
    post_parse_callback_callCount: 1,
    post_parse_diaginfo: {
      sharedState_yy: {
        actionInclude: [],
        options: {},
        startConditions: {},
        __options_flags__: 0,
        __options_category_description__: 'the lexer rules definition section',
        __inside_scoped_ruleset__: false,
        __context_cfg_stack__: [
          {
            flags: 0,
            descr: '???',
            scoped: false,
          },
        ],
        depth: 0,
        include_command_allowed: false,
      },
      hash: {
        errStr: null,
        exception: null,
        text: '%{',
        token: '"$accept"',
        token_id: 0,
        line: 9,
        expected: null,
        recoverable: false,
        state: 97,
        action: 2,
        new_state: 97,
        stack_pointer: 7,
      },
      reentrant_call_depth: 1,
      error_infos_stack: [
        {
          errStr: null,
          exception: null,
          text: '%{',
          token: '"$accept"',
          token_id: 0,
          line: 9,
          expected: null,
          recoverable: false,
          state: 97,
          action: 2,
          new_state: 97,
          stack_pointer: 7,
        },
      ],
      error_recovery_stack: [],
      error_infos_stack_size: 1,
      error_recovery_stack_size: 0,
    },
    reentrant_call_depth: 0,
    error_infos_stack_size: 0,
    error_recovery_stack_size: 0,
  },
  __original_input__: `//
// title: test multiline action with unmatching end marker
//
// ...
//
// This test is expected to FAIL!
// 

%%
"["[^\\]]"]" %{
return true;
}}

`,
}