/* 
 * grammar spec generated by @gerhobbelt/lex-parser for input file:
 *     :/0099-test.jisonlex
 */

{
  rules: [
    {
      ast: {
        source: '[IDEM: srcCode]',
        augmentedSource: '[LINE-SHIFTED SOURCE]',
        ast: '[recast AST]',
        fault: false,
      },
      fault: false,
      srcCode: "return 'PATHOLOGICAL_CASE_HIT_1'",
      rule: 'b<c',
    },
    {
      ast: {
        source: '[IDEM: srcCode]',
        augmentedSource: '[LINE-SHIFTED SOURCE]',
        ast: '[recast AST]',
        fault: false,
      },
      fault: false,
      srcCode: "return 'PATHOLOGICAL_CASE_HIT_2'",
      rule: 'b>c',
    },
    {
      ast: {
        source: '[IDEM: srcCode]',
        augmentedSource: '[LINE-SHIFTED SOURCE]',
        ast: '[recast AST]',
        fault: false,
      },
      fault: false,
      srcCode: "return 'PATHOLOGICAL_CASE_HIT_3'",
      rule: 'b<c>',
    },
    {
      ast: {
        source: '[IDEM: srcCode]',
        augmentedSource: '[LINE-SHIFTED SOURCE]',
        ast: '[recast AST]',
        fault: false,
      },
      fault: false,
      srcCode: "popState();\n\t\t\t\t\t\t\t\treturn 'SWITCHING_TO_INITIAL_CONTEXT'",
      rule: 'a',
      start_condition: [
        'ALT',
      ],
    },
    {
      ast: {
        source: '[IDEM: srcCode]',
        augmentedSource: '[LINE-SHIFTED SOURCE]',
        ast: '[recast AST]',
        fault: false,
      },
      fault: false,
      srcCode: `pushState('ALT');
								return 'SWITCHING_TO_ALT_CONTEXT'`,
      rule: 'a',
      start_condition: [
        'INITIAL',
      ],
    },
    {
      ast: {
        source: '[IDEM: srcCode]',
        augmentedSource: '[LINE-SHIFTED SOURCE]',
        ast: '[recast AST]',
        fault: false,
      },
      fault: false,
      srcCode: "return 'SPACE'",
      rule: '\\s',
    },
    {
      ast: {
        source: '[IDEM: srcCode]',
        augmentedSource: '[LINE-SHIFTED SOURCE]',
        ast: '[recast AST]',
        fault: false,
      },
      fault: false,
      srcCode: "return 'CHAR'",
      rule: '.',
    },
    {
      ast: {
        source: '[IDEM: srcCode]',
        augmentedSource: '[LINE-SHIFTED SOURCE]',
        ast: '[recast AST]',
        fault: false,
      },
      fault: false,
      srcCode: "return 'EOF'",
      rule: '$',
    },
  ],
  macros: {},
  startConditions: {
    ALT: 0,
  },
  codeSections: [],
  importDecls: [],
  unknownDecls: [],
  __extra_diag_info__: {
    pre_parse_callback_callCount: 1,
    post_parse_callback_callCount: 1,
    post_parse_diaginfo: {
      sharedState_yy: {
        startConditions: '[reference to sibling --> *.startConditions]',
        __options_flags__: 0,
        __options_category_description__: '???',
        __inside_scoped_ruleset__: false,
        __context_cfg_stack__: [],
        depth: 0,
        include_command_allowed: false,
        __inside_condition_set__: false,
      },
      hash: {
        errStr: null,
        exception: null,
        text: '',
        value: '',
        token: '"$accept"',
        token_id: 0,
        line: 25,
        expected: null,
        recoverable: false,
        state: 26,
        action: 2,
        new_state: 1,
        stack_pointer: 5,
      },
      reentrant_call_depth: 1,
      error_infos_stack: [
        {
          errStr: null,
          exception: null,
          text: '',
          value: '',
          token: '"$accept"',
          token_id: 0,
          line: 25,
          expected: null,
          recoverable: false,
          state: 26,
          action: 2,
          new_state: 1,
          stack_pointer: 5,
        },
      ],
      error_recovery_stack: [],
      error_infos_stack_size: 1,
      error_recovery_stack_size: 0,
    },
    reentrant_call_depth: 0,
    error_infos_stack_size: 0,
    error_recovery_stack_size: 0,
  },
  __original_input__: `//
// title: "rule regex pathological case: '<' / '>' are literal regex parts when not starting a rule"
// test_input: a1bacab<cab>cab<c>a
//
// ...
//

%s ALT

%%

// '<' as literal '<' when it cannot be a condition starter:
b<c 							return 'PATHOLOGICAL_CASE_HIT_1';
b>c 							return 'PATHOLOGICAL_CASE_HIT_2';
b<c> 							return 'PATHOLOGICAL_CASE_HIT_3';

<ALT>a 							popState();
								return 'SWITCHING_TO_INITIAL_CONTEXT';

<INITIAL>a						pushState('ALT');
								return 'SWITCHING_TO_ALT_CONTEXT';

\\s 								return 'SPACE';
.                               return 'CHAR';

<<EOF>>                         return 'EOF';`,
}