/* 
 * grammar spec generated by @gerhobbelt/lex-parser for input file:
 *     :/0077-test.jisonlex
 */

[
  {
    id: 33,
    token: '"%%"',
    yytext: '%%',
    yylloc: {
      first_line: 7,
      first_column: 0,
      last_line: 7,
      last_column: 2,
      range: [
        87,
        89,
      ],
    },
  },
  {
    id: 53,
    token: '"STRING_LIT"',
    yytext: '"["',
    yylloc: {
      first_line: 8,
      first_column: 0,
      last_line: 8,
      last_column: 3,
      range: [
        90,
        93,
      ],
    },
  },
  {
    id: 48,
    token: '"REGEX_SET_START"',
    yytext: '[',
    yylloc: {
      first_line: 8,
      first_column: 3,
      last_line: 8,
      last_column: 4,
      range: [
        93,
        94,
      ],
    },
  },
  {
    id: 51,
    token: '"REGEX_SET"',
    yytext: "abc -> 'BAD_REGEX' // unterminated regex set...",
    yylloc: {
      first_line: 8,
      first_column: 4,
      last_line: 8,
      last_column: 51,
      range: [
        94,
        141,
      ],
    },
  },
  {
    id: 50,
    token: '"UNTERMINATED_REGEX_SET"',
    yytext: {
      errStr: `Lexical error on line 8: 
regex [...] sets cannot span multiple lines.

If you want a CR/LF to be part of a regex set, you can simply
specify those as character escapes '\\r' and '\\n'.

  Erroneous area:
5: //
6: 
7: %%
8: "["[abc -> 'BAD_REGEX' // unterminated regex set...
^.....................................................^
9: 
0: // Let's have a look if the lexer correctly terminates that bad set on the first newline it encounters...
`,
      recoverable: false,
      text: '',
      token: null,
      line: 7,
      loc: {
        first_line: 8,
        first_column: 51,
        last_line: 8,
        last_column: 51,
        range: [
          141,
          141,
        ],
      },
      yy: {},
      lexer: {
        EOF: 1,
        ERROR: 2,
        __error_infos: [
          {
            errStr: `Lexical error on line 8: 
regex [...] sets cannot span multiple lines.

If you want a CR/LF to be part of a regex set, you can simply
specify those as character escapes '\\r' and '\\n'.

  Erroneous area:
5: //
6: 
7: %%
8: "["[abc -> 'BAD_REGEX' // unterminated regex set...
^.....................................................^
9: 
0: // Let's have a look if the lexer correctly terminates that bad set on the first newline it encounters...
`,
            recoverable: false,
            text: '',
            token: null,
            line: 7,
            loc: {
              first_line: 8,
              first_column: 51,
              last_line: 8,
              last_column: 51,
              range: [
                141,
                141,
              ],
            },
            yy: {
              depth: 0,
              include_command_allowed: false,
            },
            lexer: '[lexer]',
            isLexerError: true,
            yyErrorInvoked: true,
            isLexerBacktrackingNotSupportedError: false,
            isLexerInternalError: false,
            extra_error_attributes: null,
            lexerHasAlreadyForwardedCursorBy1: false,
          },
        ],
        __decompressed: true,
        done: true,
        _backtrack: false,
        _input: '',
        _more: false,
        _signaled_error_token: false,
        _clear_state: 0,
        conditionStack: [
          'INITIAL',
          'code',
        ],
        match: '',
        matched: `//
// title: "lexer regex/rule [...] set may legally include whitespace"
//
// ...
//

%%
"["[abc -> 'BAD_REGEX' // unterminated regex set...

// Let's have a look if the lexer correctly terminates that bad set on the first newline it encounters...

"dummy" -> 'GOOD_DUMMY'
`,
        matches: false,
        yytext: '',
        offset: 274,
        base_position: 0,
        yyleng: 0,
        yylineno: 12,
        yylloc: {
          first_line: 13,
          first_column: 0,
          last_line: 13,
          last_column: 0,
          range: [
            274,
            274,
          ],
        },
        CRLF_Re: {
          re: '/\\r\\n?|\\n/',
          source: '\\r\\n?|\\n',
          flags: '',
        },
        options: {
          xregexp: true,
          ranges: true,
          trackPosition: true,
          easy_keyword_rules: true,
        },
        yy: {
          depth: 0,
          include_command_allowed: false,
        },
        __entire_action_block_matchers__: {},
      },
      isLexerError: true,
      yyErrorInvoked: true,
      isLexerBacktrackingNotSupportedError: false,
      isLexerInternalError: false,
      extra_error_attributes: null,
      lexerHasAlreadyForwardedCursorBy1: false,
      errorDiag: {
        inputPos: 133,
        yytext: '',
        yyleng: 0,
        matches: [
          '\n',
          '\n',
        ],
        activeCondition: 'rules',
        conditionStackDepth: 2,
      },
    },
    yylloc: {
      first_line: 8,
      first_column: 51,
      last_line: 8,
      last_column: 51,
      range: [
        141,
        141,
      ],
    },
  },
  {
    id: 53,
    token: '"STRING_LIT"',
    yytext: '"dummy"',
    yylloc: {
      first_line: 12,
      first_column: 0,
      last_line: 12,
      last_column: 7,
      range: [
        250,
        257,
      ],
    },
  },
  {
    id: 34,
    token: '"ARROW_ACTION_START"',
    yytext: '->',
    yylloc: {
      first_line: 12,
      first_column: 8,
      last_line: 12,
      last_column: 10,
      range: [
        258,
        260,
      ],
    },
  },
  {
    id: 38,
    token: '"ACTION_BODY"',
    yytext: ' ',
    yylloc: {
      first_line: 12,
      first_column: 10,
      last_line: 12,
      last_column: 11,
      range: [
        260,
        261,
      ],
    },
  },
  {
    id: 38,
    token: '"ACTION_BODY"',
    yytext: "'GOOD_DUMMY'",
    yylloc: {
      first_line: 12,
      first_column: 11,
      last_line: 12,
      last_column: 23,
      range: [
        261,
        273,
      ],
    },
  },
  {
    id: 35,
    token: '"ACTION_END"',
    yytext: '',
    yylloc: {
      first_line: 12,
      first_column: 23,
      last_line: 12,
      last_column: 23,
      range: [
        273,
        273,
      ],
    },
  },
  {
    id: 33,
    token: '"%%"',
    yytext: '',
    yylloc: {
      first_line: 13,
      first_column: 0,
      last_line: 13,
      last_column: 0,
      range: [
        274,
        274,
      ],
    },
  },
  {
    id: 1,
    token: 'end of input',
    yytext: '',
    yylloc: {
      first_line: 13,
      first_column: 0,
      last_line: 13,
      last_column: 0,
      range: [
        274,
        274,
      ],
    },
  },
  {
    id: 1,
    token: 'end of input',
    yytext: '',
    yylloc: {
      first_line: 13,
      first_column: 0,
      last_line: 13,
      last_column: 0,
      range: [
        274,
        274,
      ],
    },
  },
  {
    id: 1,
    token: 'end of input',
    yytext: '',
    yylloc: {
      first_line: 13,
      first_column: 0,
      last_line: 13,
      last_column: 0,
      range: [
        274,
        274,
      ],
    },
  },
  {
    id: 1,
    token: 'end of input',
    yytext: '',
    yylloc: {
      first_line: 13,
      first_column: 0,
      last_line: 13,
      last_column: 0,
      range: [
        274,
        274,
      ],
    },
  },
  {
    id: -2,
    token: null,
    summary: {
      totalTokenCount: 15,
      EOFTokenCount: 4,
      ERRORTokenCount: 0,
      ParseErrorCallCount: 1,
      DetectedParseErrorCallCount: 0,
      fatalExceptionCount: 0,
    },
  },
]