{
  id: -1,
  token: null,
  fail: 1,
  spec: `// title: arrow action error with continue-on-error
// test_input: "F 1"
// ...
//  
%options parserErrorsAreRecoverable
%%
'foo' 			-> // nada => error in arrow function!`,
  err: {
    hash: {
      errStr: `
The lexer rule's 'arrow' action code section does not compile: Error: Line 9: Unexpected end of input
    
# NOTE that the arrow action automatically wraps the action code
# in a \`return (...);\` statement to prevent hard-to-diagnose run-time
# errors down the line.
#
# Please be aware that the reported compile error MAY be referring
# to the wrapper code which is added by JISON automatically when
# processing arrow actions: the entire action code chunk
# (including wrapper) is:
    
    return (
        // nada => error in arrow function!
    )
    
  Erroneous area:
7: 'foo'    -> // nada => error in arrow function!
^.............^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
`,
      exception: null,
      text: '',
      value: '',
      token: '"$accept"',
      token_id: 0,
      line: 6,
      recoverable: false,
      state: 198,
      action: 2,
      new_state: 51,
      stack_pointer: 9,
    },
    message: `
The lexer rule's 'arrow' action code section does not compile: Error: Line 9: Unexpected end of input
    
# NOTE that the arrow action automatically wraps the action code
# in a \`return (...);\` statement to prevent hard-to-diagnose run-time
# errors down the line.
#
# Please be aware that the reported compile error MAY be referring
# to the wrapper code which is added by JISON automatically when
# processing arrow actions: the entire action code chunk
# (including wrapper) is:
    
    return (
        // nada => error in arrow function!
    )
    
  Erroneous area:
7: 'foo'    -> // nada => error in arrow function!
^.............^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
`,
    name: 'JisonParserError',
    stack: `JisonParserError: 
The lexer rule's 'arrow' action code section does not compile: Error: Line 9: Unexpected end of input
    
# NOTE that the arrow action automatically wraps the action code
# in a \`return (...);\` statement to prevent hard-to-diagnose run-time
# errors down the line.
#
# Please be aware that the reported compile error MAY be referring
# to the wrapper code which is added by JISON automatically when
# processing arrow actions: the entire action code chunk
# (including wrapper) is:
    
    return (
        // nada => error in arrow function!
    )
    
  Erroneous area:
7: 'foo'    -> // nada => error in arrow function!
^.............^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    at Object.parseError (/lex-parser-cjs.js:7520:15)
    at Object.yyError (/lex-parser-cjs.js:7710:25)
    at Object.parser__PerformAction (/lex-parser-cjs.js:4129:18)
    at Object.parse (/lex-parser-cjs.js:8977:24)
    at Object.yyparse [as parse] (/lex-parser-cjs.js:12820:25)
    at Context.testEachParserExample (/all-tests.js:557:27)
    at callFn (/runnable.js:364:21)
    at Test.Runnable.run (/runnable.js:352:5)
    at Runner.runTest (/runner.js:677:10)
    at /runner.js:801:12
    at next (/runner.js:594:14)
    at /runner.js:604:7
    at next (/runner.js:486:14)
    at cbHookRun (/runner.js:551:7)
    at done (/runnable.js:308:5)
    at callFn (/runnable.js:387:7)
    at Hook.Runnable.run (/runnable.js:352:5)
    at next (/runner.js:510:10)
    at Immediate._onImmediate (/runner.js:572:5)
    at processImmediate (/timers.js:456:21)`,
  },
  __extra_diag_info__: {
    pre_parse_callback_callCount: 1,
    post_parse_callback_callCount: 1,
    post_parse_diaginfo: {
      sharedState_yy: {
        actionInclude: [],
        options: {
          parserErrorsAreRecoverable: true,
        },
        startConditions: {},
        __options_flags__: 0,
        __options_category_description__: 'the lexer rules definition section',
        __inside_scoped_ruleset__: false,
        __context_cfg_stack__: [
          {
            flags: 0,
            descr: '???',
            scoped: false,
          },
        ],
        depth: 0,
        include_command_allowed: false,
      },
      hash: {
        errStr: null,
        exception: null,
        text: '',
        value: '',
        token: '"$accept"',
        token_id: 0,
        line: 6,
        expected: null,
        recoverable: false,
        state: 198,
        action: 2,
        new_state: 51,
        stack_pointer: 9,
      },
      reentrant_call_depth: 1,
      error_infos_stack: [
        {
          errStr: `
The lexer rule's 'arrow' action code section does not compile: Error: Line 9: Unexpected end of input
    
# NOTE that the arrow action automatically wraps the action code
# in a \`return (...);\` statement to prevent hard-to-diagnose run-time
# errors down the line.
#
# Please be aware that the reported compile error MAY be referring
# to the wrapper code which is added by JISON automatically when
# processing arrow actions: the entire action code chunk
# (including wrapper) is:
    
    return (
        // nada => error in arrow function!
    )
    
  Erroneous area:
7: 'foo'    -> // nada => error in arrow function!
^.............^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
`,
          exception: null,
          text: '',
          value: '',
          token: '"$accept"',
          token_id: 0,
          line: 6,
          recoverable: false,
          state: 198,
          action: 2,
          new_state: 51,
          stack_pointer: 9,
        },
        {
          errStr: null,
          exception: null,
          text: '',
          value: '',
          token: '"$accept"',
          token_id: 0,
          line: 6,
          expected: null,
          recoverable: false,
          state: 198,
          action: 2,
          new_state: 51,
          stack_pointer: 9,
        },
      ],
      error_recovery_stack: [
        {
          errStr: `
The lexer rule's 'arrow' action code section does not compile: Error: Line 9: Unexpected end of input
    
# NOTE that the arrow action automatically wraps the action code
# in a \`return (...);\` statement to prevent hard-to-diagnose run-time
# errors down the line.
#
# Please be aware that the reported compile error MAY be referring
# to the wrapper code which is added by JISON automatically when
# processing arrow actions: the entire action code chunk
# (including wrapper) is:
    
    return (
        // nada => error in arrow function!
    )
    
  Erroneous area:
7: 'foo'    -> // nada => error in arrow function!
^.............^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
`,
          exception: null,
          text: '',
          value: '',
          token: '"$accept"',
          token_id: 0,
          line: 6,
          recoverable: false,
          state: 198,
          action: 2,
          new_state: 51,
          stack_pointer: 9,
          base_pointer: 9,
          info_stack_pointer: 9,
          root_failure_pointer: 9,
          yyError: true,
          errorRuleDepth: -1,
          recovering: 0,
        },
      ],
      error_infos_stack_size: 2,
      error_recovery_stack_size: 1,
    },
    reentrant_call_depth: 0,
    error_infos_stack_size: 0,
    error_recovery_stack_size: 0,
  },
  __original_input__: `// title: arrow action error with continue-on-error
// test_input: "F 1"
// ...
//  
%options parserErrorsAreRecoverable
%%
'foo' 			-> // nada => error in arrow function!`,
}