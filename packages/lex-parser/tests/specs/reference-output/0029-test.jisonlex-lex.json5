/* 
 * grammar spec generated by @gerhobbelt/lex-parser for input file:
 *     :/0029-test.jisonlex
 */

[
  {
    id: 33,
    token: '"%%"',
    yytext: '%%',
    yylloc: {
      first_line: 7,
      first_column: 0,
      last_line: 7,
      last_column: 2,
      range: [
        106,
        108,
      ],
    },
  },
  {
    id: 53,
    token: '"STRING_LIT"',
    yytext: '"["',
    yylloc: {
      first_line: 8,
      first_column: 0,
      last_line: 8,
      last_column: 3,
      range: [
        109,
        112,
      ],
    },
  },
  {
    id: 48,
    token: '"REGEX_SET_START"',
    yytext: '[',
    yylloc: {
      first_line: 8,
      first_column: 3,
      last_line: 8,
      last_column: 4,
      range: [
        112,
        113,
      ],
    },
  },
  {
    id: 51,
    token: '"REGEX_SET"',
    yytext: '^\\]',
    yylloc: {
      first_line: 8,
      first_column: 4,
      last_line: 8,
      last_column: 7,
      range: [
        113,
        116,
      ],
    },
  },
  {
    id: 49,
    token: '"REGEX_SET_END"',
    yytext: ']',
    yylloc: {
      first_line: 8,
      first_column: 7,
      last_line: 8,
      last_column: 8,
      range: [
        116,
        117,
      ],
    },
  },
  {
    id: 53,
    token: '"STRING_LIT"',
    yytext: '"]"',
    yylloc: {
      first_line: 8,
      first_column: 8,
      last_line: 8,
      last_column: 11,
      range: [
        117,
        120,
      ],
    },
  },
  {
    id: 37,
    token: '"ENTIRE_ACTION"',
    yytext: {
      srcCode: `
return "%{..%}";
`,
      shiftCount: 24,
      action_start_marker: '%{{{{{',
      action_end_marker: '%}}}}}',
    },
    yylloc: {
      first_line: 8,
      first_column: 12,
      last_line: 10,
      last_column: 6,
      range: [
        121,
        151,
      ],
    },
  },
  {
    id: 54,
    token: '"CHARACTER_LIT"',
    yytext: 'a',
    yylloc: {
      first_line: 11,
      first_column: 0,
      last_line: 11,
      last_column: 1,
      range: [
        152,
        153,
      ],
    },
  },
  {
    id: 37,
    token: '"ENTIRE_ACTION"',
    yytext: {
      srcCode: ` return "A"; %}}}}}
b %{{{ return "A" + '`,
      shiftCount: 43,
      action_start_marker: '%{',
      action_end_marker: '%}',
    },
    yylloc: {
      first_line: 11,
      first_column: 2,
      last_line: 12,
      last_column: 23,
      range: [
        154,
        199,
      ],
    },
  },
  {
    id: 42,
    token: '"UNTERMINATED_STRING_ERROR"',
    yytext: {
      errStr: `Lexical error on line 12: 
unterminated string constant encountered while lexing
rules.

  Erroneous area:
 9: return "%{..%}";
10: %}}}}}
11: a %{ return "A"; %}}}}}
12: b %{{{ return "A" + '%}'; %}}}
^^.........................^
13: 
14: 
`,
      recoverable: false,
      text: "'",
      token: null,
      line: 11,
      loc: {
        first_line: 12,
        first_column: 23,
        last_line: 12,
        last_column: 24,
        range: [
          199,
          200,
        ],
      },
      yy: {
        depth: 0,
        include_command_allowed: false,
      },
      lexer: {
        EOF: 1,
        ERROR: 2,
        __error_infos: [
          {
            errStr: `Lexical error on line 12: 
unterminated string constant encountered while lexing
rules.

  Erroneous area:
 9: return "%{..%}";
10: %}}}}}
11: a %{ return "A"; %}}}}}
12: b %{{{ return "A" + '%}'; %}}}
^^.........................^
13: 
14: 
`,
            recoverable: false,
            text: "'",
            token: null,
            line: 11,
            loc: {
              first_line: 12,
              first_column: 23,
              last_line: 12,
              last_column: 24,
              range: [
                199,
                200,
              ],
            },
            yy: {
              depth: 0,
              include_command_allowed: false,
            },
            lexer: '[lexer]',
            isLexerError: true,
            yyErrorInvoked: true,
            isLexerBacktrackingNotSupportedError: false,
            isLexerInternalError: false,
            extra_error_attributes: null,
            lexerHasAlreadyForwardedCursorBy1: false,
          },
          {
            errStr: `Lexical error on line 12: 
unsupported lexer input encountered while lexing
rules (i.e. jison lex regexes) in “rules” state.

NOTE: When you want this input to be interpreted as a LITERAL part
      of a lex rule regex, you MUST enclose it in double or
      single quotes.

      If not, then know that this input is not accepted as a valid
      regex expression here in jison-lex rules.

  Erroneous area:
 9: return "%{..%}";
10: %}}}}}
11: a %{ return "A"; %}}}}}
12: b %{{{ return "A" + '%}'; %}}}
^^..........................^
13: 
14: 
`,
            recoverable: false,
            text: ';',
            token: null,
            line: 11,
            loc: {
              first_line: 12,
              first_column: 24,
              last_line: 12,
              last_column: 25,
              range: [
                200,
                201,
              ],
            },
            yy: '[reference to sibling --> *.[9].yytext.lexer.__error_infos.[0].yy]',
            lexer: '[lexer]',
            isLexerError: true,
            yyErrorInvoked: true,
            isLexerBacktrackingNotSupportedError: false,
            isLexerInternalError: false,
            extra_error_attributes: null,
            lexerHasAlreadyForwardedCursorBy1: false,
          },
          {
            errStr: `Lexical error on line 12: 
unsupported lexer input encountered while lexing
rules (i.e. jison lex regexes) in “rules” state.

NOTE: When you want this input to be interpreted as a LITERAL part
      of a lex rule regex, you MUST enclose it in double or
      single quotes.

      If not, then know that this input is not accepted as a valid
      regex expression here in jison-lex rules.

  Erroneous area:
 9: return "%{..%}";
10: %}}}}}
11: a %{ return "A"; %}}}}}
12: b %{{{ return "A" + '%}'; %}}}
^^............................^
13: 
14: 
`,
            recoverable: false,
            text: '%',
            token: null,
            line: 11,
            loc: {
              first_line: 12,
              first_column: 26,
              last_line: 12,
              last_column: 27,
              range: [
                202,
                203,
              ],
            },
            yy: '[reference to sibling --> *.[9].yytext.lexer.__error_infos.[0].yy]',
            lexer: '[lexer]',
            isLexerError: true,
            yyErrorInvoked: true,
            isLexerBacktrackingNotSupportedError: false,
            isLexerInternalError: false,
            extra_error_attributes: null,
            lexerHasAlreadyForwardedCursorBy1: false,
          },
        ],
        __decompressed: true,
        done: true,
        _backtrack: false,
        _input: '',
        _more: false,
        _signaled_error_token: false,
        _clear_state: 0,
        conditionStack: [
          'INITIAL',
          'code',
        ],
        match: '',
        matched: `//
// title: test stability across lexer invocations as we patch lexer rules under the hood
//
// ...
//

%%
"["[^\\]]"]" %{{{{{
return "%{..%}";
%}}}}}
a %{ return "A"; %}}}}}
b %{{{ return "A" + '%}'; %}}}

`,
        matches: false,
        yytext: '',
        offset: 208,
        base_position: 0,
        yyleng: 0,
        yylineno: 13,
        yylloc: {
          first_line: 14,
          first_column: 0,
          last_line: 14,
          last_column: 0,
          range: [
            208,
            208,
          ],
        },
        CRLF_Re: {
          re: '/\\r\\n?|\\n/',
          source: '\\r\\n?|\\n',
          flags: '',
        },
        options: {
          xregexp: true,
          ranges: true,
          trackPosition: true,
          easy_keyword_rules: true,
        },
        yy: {
          depth: 0,
          include_command_allowed: false,
        },
        __entire_action_block_matchers__: {},
      },
      isLexerError: true,
      yyErrorInvoked: true,
      isLexerBacktrackingNotSupportedError: false,
      isLexerInternalError: false,
      extra_error_attributes: null,
      lexerHasAlreadyForwardedCursorBy1: false,
      errorDiag: {
        inputPos: 8,
        yytext: "'",
        yyleng: 1,
        matches: [
          "'",
        ],
        activeCondition: 'rules',
        conditionStackDepth: 2,
      },
    },
    yylloc: {
      first_line: 12,
      first_column: 23,
      last_line: 12,
      last_column: 24,
      range: [
        199,
        200,
      ],
    },
  },
  {
    id: 2,
    token: '"error"',
    yytext: {
      errStr: `Lexical error on line 12: 
unsupported lexer input encountered while lexing
rules (i.e. jison lex regexes) in “rules” state.

NOTE: When you want this input to be interpreted as a LITERAL part
      of a lex rule regex, you MUST enclose it in double or
      single quotes.

      If not, then know that this input is not accepted as a valid
      regex expression here in jison-lex rules.

  Erroneous area:
 9: return "%{..%}";
10: %}}}}}
11: a %{ return "A"; %}}}}}
12: b %{{{ return "A" + '%}'; %}}}
^^..........................^
13: 
14: 
`,
      recoverable: false,
      text: ';',
      token: null,
      line: 11,
      loc: {
        first_line: 12,
        first_column: 24,
        last_line: 12,
        last_column: 25,
        range: [
          200,
          201,
        ],
      },
      yy: {
        depth: 0,
        include_command_allowed: false,
      },
      lexer: {
        EOF: 1,
        ERROR: 2,
        __error_infos: '[reference to sibling array --> *.[9].yytext.lexer.__error_infos, length = 3]',
        __decompressed: true,
        done: true,
        _backtrack: false,
        _input: '',
        _more: false,
        _signaled_error_token: false,
        _clear_state: 0,
        conditionStack: [
          'INITIAL',
          'code',
        ],
        match: '',
        matched: `//
// title: test stability across lexer invocations as we patch lexer rules under the hood
//
// ...
//

%%
"["[^\\]]"]" %{{{{{
return "%{..%}";
%}}}}}
a %{ return "A"; %}}}}}
b %{{{ return "A" + '%}'; %}}}

`,
        matches: false,
        yytext: '',
        offset: 208,
        base_position: 0,
        yyleng: 0,
        yylineno: 13,
        yylloc: {
          first_line: 14,
          first_column: 0,
          last_line: 14,
          last_column: 0,
          range: [
            208,
            208,
          ],
        },
        CRLF_Re: {
          re: '/\\r\\n?|\\n/',
          source: '\\r\\n?|\\n',
          flags: '',
        },
        options: {
          xregexp: true,
          ranges: true,
          trackPosition: true,
          easy_keyword_rules: true,
        },
        yy: {
          depth: 0,
          include_command_allowed: false,
        },
        __entire_action_block_matchers__: {},
      },
      isLexerError: true,
      yyErrorInvoked: true,
      isLexerBacktrackingNotSupportedError: false,
      isLexerInternalError: false,
      extra_error_attributes: null,
      lexerHasAlreadyForwardedCursorBy1: false,
      errorDiag: {
        inputPos: 7,
        yytext: ';',
        yyleng: 1,
        matches: [
          ';',
        ],
        activeCondition: 'rules',
        conditionStackDepth: 2,
      },
    },
    yylloc: {
      first_line: 12,
      first_column: 24,
      last_line: 12,
      last_column: 25,
      range: [
        200,
        201,
      ],
    },
  },
  {
    id: 2,
    token: '"error"',
    yytext: {
      errStr: `Lexical error on line 12: 
unsupported lexer input encountered while lexing
rules (i.e. jison lex regexes) in “rules” state.

NOTE: When you want this input to be interpreted as a LITERAL part
      of a lex rule regex, you MUST enclose it in double or
      single quotes.

      If not, then know that this input is not accepted as a valid
      regex expression here in jison-lex rules.

  Erroneous area:
 9: return "%{..%}";
10: %}}}}}
11: a %{ return "A"; %}}}}}
12: b %{{{ return "A" + '%}'; %}}}
^^............................^
13: 
14: 
`,
      recoverable: false,
      text: '%',
      token: null,
      line: 11,
      loc: {
        first_line: 12,
        first_column: 26,
        last_line: 12,
        last_column: 27,
        range: [
          202,
          203,
        ],
      },
      yy: {
        depth: 0,
        include_command_allowed: false,
      },
      lexer: {
        EOF: 1,
        ERROR: 2,
        __error_infos: '[reference to sibling array --> *.[9].yytext.lexer.__error_infos, length = 3]',
        __decompressed: true,
        done: true,
        _backtrack: false,
        _input: '',
        _more: false,
        _signaled_error_token: false,
        _clear_state: 0,
        conditionStack: [
          'INITIAL',
          'code',
        ],
        match: '',
        matched: `//
// title: test stability across lexer invocations as we patch lexer rules under the hood
//
// ...
//

%%
"["[^\\]]"]" %{{{{{
return "%{..%}";
%}}}}}
a %{ return "A"; %}}}}}
b %{{{ return "A" + '%}'; %}}}

`,
        matches: false,
        yytext: '',
        offset: 208,
        base_position: 0,
        yyleng: 0,
        yylineno: 13,
        yylloc: {
          first_line: 14,
          first_column: 0,
          last_line: 14,
          last_column: 0,
          range: [
            208,
            208,
          ],
        },
        CRLF_Re: {
          re: '/\\r\\n?|\\n/',
          source: '\\r\\n?|\\n',
          flags: '',
        },
        options: {
          xregexp: true,
          ranges: true,
          trackPosition: true,
          easy_keyword_rules: true,
        },
        yy: {
          depth: 0,
          include_command_allowed: false,
        },
        __entire_action_block_matchers__: {},
      },
      isLexerError: true,
      yyErrorInvoked: true,
      isLexerBacktrackingNotSupportedError: false,
      isLexerInternalError: false,
      extra_error_attributes: null,
      lexerHasAlreadyForwardedCursorBy1: false,
      errorDiag: {
        inputPos: 5,
        yytext: '%',
        yyleng: 1,
        matches: [
          '%',
        ],
        activeCondition: 'rules',
        conditionStackDepth: 2,
      },
    },
    yylloc: {
      first_line: 12,
      first_column: 26,
      last_line: 12,
      last_column: 27,
      range: [
        202,
        203,
      ],
    },
  },
  {
    id: 5,
    token: '"}"',
    yytext: '}',
    yylloc: {
      first_line: 12,
      first_column: 27,
      last_line: 12,
      last_column: 28,
      range: [
        203,
        204,
      ],
    },
  },
  {
    id: 5,
    token: '"}"',
    yytext: '}',
    yylloc: {
      first_line: 12,
      first_column: 28,
      last_line: 12,
      last_column: 29,
      range: [
        204,
        205,
      ],
    },
  },
  {
    id: 5,
    token: '"}"',
    yytext: '}',
    yylloc: {
      first_line: 12,
      first_column: 29,
      last_line: 12,
      last_column: 30,
      range: [
        205,
        206,
      ],
    },
  },
  {
    id: 33,
    token: '"%%"',
    yytext: '',
    yylloc: {
      first_line: 14,
      first_column: 0,
      last_line: 14,
      last_column: 0,
      range: [
        208,
        208,
      ],
    },
  },
  {
    id: 1,
    token: 'end of input',
    yytext: '',
    yylloc: {
      first_line: 14,
      first_column: 0,
      last_line: 14,
      last_column: 0,
      range: [
        208,
        208,
      ],
    },
  },
  {
    id: 1,
    token: 'end of input',
    yytext: '',
    yylloc: {
      first_line: 14,
      first_column: 0,
      last_line: 14,
      last_column: 0,
      range: [
        208,
        208,
      ],
    },
  },
  {
    id: 1,
    token: 'end of input',
    yytext: '',
    yylloc: {
      first_line: 14,
      first_column: 0,
      last_line: 14,
      last_column: 0,
      range: [
        208,
        208,
      ],
    },
  },
  {
    id: 1,
    token: 'end of input',
    yytext: '',
    yylloc: {
      first_line: 14,
      first_column: 0,
      last_line: 14,
      last_column: 0,
      range: [
        208,
        208,
      ],
    },
  },
  {
    id: -2,
    token: null,
    summary: {
      totalTokenCount: 20,
      EOFTokenCount: 4,
      ERRORTokenCount: 2,
      ParseErrorCallCount: 3,
      DetectedParseErrorCallCount: 0,
      fatalExceptionCount: 0,
    },
  },
]