{
  rules: [
    {
      ast: {
        source: '/* ignore comment */',
        augmentedSource: `





              /* ignore comment */`,
        ast: {
          program: {
            type: 'Program',
            body: [],
            sourceType: 'script',
            loc: {
              start: {
                line: 7,
                column: 14,
                token: 0,
              },
              end: {
                line: 7,
                column: 34,
                token: 0,
              },
              lines: {
                infos: [
                  {
                    line: '',
                    indent: 0,
                    locked: false,
                    sliceStart: 0,
                    sliceEnd: 0,
                  },
                  {
                    line: '',
                    indent: 0,
                    locked: false,
                    sliceStart: 0,
                    sliceEnd: 0,
                  },
                  {
                    line: '',
                    indent: 0,
                    locked: false,
                    sliceStart: 0,
                    sliceEnd: 0,
                  },
                  {
                    line: '',
                    indent: 0,
                    locked: false,
                    sliceStart: 0,
                    sliceEnd: 0,
                  },
                  {
                    line: '',
                    indent: 0,
                    locked: false,
                    sliceStart: 0,
                    sliceEnd: 0,
                  },
                  {
                    line: '',
                    indent: 0,
                    locked: false,
                    sliceStart: 0,
                    sliceEnd: 0,
                  },
                  {
                    line: '              /* ignore comment */',
                    indent: 14,
                    locked: false,
                    sliceStart: 14,
                    sliceEnd: 34,
                  },
                ],
                mappings: [],
                cachedSourceMap: null,
                length: 7,
                name: null,
              },
              indent: 14,
              tokens: [],
            },
            errors: [],
            comments: [
              {
                type: 'Block',
                value: ' ignore comment ',
                loc: {
                  start: '[reference to sibling --> *.rules.[0].ast.ast.program.loc.start]',
                  end: {
                    line: 7,
                    column: 34,
                    token: 0,
                  },
                  lines: '[reference to sibling --> *.rules.[0].ast.ast.program.loc.lines]',
                  tokens: [],
                  indent: 14,
                },
                leading: false,
                trailing: false,
              },
            ],
          },
          name: null,
          loc: {
            start: {
              line: 1,
              column: 0,
              token: 0,
            },
            end: {
              line: 7,
              column: 34,
              token: 0,
            },
            lines: '[reference to sibling --> *.rules.[0].ast.ast.program.loc.lines]',
            indent: 0,
            tokens: [],
          },
          type: 'File',
          comments: null,
          tokens: [],
        },
        fault: false,
      },
      fault: false,
      srcCode: '/* ignore comment */',
      rule: '\\/\\/.*',
    },
    {
      ast: {
        source: "return 'MAIN'",
        augmentedSource: `






             return 'MAIN'`,
        ast: {
          program: {
            type: 'Program',
            body: [
              {
                type: 'ReturnStatement',
                argument: {
                  type: 'Literal',
                  value: 'MAIN',
                  raw: "'MAIN'",
                  loc: {
                    start: {
                      line: 8,
                      column: 20,
                      token: 1,
                    },
                    end: {
                      line: 8,
                      column: 26,
                      token: 2,
                    },
                    lines: {
                      infos: [
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: "             return 'MAIN'",
                          indent: 13,
                          locked: false,
                          sliceStart: 13,
                          sliceEnd: 26,
                        },
                      ],
                      mappings: [],
                      cachedSourceMap: null,
                      length: 8,
                      name: null,
                    },
                    tokens: [
                      {
                        type: 'Keyword',
                        value: 'return',
                      },
                      {
                        type: 'String',
                        value: "'MAIN'",
                      },
                    ],
                    indent: 13,
                  },
                },
                loc: {
                  start: {
                    line: 8,
                    column: 13,
                    token: 0,
                  },
                  end: {
                    line: 8,
                    column: 26,
                    token: 2,
                  },
                  lines: '[reference to sibling --> *.rules.[1].ast.ast.program.body.[0].argument.loc.lines]',
                  tokens: [
                    '[reference to sibling --> *.rules.[1].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
                    '[reference to sibling --> *.rules.[1].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
                  ],
                  indent: 13,
                },
              },
            ],
            sourceType: 'script',
            loc: {
              start: {
                line: 8,
                column: 13,
                token: 0,
              },
              end: {
                line: 8,
                column: 26,
                token: 2,
              },
              lines: '[reference to sibling --> *.rules.[1].ast.ast.program.body.[0].argument.loc.lines]',
              indent: 13,
              tokens: [
                '[reference to sibling --> *.rules.[1].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
                '[reference to sibling --> *.rules.[1].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
              ],
            },
            errors: [
              {
                index: 33,
                lineNumber: 8,
                description: 'Illegal return statement',
                message: 'Line 8: Illegal return statement',
                name: 'Error',
                stack: `Error: Line 8: Illegal return statement
    at ErrorHandler.constructError (/esprima.js:5012:22)
    at ErrorHandler.createError (/esprima.js:5028:27)
    at ErrorHandler.tolerateError (/esprima.js:5038:27)
    at JSXParser.Parser.tolerateError (/esprima.js:1951:28)
    at JSXParser.Parser.parseReturnStatement (/esprima.js:3911:19)
    at JSXParser.Parser.parseStatement (/esprima.js:4148:43)
    at JSXParser.Parser.parseStatementListItem (/esprima.js:3388:39)
    at JSXParser.Parser.parseScript (/esprima.js:4723:29)
    at Object.parse (/esprima.js:122:61)
    at Object.parse (/esprima.js:14:34)
    at Object.parse (/parser.js:23:30)
    at parseCodeChunkToAST (/lex-parser-cjs.js:1160:44)
    at checkActionBlock (/lex-parser-cjs.js:1286:18)
    at Object.parser__PerformAction (/lex-parser-cjs.js:4535:15)
    at Object.parse (/lex-parser-cjs.js:8934:24)
    at Object.yyparse [as parse] (/lex-parser-cjs.js:12777:25)
    at Context.testEachParserExample (/all-tests.js:483:27)
    at callFn (/runnable.js:364:21)
    at Test.Runnable.run (/runnable.js:352:5)
    at Runner.runTest (/runner.js:677:10)
    at /runner.js:801:12
    at next (/runner.js:594:14)
    at /runner.js:604:7
    at next (/runner.js:486:14)
    at cbHookRun (/runner.js:551:7)
    at done (/runnable.js:308:5)
    at callFn (/runnable.js:387:7)
    at Hook.Runnable.run (/runnable.js:352:5)
    at next (/runner.js:510:10)
    at Immediate._onImmediate (/runner.js:572:5)
    at processImmediate (/timers.js:456:21)`,
              },
            ],
          },
          name: null,
          loc: {
            start: {
              line: 1,
              column: 0,
              token: 0,
            },
            end: {
              line: 8,
              column: 26,
              token: 2,
            },
            lines: '[reference to sibling --> *.rules.[1].ast.ast.program.body.[0].argument.loc.lines]',
            indent: 0,
            tokens: [
              '[reference to sibling --> *.rules.[1].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
              '[reference to sibling --> *.rules.[1].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
            ],
          },
          type: 'File',
          comments: null,
          tokens: [
            '[reference to sibling --> *.rules.[1].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
            '[reference to sibling --> *.rules.[1].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
          ],
        },
        fault: false,
      },
      fault: false,
      srcCode: "return 'MAIN'",
      rule: 'main\\b',
    },
    {
      ast: {
        source: "return 'CLASS'",
        augmentedSource: `







             return 'CLASS'`,
        ast: {
          program: {
            type: 'Program',
            body: [
              {
                type: 'ReturnStatement',
                argument: {
                  type: 'Literal',
                  value: 'CLASS',
                  raw: "'CLASS'",
                  loc: {
                    start: {
                      line: 9,
                      column: 20,
                      token: 1,
                    },
                    end: {
                      line: 9,
                      column: 27,
                      token: 2,
                    },
                    lines: {
                      infos: [
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: "             return 'CLASS'",
                          indent: 13,
                          locked: false,
                          sliceStart: 13,
                          sliceEnd: 27,
                        },
                      ],
                      mappings: [],
                      cachedSourceMap: null,
                      length: 9,
                      name: null,
                    },
                    tokens: [
                      {
                        type: 'Keyword',
                        value: 'return',
                      },
                      {
                        type: 'String',
                        value: "'CLASS'",
                      },
                    ],
                    indent: 13,
                  },
                },
                loc: {
                  start: {
                    line: 9,
                    column: 13,
                    token: 0,
                  },
                  end: {
                    line: 9,
                    column: 27,
                    token: 2,
                  },
                  lines: '[reference to sibling --> *.rules.[2].ast.ast.program.body.[0].argument.loc.lines]',
                  tokens: [
                    '[reference to sibling --> *.rules.[2].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
                    '[reference to sibling --> *.rules.[2].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
                  ],
                  indent: 13,
                },
              },
            ],
            sourceType: 'script',
            loc: {
              start: {
                line: 9,
                column: 13,
                token: 0,
              },
              end: {
                line: 9,
                column: 27,
                token: 2,
              },
              lines: '[reference to sibling --> *.rules.[2].ast.ast.program.body.[0].argument.loc.lines]',
              indent: 13,
              tokens: [
                '[reference to sibling --> *.rules.[2].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
                '[reference to sibling --> *.rules.[2].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
              ],
            },
            errors: [
              {
                index: 35,
                lineNumber: 9,
                description: 'Illegal return statement',
                message: 'Line 9: Illegal return statement',
                name: 'Error',
                stack: `Error: Line 9: Illegal return statement
    at ErrorHandler.constructError (/esprima.js:5012:22)
    at ErrorHandler.createError (/esprima.js:5028:27)
    at ErrorHandler.tolerateError (/esprima.js:5038:27)
    at JSXParser.Parser.tolerateError (/esprima.js:1951:28)
    at JSXParser.Parser.parseReturnStatement (/esprima.js:3911:19)
    at JSXParser.Parser.parseStatement (/esprima.js:4148:43)
    at JSXParser.Parser.parseStatementListItem (/esprima.js:3388:39)
    at JSXParser.Parser.parseScript (/esprima.js:4723:29)
    at Object.parse (/esprima.js:122:61)
    at Object.parse (/esprima.js:14:34)
    at Object.parse (/parser.js:23:30)
    at parseCodeChunkToAST (/lex-parser-cjs.js:1160:44)
    at checkActionBlock (/lex-parser-cjs.js:1286:18)
    at Object.parser__PerformAction (/lex-parser-cjs.js:4535:15)
    at Object.parse (/lex-parser-cjs.js:8934:24)
    at Object.yyparse [as parse] (/lex-parser-cjs.js:12777:25)
    at Context.testEachParserExample (/all-tests.js:483:27)
    at callFn (/runnable.js:364:21)
    at Test.Runnable.run (/runnable.js:352:5)
    at Runner.runTest (/runner.js:677:10)
    at /runner.js:801:12
    at next (/runner.js:594:14)
    at /runner.js:604:7
    at next (/runner.js:486:14)
    at cbHookRun (/runner.js:551:7)
    at done (/runnable.js:308:5)
    at callFn (/runnable.js:387:7)
    at Hook.Runnable.run (/runnable.js:352:5)
    at next (/runner.js:510:10)
    at Immediate._onImmediate (/runner.js:572:5)
    at processImmediate (/timers.js:456:21)`,
              },
            ],
          },
          name: null,
          loc: {
            start: {
              line: 1,
              column: 0,
              token: 0,
            },
            end: {
              line: 9,
              column: 27,
              token: 2,
            },
            lines: '[reference to sibling --> *.rules.[2].ast.ast.program.body.[0].argument.loc.lines]',
            indent: 0,
            tokens: [
              '[reference to sibling --> *.rules.[2].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
              '[reference to sibling --> *.rules.[2].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
            ],
          },
          type: 'File',
          comments: null,
          tokens: [
            '[reference to sibling --> *.rules.[2].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
            '[reference to sibling --> *.rules.[2].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
          ],
        },
        fault: false,
      },
      fault: false,
      srcCode: "return 'CLASS'",
      rule: 'class\\b',
    },
    {
      ast: {
        source: "return 'EXTENDS'",
        augmentedSource: `








             return 'EXTENDS'`,
        ast: {
          program: {
            type: 'Program',
            body: [
              {
                type: 'ReturnStatement',
                argument: {
                  type: 'Literal',
                  value: 'EXTENDS',
                  raw: "'EXTENDS'",
                  loc: {
                    start: {
                      line: 10,
                      column: 20,
                      token: 1,
                    },
                    end: {
                      line: 10,
                      column: 29,
                      token: 2,
                    },
                    lines: {
                      infos: [
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: "             return 'EXTENDS'",
                          indent: 13,
                          locked: false,
                          sliceStart: 13,
                          sliceEnd: 29,
                        },
                      ],
                      mappings: [],
                      cachedSourceMap: null,
                      length: 10,
                      name: null,
                    },
                    tokens: [
                      {
                        type: 'Keyword',
                        value: 'return',
                      },
                      {
                        type: 'String',
                        value: "'EXTENDS'",
                      },
                    ],
                    indent: 13,
                  },
                },
                loc: {
                  start: {
                    line: 10,
                    column: 13,
                    token: 0,
                  },
                  end: {
                    line: 10,
                    column: 29,
                    token: 2,
                  },
                  lines: '[reference to sibling --> *.rules.[3].ast.ast.program.body.[0].argument.loc.lines]',
                  tokens: [
                    '[reference to sibling --> *.rules.[3].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
                    '[reference to sibling --> *.rules.[3].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
                  ],
                  indent: 13,
                },
              },
            ],
            sourceType: 'script',
            loc: {
              start: {
                line: 10,
                column: 13,
                token: 0,
              },
              end: {
                line: 10,
                column: 29,
                token: 2,
              },
              lines: '[reference to sibling --> *.rules.[3].ast.ast.program.body.[0].argument.loc.lines]',
              indent: 13,
              tokens: [
                '[reference to sibling --> *.rules.[3].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
                '[reference to sibling --> *.rules.[3].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
              ],
            },
            errors: [
              {
                index: 37,
                lineNumber: 10,
                description: 'Illegal return statement',
                message: 'Line 10: Illegal return statement',
                name: 'Error',
                stack: `Error: Line 10: Illegal return statement
    at ErrorHandler.constructError (/esprima.js:5012:22)
    at ErrorHandler.createError (/esprima.js:5028:27)
    at ErrorHandler.tolerateError (/esprima.js:5038:27)
    at JSXParser.Parser.tolerateError (/esprima.js:1951:28)
    at JSXParser.Parser.parseReturnStatement (/esprima.js:3911:19)
    at JSXParser.Parser.parseStatement (/esprima.js:4148:43)
    at JSXParser.Parser.parseStatementListItem (/esprima.js:3388:39)
    at JSXParser.Parser.parseScript (/esprima.js:4723:29)
    at Object.parse (/esprima.js:122:61)
    at Object.parse (/esprima.js:14:34)
    at Object.parse (/parser.js:23:30)
    at parseCodeChunkToAST (/lex-parser-cjs.js:1160:44)
    at checkActionBlock (/lex-parser-cjs.js:1286:18)
    at Object.parser__PerformAction (/lex-parser-cjs.js:4535:15)
    at Object.parse (/lex-parser-cjs.js:8934:24)
    at Object.yyparse [as parse] (/lex-parser-cjs.js:12777:25)
    at Context.testEachParserExample (/all-tests.js:483:27)
    at callFn (/runnable.js:364:21)
    at Test.Runnable.run (/runnable.js:352:5)
    at Runner.runTest (/runner.js:677:10)
    at /runner.js:801:12
    at next (/runner.js:594:14)
    at /runner.js:604:7
    at next (/runner.js:486:14)
    at cbHookRun (/runner.js:551:7)
    at done (/runnable.js:308:5)
    at callFn (/runnable.js:387:7)
    at Hook.Runnable.run (/runnable.js:352:5)
    at next (/runner.js:510:10)
    at Immediate._onImmediate (/runner.js:572:5)
    at processImmediate (/timers.js:456:21)`,
              },
            ],
          },
          name: null,
          loc: {
            start: {
              line: 1,
              column: 0,
              token: 0,
            },
            end: {
              line: 10,
              column: 29,
              token: 2,
            },
            lines: '[reference to sibling --> *.rules.[3].ast.ast.program.body.[0].argument.loc.lines]',
            indent: 0,
            tokens: [
              '[reference to sibling --> *.rules.[3].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
              '[reference to sibling --> *.rules.[3].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
            ],
          },
          type: 'File',
          comments: null,
          tokens: [
            '[reference to sibling --> *.rules.[3].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
            '[reference to sibling --> *.rules.[3].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
          ],
        },
        fault: false,
      },
      fault: false,
      srcCode: "return 'EXTENDS'",
      rule: 'extends\\b',
    },
    {
      ast: {
        source: "return 'NATTYPE'",
        augmentedSource: `









             return 'NATTYPE'`,
        ast: {
          program: {
            type: 'Program',
            body: [
              {
                type: 'ReturnStatement',
                argument: {
                  type: 'Literal',
                  value: 'NATTYPE',
                  raw: "'NATTYPE'",
                  loc: {
                    start: {
                      line: 11,
                      column: 20,
                      token: 1,
                    },
                    end: {
                      line: 11,
                      column: 29,
                      token: 2,
                    },
                    lines: {
                      infos: [
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: "             return 'NATTYPE'",
                          indent: 13,
                          locked: false,
                          sliceStart: 13,
                          sliceEnd: 29,
                        },
                      ],
                      mappings: [],
                      cachedSourceMap: null,
                      length: 11,
                      name: null,
                    },
                    tokens: [
                      {
                        type: 'Keyword',
                        value: 'return',
                      },
                      {
                        type: 'String',
                        value: "'NATTYPE'",
                      },
                    ],
                    indent: 13,
                  },
                },
                loc: {
                  start: {
                    line: 11,
                    column: 13,
                    token: 0,
                  },
                  end: {
                    line: 11,
                    column: 29,
                    token: 2,
                  },
                  lines: '[reference to sibling --> *.rules.[4].ast.ast.program.body.[0].argument.loc.lines]',
                  tokens: [
                    '[reference to sibling --> *.rules.[4].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
                    '[reference to sibling --> *.rules.[4].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
                  ],
                  indent: 13,
                },
              },
            ],
            sourceType: 'script',
            loc: {
              start: {
                line: 11,
                column: 13,
                token: 0,
              },
              end: {
                line: 11,
                column: 29,
                token: 2,
              },
              lines: '[reference to sibling --> *.rules.[4].ast.ast.program.body.[0].argument.loc.lines]',
              indent: 13,
              tokens: [
                '[reference to sibling --> *.rules.[4].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
                '[reference to sibling --> *.rules.[4].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
              ],
            },
            errors: [
              {
                index: 39,
                lineNumber: 11,
                description: 'Illegal return statement',
                message: 'Line 11: Illegal return statement',
                name: 'Error',
                stack: `Error: Line 11: Illegal return statement
    at ErrorHandler.constructError (/esprima.js:5012:22)
    at ErrorHandler.createError (/esprima.js:5028:27)
    at ErrorHandler.tolerateError (/esprima.js:5038:27)
    at JSXParser.Parser.tolerateError (/esprima.js:1951:28)
    at JSXParser.Parser.parseReturnStatement (/esprima.js:3911:19)
    at JSXParser.Parser.parseStatement (/esprima.js:4148:43)
    at JSXParser.Parser.parseStatementListItem (/esprima.js:3388:39)
    at JSXParser.Parser.parseScript (/esprima.js:4723:29)
    at Object.parse (/esprima.js:122:61)
    at Object.parse (/esprima.js:14:34)
    at Object.parse (/parser.js:23:30)
    at parseCodeChunkToAST (/lex-parser-cjs.js:1160:44)
    at checkActionBlock (/lex-parser-cjs.js:1286:18)
    at Object.parser__PerformAction (/lex-parser-cjs.js:4535:15)
    at Object.parse (/lex-parser-cjs.js:8934:24)
    at Object.yyparse [as parse] (/lex-parser-cjs.js:12777:25)
    at Context.testEachParserExample (/all-tests.js:483:27)
    at callFn (/runnable.js:364:21)
    at Test.Runnable.run (/runnable.js:352:5)
    at Runner.runTest (/runner.js:677:10)
    at /runner.js:801:12
    at next (/runner.js:594:14)
    at /runner.js:604:7
    at next (/runner.js:486:14)
    at cbHookRun (/runner.js:551:7)
    at done (/runnable.js:308:5)
    at callFn (/runnable.js:387:7)
    at Hook.Runnable.run (/runnable.js:352:5)
    at next (/runner.js:510:10)
    at Immediate._onImmediate (/runner.js:572:5)
    at processImmediate (/timers.js:456:21)`,
              },
            ],
          },
          name: null,
          loc: {
            start: {
              line: 1,
              column: 0,
              token: 0,
            },
            end: {
              line: 11,
              column: 29,
              token: 2,
            },
            lines: '[reference to sibling --> *.rules.[4].ast.ast.program.body.[0].argument.loc.lines]',
            indent: 0,
            tokens: [
              '[reference to sibling --> *.rules.[4].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
              '[reference to sibling --> *.rules.[4].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
            ],
          },
          type: 'File',
          comments: null,
          tokens: [
            '[reference to sibling --> *.rules.[4].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
            '[reference to sibling --> *.rules.[4].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
          ],
        },
        fault: false,
      },
      fault: false,
      srcCode: "return 'NATTYPE'",
      rule: 'nat\\b',
    },
    {
      ast: {
        source: "return 'IF'",
        augmentedSource: `










             return 'IF'`,
        ast: {
          program: {
            type: 'Program',
            body: [
              {
                type: 'ReturnStatement',
                argument: {
                  type: 'Literal',
                  value: 'IF',
                  raw: "'IF'",
                  loc: {
                    start: {
                      line: 12,
                      column: 20,
                      token: 1,
                    },
                    end: {
                      line: 12,
                      column: 24,
                      token: 2,
                    },
                    lines: {
                      infos: [
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: "             return 'IF'",
                          indent: 13,
                          locked: false,
                          sliceStart: 13,
                          sliceEnd: 24,
                        },
                      ],
                      mappings: [],
                      cachedSourceMap: null,
                      length: 12,
                      name: null,
                    },
                    tokens: [
                      {
                        type: 'Keyword',
                        value: 'return',
                      },
                      {
                        type: 'String',
                        value: "'IF'",
                      },
                    ],
                    indent: 13,
                  },
                },
                loc: {
                  start: {
                    line: 12,
                    column: 13,
                    token: 0,
                  },
                  end: {
                    line: 12,
                    column: 24,
                    token: 2,
                  },
                  lines: '[reference to sibling --> *.rules.[5].ast.ast.program.body.[0].argument.loc.lines]',
                  tokens: [
                    '[reference to sibling --> *.rules.[5].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
                    '[reference to sibling --> *.rules.[5].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
                  ],
                  indent: 13,
                },
              },
            ],
            sourceType: 'script',
            loc: {
              start: {
                line: 12,
                column: 13,
                token: 0,
              },
              end: {
                line: 12,
                column: 24,
                token: 2,
              },
              lines: '[reference to sibling --> *.rules.[5].ast.ast.program.body.[0].argument.loc.lines]',
              indent: 13,
              tokens: [
                '[reference to sibling --> *.rules.[5].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
                '[reference to sibling --> *.rules.[5].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
              ],
            },
            errors: [
              {
                index: 41,
                lineNumber: 12,
                description: 'Illegal return statement',
                message: 'Line 12: Illegal return statement',
                name: 'Error',
                stack: `Error: Line 12: Illegal return statement
    at ErrorHandler.constructError (/esprima.js:5012:22)
    at ErrorHandler.createError (/esprima.js:5028:27)
    at ErrorHandler.tolerateError (/esprima.js:5038:27)
    at JSXParser.Parser.tolerateError (/esprima.js:1951:28)
    at JSXParser.Parser.parseReturnStatement (/esprima.js:3911:19)
    at JSXParser.Parser.parseStatement (/esprima.js:4148:43)
    at JSXParser.Parser.parseStatementListItem (/esprima.js:3388:39)
    at JSXParser.Parser.parseScript (/esprima.js:4723:29)
    at Object.parse (/esprima.js:122:61)
    at Object.parse (/esprima.js:14:34)
    at Object.parse (/parser.js:23:30)
    at parseCodeChunkToAST (/lex-parser-cjs.js:1160:44)
    at checkActionBlock (/lex-parser-cjs.js:1286:18)
    at Object.parser__PerformAction (/lex-parser-cjs.js:4535:15)
    at Object.parse (/lex-parser-cjs.js:8934:24)
    at Object.yyparse [as parse] (/lex-parser-cjs.js:12777:25)
    at Context.testEachParserExample (/all-tests.js:483:27)
    at callFn (/runnable.js:364:21)
    at Test.Runnable.run (/runnable.js:352:5)
    at Runner.runTest (/runner.js:677:10)
    at /runner.js:801:12
    at next (/runner.js:594:14)
    at /runner.js:604:7
    at next (/runner.js:486:14)
    at cbHookRun (/runner.js:551:7)
    at done (/runnable.js:308:5)
    at callFn (/runnable.js:387:7)
    at Hook.Runnable.run (/runnable.js:352:5)
    at next (/runner.js:510:10)
    at Immediate._onImmediate (/runner.js:572:5)
    at processImmediate (/timers.js:456:21)`,
              },
            ],
          },
          name: null,
          loc: {
            start: {
              line: 1,
              column: 0,
              token: 0,
            },
            end: {
              line: 12,
              column: 24,
              token: 2,
            },
            lines: '[reference to sibling --> *.rules.[5].ast.ast.program.body.[0].argument.loc.lines]',
            indent: 0,
            tokens: [
              '[reference to sibling --> *.rules.[5].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
              '[reference to sibling --> *.rules.[5].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
            ],
          },
          type: 'File',
          comments: null,
          tokens: [
            '[reference to sibling --> *.rules.[5].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
            '[reference to sibling --> *.rules.[5].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
          ],
        },
        fault: false,
      },
      fault: false,
      srcCode: "return 'IF'",
      rule: 'if\\b',
    },
    {
      ast: {
        source: "return 'ELSE'",
        augmentedSource: `











             return 'ELSE'`,
        ast: {
          program: {
            type: 'Program',
            body: [
              {
                type: 'ReturnStatement',
                argument: {
                  type: 'Literal',
                  value: 'ELSE',
                  raw: "'ELSE'",
                  loc: {
                    start: {
                      line: 13,
                      column: 20,
                      token: 1,
                    },
                    end: {
                      line: 13,
                      column: 26,
                      token: 2,
                    },
                    lines: {
                      infos: [
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: "             return 'ELSE'",
                          indent: 13,
                          locked: false,
                          sliceStart: 13,
                          sliceEnd: 26,
                        },
                      ],
                      mappings: [],
                      cachedSourceMap: null,
                      length: 13,
                      name: null,
                    },
                    tokens: [
                      {
                        type: 'Keyword',
                        value: 'return',
                      },
                      {
                        type: 'String',
                        value: "'ELSE'",
                      },
                    ],
                    indent: 13,
                  },
                },
                loc: {
                  start: {
                    line: 13,
                    column: 13,
                    token: 0,
                  },
                  end: {
                    line: 13,
                    column: 26,
                    token: 2,
                  },
                  lines: '[reference to sibling --> *.rules.[6].ast.ast.program.body.[0].argument.loc.lines]',
                  tokens: [
                    '[reference to sibling --> *.rules.[6].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
                    '[reference to sibling --> *.rules.[6].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
                  ],
                  indent: 13,
                },
              },
            ],
            sourceType: 'script',
            loc: {
              start: {
                line: 13,
                column: 13,
                token: 0,
              },
              end: {
                line: 13,
                column: 26,
                token: 2,
              },
              lines: '[reference to sibling --> *.rules.[6].ast.ast.program.body.[0].argument.loc.lines]',
              indent: 13,
              tokens: [
                '[reference to sibling --> *.rules.[6].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
                '[reference to sibling --> *.rules.[6].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
              ],
            },
            errors: [
              {
                index: 43,
                lineNumber: 13,
                description: 'Illegal return statement',
                message: 'Line 13: Illegal return statement',
                name: 'Error',
                stack: `Error: Line 13: Illegal return statement
    at ErrorHandler.constructError (/esprima.js:5012:22)
    at ErrorHandler.createError (/esprima.js:5028:27)
    at ErrorHandler.tolerateError (/esprima.js:5038:27)
    at JSXParser.Parser.tolerateError (/esprima.js:1951:28)
    at JSXParser.Parser.parseReturnStatement (/esprima.js:3911:19)
    at JSXParser.Parser.parseStatement (/esprima.js:4148:43)
    at JSXParser.Parser.parseStatementListItem (/esprima.js:3388:39)
    at JSXParser.Parser.parseScript (/esprima.js:4723:29)
    at Object.parse (/esprima.js:122:61)
    at Object.parse (/esprima.js:14:34)
    at Object.parse (/parser.js:23:30)
    at parseCodeChunkToAST (/lex-parser-cjs.js:1160:44)
    at checkActionBlock (/lex-parser-cjs.js:1286:18)
    at Object.parser__PerformAction (/lex-parser-cjs.js:4535:15)
    at Object.parse (/lex-parser-cjs.js:8934:24)
    at Object.yyparse [as parse] (/lex-parser-cjs.js:12777:25)
    at Context.testEachParserExample (/all-tests.js:483:27)
    at callFn (/runnable.js:364:21)
    at Test.Runnable.run (/runnable.js:352:5)
    at Runner.runTest (/runner.js:677:10)
    at /runner.js:801:12
    at next (/runner.js:594:14)
    at /runner.js:604:7
    at next (/runner.js:486:14)
    at cbHookRun (/runner.js:551:7)
    at done (/runnable.js:308:5)
    at callFn (/runnable.js:387:7)
    at Hook.Runnable.run (/runnable.js:352:5)
    at next (/runner.js:510:10)
    at Immediate._onImmediate (/runner.js:572:5)
    at processImmediate (/timers.js:456:21)`,
              },
            ],
          },
          name: null,
          loc: {
            start: {
              line: 1,
              column: 0,
              token: 0,
            },
            end: {
              line: 13,
              column: 26,
              token: 2,
            },
            lines: '[reference to sibling --> *.rules.[6].ast.ast.program.body.[0].argument.loc.lines]',
            indent: 0,
            tokens: [
              '[reference to sibling --> *.rules.[6].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
              '[reference to sibling --> *.rules.[6].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
            ],
          },
          type: 'File',
          comments: null,
          tokens: [
            '[reference to sibling --> *.rules.[6].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
            '[reference to sibling --> *.rules.[6].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
          ],
        },
        fault: false,
      },
      fault: false,
      srcCode: "return 'ELSE'",
      rule: 'else\\b',
    },
    {
      ast: {
        source: "return 'FOR'",
        augmentedSource: `












             return 'FOR'`,
        ast: {
          program: {
            type: 'Program',
            body: [
              {
                type: 'ReturnStatement',
                argument: {
                  type: 'Literal',
                  value: 'FOR',
                  raw: "'FOR'",
                  loc: {
                    start: {
                      line: 14,
                      column: 20,
                      token: 1,
                    },
                    end: {
                      line: 14,
                      column: 25,
                      token: 2,
                    },
                    lines: {
                      infos: [
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: "             return 'FOR'",
                          indent: 13,
                          locked: false,
                          sliceStart: 13,
                          sliceEnd: 25,
                        },
                      ],
                      mappings: [],
                      cachedSourceMap: null,
                      length: 14,
                      name: null,
                    },
                    tokens: [
                      {
                        type: 'Keyword',
                        value: 'return',
                      },
                      {
                        type: 'String',
                        value: "'FOR'",
                      },
                    ],
                    indent: 13,
                  },
                },
                loc: {
                  start: {
                    line: 14,
                    column: 13,
                    token: 0,
                  },
                  end: {
                    line: 14,
                    column: 25,
                    token: 2,
                  },
                  lines: '[reference to sibling --> *.rules.[7].ast.ast.program.body.[0].argument.loc.lines]',
                  tokens: [
                    '[reference to sibling --> *.rules.[7].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
                    '[reference to sibling --> *.rules.[7].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
                  ],
                  indent: 13,
                },
              },
            ],
            sourceType: 'script',
            loc: {
              start: {
                line: 14,
                column: 13,
                token: 0,
              },
              end: {
                line: 14,
                column: 25,
                token: 2,
              },
              lines: '[reference to sibling --> *.rules.[7].ast.ast.program.body.[0].argument.loc.lines]',
              indent: 13,
              tokens: [
                '[reference to sibling --> *.rules.[7].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
                '[reference to sibling --> *.rules.[7].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
              ],
            },
            errors: [
              {
                index: 45,
                lineNumber: 14,
                description: 'Illegal return statement',
                message: 'Line 14: Illegal return statement',
                name: 'Error',
                stack: `Error: Line 14: Illegal return statement
    at ErrorHandler.constructError (/esprima.js:5012:22)
    at ErrorHandler.createError (/esprima.js:5028:27)
    at ErrorHandler.tolerateError (/esprima.js:5038:27)
    at JSXParser.Parser.tolerateError (/esprima.js:1951:28)
    at JSXParser.Parser.parseReturnStatement (/esprima.js:3911:19)
    at JSXParser.Parser.parseStatement (/esprima.js:4148:43)
    at JSXParser.Parser.parseStatementListItem (/esprima.js:3388:39)
    at JSXParser.Parser.parseScript (/esprima.js:4723:29)
    at Object.parse (/esprima.js:122:61)
    at Object.parse (/esprima.js:14:34)
    at Object.parse (/parser.js:23:30)
    at parseCodeChunkToAST (/lex-parser-cjs.js:1160:44)
    at checkActionBlock (/lex-parser-cjs.js:1286:18)
    at Object.parser__PerformAction (/lex-parser-cjs.js:4535:15)
    at Object.parse (/lex-parser-cjs.js:8934:24)
    at Object.yyparse [as parse] (/lex-parser-cjs.js:12777:25)
    at Context.testEachParserExample (/all-tests.js:483:27)
    at callFn (/runnable.js:364:21)
    at Test.Runnable.run (/runnable.js:352:5)
    at Runner.runTest (/runner.js:677:10)
    at /runner.js:801:12
    at next (/runner.js:594:14)
    at /runner.js:604:7
    at next (/runner.js:486:14)
    at cbHookRun (/runner.js:551:7)
    at done (/runnable.js:308:5)
    at callFn (/runnable.js:387:7)
    at Hook.Runnable.run (/runnable.js:352:5)
    at next (/runner.js:510:10)
    at Immediate._onImmediate (/runner.js:572:5)
    at processImmediate (/timers.js:456:21)`,
              },
            ],
          },
          name: null,
          loc: {
            start: {
              line: 1,
              column: 0,
              token: 0,
            },
            end: {
              line: 14,
              column: 25,
              token: 2,
            },
            lines: '[reference to sibling --> *.rules.[7].ast.ast.program.body.[0].argument.loc.lines]',
            indent: 0,
            tokens: [
              '[reference to sibling --> *.rules.[7].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
              '[reference to sibling --> *.rules.[7].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
            ],
          },
          type: 'File',
          comments: null,
          tokens: [
            '[reference to sibling --> *.rules.[7].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
            '[reference to sibling --> *.rules.[7].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
          ],
        },
        fault: false,
      },
      fault: false,
      srcCode: "return 'FOR'",
      rule: 'for\\b',
    },
    {
      ast: {
        source: "return 'PRINTNAT'",
        augmentedSource: `













             return 'PRINTNAT'`,
        ast: {
          program: {
            type: 'Program',
            body: [
              {
                type: 'ReturnStatement',
                argument: {
                  type: 'Literal',
                  value: 'PRINTNAT',
                  raw: "'PRINTNAT'",
                  loc: {
                    start: {
                      line: 15,
                      column: 20,
                      token: 1,
                    },
                    end: {
                      line: 15,
                      column: 30,
                      token: 2,
                    },
                    lines: {
                      infos: [
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: "             return 'PRINTNAT'",
                          indent: 13,
                          locked: false,
                          sliceStart: 13,
                          sliceEnd: 30,
                        },
                      ],
                      mappings: [],
                      cachedSourceMap: null,
                      length: 15,
                      name: null,
                    },
                    tokens: [
                      {
                        type: 'Keyword',
                        value: 'return',
                      },
                      {
                        type: 'String',
                        value: "'PRINTNAT'",
                      },
                    ],
                    indent: 13,
                  },
                },
                loc: {
                  start: {
                    line: 15,
                    column: 13,
                    token: 0,
                  },
                  end: {
                    line: 15,
                    column: 30,
                    token: 2,
                  },
                  lines: '[reference to sibling --> *.rules.[8].ast.ast.program.body.[0].argument.loc.lines]',
                  tokens: [
                    '[reference to sibling --> *.rules.[8].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
                    '[reference to sibling --> *.rules.[8].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
                  ],
                  indent: 13,
                },
              },
            ],
            sourceType: 'script',
            loc: {
              start: {
                line: 15,
                column: 13,
                token: 0,
              },
              end: {
                line: 15,
                column: 30,
                token: 2,
              },
              lines: '[reference to sibling --> *.rules.[8].ast.ast.program.body.[0].argument.loc.lines]',
              indent: 13,
              tokens: [
                '[reference to sibling --> *.rules.[8].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
                '[reference to sibling --> *.rules.[8].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
              ],
            },
            errors: [
              {
                index: 47,
                lineNumber: 15,
                description: 'Illegal return statement',
                message: 'Line 15: Illegal return statement',
                name: 'Error',
                stack: `Error: Line 15: Illegal return statement
    at ErrorHandler.constructError (/esprima.js:5012:22)
    at ErrorHandler.createError (/esprima.js:5028:27)
    at ErrorHandler.tolerateError (/esprima.js:5038:27)
    at JSXParser.Parser.tolerateError (/esprima.js:1951:28)
    at JSXParser.Parser.parseReturnStatement (/esprima.js:3911:19)
    at JSXParser.Parser.parseStatement (/esprima.js:4148:43)
    at JSXParser.Parser.parseStatementListItem (/esprima.js:3388:39)
    at JSXParser.Parser.parseScript (/esprima.js:4723:29)
    at Object.parse (/esprima.js:122:61)
    at Object.parse (/esprima.js:14:34)
    at Object.parse (/parser.js:23:30)
    at parseCodeChunkToAST (/lex-parser-cjs.js:1160:44)
    at checkActionBlock (/lex-parser-cjs.js:1286:18)
    at Object.parser__PerformAction (/lex-parser-cjs.js:4535:15)
    at Object.parse (/lex-parser-cjs.js:8934:24)
    at Object.yyparse [as parse] (/lex-parser-cjs.js:12777:25)
    at Context.testEachParserExample (/all-tests.js:483:27)
    at callFn (/runnable.js:364:21)
    at Test.Runnable.run (/runnable.js:352:5)
    at Runner.runTest (/runner.js:677:10)
    at /runner.js:801:12
    at next (/runner.js:594:14)
    at /runner.js:604:7
    at next (/runner.js:486:14)
    at cbHookRun (/runner.js:551:7)
    at done (/runnable.js:308:5)
    at callFn (/runnable.js:387:7)
    at Hook.Runnable.run (/runnable.js:352:5)
    at next (/runner.js:510:10)
    at Immediate._onImmediate (/runner.js:572:5)
    at processImmediate (/timers.js:456:21)`,
              },
            ],
          },
          name: null,
          loc: {
            start: {
              line: 1,
              column: 0,
              token: 0,
            },
            end: {
              line: 15,
              column: 30,
              token: 2,
            },
            lines: '[reference to sibling --> *.rules.[8].ast.ast.program.body.[0].argument.loc.lines]',
            indent: 0,
            tokens: [
              '[reference to sibling --> *.rules.[8].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
              '[reference to sibling --> *.rules.[8].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
            ],
          },
          type: 'File',
          comments: null,
          tokens: [
            '[reference to sibling --> *.rules.[8].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
            '[reference to sibling --> *.rules.[8].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
          ],
        },
        fault: false,
      },
      fault: false,
      srcCode: "return 'PRINTNAT'",
      rule: 'printNat\\b',
    },
    {
      ast: {
        source: "return 'READNAT'",
        augmentedSource: `














             return 'READNAT'`,
        ast: {
          program: {
            type: 'Program',
            body: [
              {
                type: 'ReturnStatement',
                argument: {
                  type: 'Literal',
                  value: 'READNAT',
                  raw: "'READNAT'",
                  loc: {
                    start: {
                      line: 16,
                      column: 20,
                      token: 1,
                    },
                    end: {
                      line: 16,
                      column: 29,
                      token: 2,
                    },
                    lines: {
                      infos: [
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: "             return 'READNAT'",
                          indent: 13,
                          locked: false,
                          sliceStart: 13,
                          sliceEnd: 29,
                        },
                      ],
                      mappings: [],
                      cachedSourceMap: null,
                      length: 16,
                      name: null,
                    },
                    tokens: [
                      {
                        type: 'Keyword',
                        value: 'return',
                      },
                      {
                        type: 'String',
                        value: "'READNAT'",
                      },
                    ],
                    indent: 13,
                  },
                },
                loc: {
                  start: {
                    line: 16,
                    column: 13,
                    token: 0,
                  },
                  end: {
                    line: 16,
                    column: 29,
                    token: 2,
                  },
                  lines: '[reference to sibling --> *.rules.[9].ast.ast.program.body.[0].argument.loc.lines]',
                  tokens: [
                    '[reference to sibling --> *.rules.[9].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
                    '[reference to sibling --> *.rules.[9].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
                  ],
                  indent: 13,
                },
              },
            ],
            sourceType: 'script',
            loc: {
              start: {
                line: 16,
                column: 13,
                token: 0,
              },
              end: {
                line: 16,
                column: 29,
                token: 2,
              },
              lines: '[reference to sibling --> *.rules.[9].ast.ast.program.body.[0].argument.loc.lines]',
              indent: 13,
              tokens: [
                '[reference to sibling --> *.rules.[9].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
                '[reference to sibling --> *.rules.[9].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
              ],
            },
            errors: [
              {
                index: 49,
                lineNumber: 16,
                description: 'Illegal return statement',
                message: 'Line 16: Illegal return statement',
                name: 'Error',
                stack: `Error: Line 16: Illegal return statement
    at ErrorHandler.constructError (/esprima.js:5012:22)
    at ErrorHandler.createError (/esprima.js:5028:27)
    at ErrorHandler.tolerateError (/esprima.js:5038:27)
    at JSXParser.Parser.tolerateError (/esprima.js:1951:28)
    at JSXParser.Parser.parseReturnStatement (/esprima.js:3911:19)
    at JSXParser.Parser.parseStatement (/esprima.js:4148:43)
    at JSXParser.Parser.parseStatementListItem (/esprima.js:3388:39)
    at JSXParser.Parser.parseScript (/esprima.js:4723:29)
    at Object.parse (/esprima.js:122:61)
    at Object.parse (/esprima.js:14:34)
    at Object.parse (/parser.js:23:30)
    at parseCodeChunkToAST (/lex-parser-cjs.js:1160:44)
    at checkActionBlock (/lex-parser-cjs.js:1286:18)
    at Object.parser__PerformAction (/lex-parser-cjs.js:4535:15)
    at Object.parse (/lex-parser-cjs.js:8934:24)
    at Object.yyparse [as parse] (/lex-parser-cjs.js:12777:25)
    at Context.testEachParserExample (/all-tests.js:483:27)
    at callFn (/runnable.js:364:21)
    at Test.Runnable.run (/runnable.js:352:5)
    at Runner.runTest (/runner.js:677:10)
    at /runner.js:801:12
    at next (/runner.js:594:14)
    at /runner.js:604:7
    at next (/runner.js:486:14)
    at cbHookRun (/runner.js:551:7)
    at done (/runnable.js:308:5)
    at callFn (/runnable.js:387:7)
    at Hook.Runnable.run (/runnable.js:352:5)
    at next (/runner.js:510:10)
    at Immediate._onImmediate (/runner.js:572:5)
    at processImmediate (/timers.js:456:21)`,
              },
            ],
          },
          name: null,
          loc: {
            start: {
              line: 1,
              column: 0,
              token: 0,
            },
            end: {
              line: 16,
              column: 29,
              token: 2,
            },
            lines: '[reference to sibling --> *.rules.[9].ast.ast.program.body.[0].argument.loc.lines]',
            indent: 0,
            tokens: [
              '[reference to sibling --> *.rules.[9].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
              '[reference to sibling --> *.rules.[9].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
            ],
          },
          type: 'File',
          comments: null,
          tokens: [
            '[reference to sibling --> *.rules.[9].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
            '[reference to sibling --> *.rules.[9].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
          ],
        },
        fault: false,
      },
      fault: false,
      srcCode: "return 'READNAT'",
      rule: 'readNat\\b',
    },
    {
      ast: {
        source: "return 'THIS'",
        augmentedSource: `















             return 'THIS'`,
        ast: {
          program: {
            type: 'Program',
            body: [
              {
                type: 'ReturnStatement',
                argument: {
                  type: 'Literal',
                  value: 'THIS',
                  raw: "'THIS'",
                  loc: {
                    start: {
                      line: 17,
                      column: 20,
                      token: 1,
                    },
                    end: {
                      line: 17,
                      column: 26,
                      token: 2,
                    },
                    lines: {
                      infos: [
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: "             return 'THIS'",
                          indent: 13,
                          locked: false,
                          sliceStart: 13,
                          sliceEnd: 26,
                        },
                      ],
                      mappings: [],
                      cachedSourceMap: null,
                      length: 17,
                      name: null,
                    },
                    tokens: [
                      {
                        type: 'Keyword',
                        value: 'return',
                      },
                      {
                        type: 'String',
                        value: "'THIS'",
                      },
                    ],
                    indent: 13,
                  },
                },
                loc: {
                  start: {
                    line: 17,
                    column: 13,
                    token: 0,
                  },
                  end: {
                    line: 17,
                    column: 26,
                    token: 2,
                  },
                  lines: '[reference to sibling --> *.rules.[10].ast.ast.program.body.[0].argument.loc.lines]',
                  tokens: [
                    '[reference to sibling --> *.rules.[10].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
                    '[reference to sibling --> *.rules.[10].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
                  ],
                  indent: 13,
                },
              },
            ],
            sourceType: 'script',
            loc: {
              start: {
                line: 17,
                column: 13,
                token: 0,
              },
              end: {
                line: 17,
                column: 26,
                token: 2,
              },
              lines: '[reference to sibling --> *.rules.[10].ast.ast.program.body.[0].argument.loc.lines]',
              indent: 13,
              tokens: [
                '[reference to sibling --> *.rules.[10].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
                '[reference to sibling --> *.rules.[10].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
              ],
            },
            errors: [
              {
                index: 51,
                lineNumber: 17,
                description: 'Illegal return statement',
                message: 'Line 17: Illegal return statement',
                name: 'Error',
                stack: `Error: Line 17: Illegal return statement
    at ErrorHandler.constructError (/esprima.js:5012:22)
    at ErrorHandler.createError (/esprima.js:5028:27)
    at ErrorHandler.tolerateError (/esprima.js:5038:27)
    at JSXParser.Parser.tolerateError (/esprima.js:1951:28)
    at JSXParser.Parser.parseReturnStatement (/esprima.js:3911:19)
    at JSXParser.Parser.parseStatement (/esprima.js:4148:43)
    at JSXParser.Parser.parseStatementListItem (/esprima.js:3388:39)
    at JSXParser.Parser.parseScript (/esprima.js:4723:29)
    at Object.parse (/esprima.js:122:61)
    at Object.parse (/esprima.js:14:34)
    at Object.parse (/parser.js:23:30)
    at parseCodeChunkToAST (/lex-parser-cjs.js:1160:44)
    at checkActionBlock (/lex-parser-cjs.js:1286:18)
    at Object.parser__PerformAction (/lex-parser-cjs.js:4535:15)
    at Object.parse (/lex-parser-cjs.js:8934:24)
    at Object.yyparse [as parse] (/lex-parser-cjs.js:12777:25)
    at Context.testEachParserExample (/all-tests.js:483:27)
    at callFn (/runnable.js:364:21)
    at Test.Runnable.run (/runnable.js:352:5)
    at Runner.runTest (/runner.js:677:10)
    at /runner.js:801:12
    at next (/runner.js:594:14)
    at /runner.js:604:7
    at next (/runner.js:486:14)
    at cbHookRun (/runner.js:551:7)
    at done (/runnable.js:308:5)
    at callFn (/runnable.js:387:7)
    at Hook.Runnable.run (/runnable.js:352:5)
    at next (/runner.js:510:10)
    at Immediate._onImmediate (/runner.js:572:5)
    at processImmediate (/timers.js:456:21)`,
              },
            ],
          },
          name: null,
          loc: {
            start: {
              line: 1,
              column: 0,
              token: 0,
            },
            end: {
              line: 17,
              column: 26,
              token: 2,
            },
            lines: '[reference to sibling --> *.rules.[10].ast.ast.program.body.[0].argument.loc.lines]',
            indent: 0,
            tokens: [
              '[reference to sibling --> *.rules.[10].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
              '[reference to sibling --> *.rules.[10].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
            ],
          },
          type: 'File',
          comments: null,
          tokens: [
            '[reference to sibling --> *.rules.[10].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
            '[reference to sibling --> *.rules.[10].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
          ],
        },
        fault: false,
      },
      fault: false,
      srcCode: "return 'THIS'",
      rule: 'this\\b',
    },
    {
      ast: {
        source: "return 'NEW'",
        augmentedSource: `
















             return 'NEW'`,
        ast: {
          program: {
            type: 'Program',
            body: [
              {
                type: 'ReturnStatement',
                argument: {
                  type: 'Literal',
                  value: 'NEW',
                  raw: "'NEW'",
                  loc: {
                    start: {
                      line: 18,
                      column: 20,
                      token: 1,
                    },
                    end: {
                      line: 18,
                      column: 25,
                      token: 2,
                    },
                    lines: {
                      infos: [
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: "             return 'NEW'",
                          indent: 13,
                          locked: false,
                          sliceStart: 13,
                          sliceEnd: 25,
                        },
                      ],
                      mappings: [],
                      cachedSourceMap: null,
                      length: 18,
                      name: null,
                    },
                    tokens: [
                      {
                        type: 'Keyword',
                        value: 'return',
                      },
                      {
                        type: 'String',
                        value: "'NEW'",
                      },
                    ],
                    indent: 13,
                  },
                },
                loc: {
                  start: {
                    line: 18,
                    column: 13,
                    token: 0,
                  },
                  end: {
                    line: 18,
                    column: 25,
                    token: 2,
                  },
                  lines: '[reference to sibling --> *.rules.[11].ast.ast.program.body.[0].argument.loc.lines]',
                  tokens: [
                    '[reference to sibling --> *.rules.[11].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
                    '[reference to sibling --> *.rules.[11].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
                  ],
                  indent: 13,
                },
              },
            ],
            sourceType: 'script',
            loc: {
              start: {
                line: 18,
                column: 13,
                token: 0,
              },
              end: {
                line: 18,
                column: 25,
                token: 2,
              },
              lines: '[reference to sibling --> *.rules.[11].ast.ast.program.body.[0].argument.loc.lines]',
              indent: 13,
              tokens: [
                '[reference to sibling --> *.rules.[11].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
                '[reference to sibling --> *.rules.[11].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
              ],
            },
            errors: [
              {
                index: 53,
                lineNumber: 18,
                description: 'Illegal return statement',
                message: 'Line 18: Illegal return statement',
                name: 'Error',
                stack: `Error: Line 18: Illegal return statement
    at ErrorHandler.constructError (/esprima.js:5012:22)
    at ErrorHandler.createError (/esprima.js:5028:27)
    at ErrorHandler.tolerateError (/esprima.js:5038:27)
    at JSXParser.Parser.tolerateError (/esprima.js:1951:28)
    at JSXParser.Parser.parseReturnStatement (/esprima.js:3911:19)
    at JSXParser.Parser.parseStatement (/esprima.js:4148:43)
    at JSXParser.Parser.parseStatementListItem (/esprima.js:3388:39)
    at JSXParser.Parser.parseScript (/esprima.js:4723:29)
    at Object.parse (/esprima.js:122:61)
    at Object.parse (/esprima.js:14:34)
    at Object.parse (/parser.js:23:30)
    at parseCodeChunkToAST (/lex-parser-cjs.js:1160:44)
    at checkActionBlock (/lex-parser-cjs.js:1286:18)
    at Object.parser__PerformAction (/lex-parser-cjs.js:4535:15)
    at Object.parse (/lex-parser-cjs.js:8934:24)
    at Object.yyparse [as parse] (/lex-parser-cjs.js:12777:25)
    at Context.testEachParserExample (/all-tests.js:483:27)
    at callFn (/runnable.js:364:21)
    at Test.Runnable.run (/runnable.js:352:5)
    at Runner.runTest (/runner.js:677:10)
    at /runner.js:801:12
    at next (/runner.js:594:14)
    at /runner.js:604:7
    at next (/runner.js:486:14)
    at cbHookRun (/runner.js:551:7)
    at done (/runnable.js:308:5)
    at callFn (/runnable.js:387:7)
    at Hook.Runnable.run (/runnable.js:352:5)
    at next (/runner.js:510:10)
    at Immediate._onImmediate (/runner.js:572:5)
    at processImmediate (/timers.js:456:21)`,
              },
            ],
          },
          name: null,
          loc: {
            start: {
              line: 1,
              column: 0,
              token: 0,
            },
            end: {
              line: 18,
              column: 25,
              token: 2,
            },
            lines: '[reference to sibling --> *.rules.[11].ast.ast.program.body.[0].argument.loc.lines]',
            indent: 0,
            tokens: [
              '[reference to sibling --> *.rules.[11].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
              '[reference to sibling --> *.rules.[11].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
            ],
          },
          type: 'File',
          comments: null,
          tokens: [
            '[reference to sibling --> *.rules.[11].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
            '[reference to sibling --> *.rules.[11].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
          ],
        },
        fault: false,
      },
      fault: false,
      srcCode: "return 'NEW'",
      rule: 'new\\b',
    },
    {
      ast: {
        source: "return 'VAR'",
        augmentedSource: `

















             return 'VAR'`,
        ast: {
          program: {
            type: 'Program',
            body: [
              {
                type: 'ReturnStatement',
                argument: {
                  type: 'Literal',
                  value: 'VAR',
                  raw: "'VAR'",
                  loc: {
                    start: {
                      line: 19,
                      column: 20,
                      token: 1,
                    },
                    end: {
                      line: 19,
                      column: 25,
                      token: 2,
                    },
                    lines: {
                      infos: [
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: "             return 'VAR'",
                          indent: 13,
                          locked: false,
                          sliceStart: 13,
                          sliceEnd: 25,
                        },
                      ],
                      mappings: [],
                      cachedSourceMap: null,
                      length: 19,
                      name: null,
                    },
                    tokens: [
                      {
                        type: 'Keyword',
                        value: 'return',
                      },
                      {
                        type: 'String',
                        value: "'VAR'",
                      },
                    ],
                    indent: 13,
                  },
                },
                loc: {
                  start: {
                    line: 19,
                    column: 13,
                    token: 0,
                  },
                  end: {
                    line: 19,
                    column: 25,
                    token: 2,
                  },
                  lines: '[reference to sibling --> *.rules.[12].ast.ast.program.body.[0].argument.loc.lines]',
                  tokens: [
                    '[reference to sibling --> *.rules.[12].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
                    '[reference to sibling --> *.rules.[12].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
                  ],
                  indent: 13,
                },
              },
            ],
            sourceType: 'script',
            loc: {
              start: {
                line: 19,
                column: 13,
                token: 0,
              },
              end: {
                line: 19,
                column: 25,
                token: 2,
              },
              lines: '[reference to sibling --> *.rules.[12].ast.ast.program.body.[0].argument.loc.lines]',
              indent: 13,
              tokens: [
                '[reference to sibling --> *.rules.[12].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
                '[reference to sibling --> *.rules.[12].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
              ],
            },
            errors: [
              {
                index: 55,
                lineNumber: 19,
                description: 'Illegal return statement',
                message: 'Line 19: Illegal return statement',
                name: 'Error',
                stack: `Error: Line 19: Illegal return statement
    at ErrorHandler.constructError (/esprima.js:5012:22)
    at ErrorHandler.createError (/esprima.js:5028:27)
    at ErrorHandler.tolerateError (/esprima.js:5038:27)
    at JSXParser.Parser.tolerateError (/esprima.js:1951:28)
    at JSXParser.Parser.parseReturnStatement (/esprima.js:3911:19)
    at JSXParser.Parser.parseStatement (/esprima.js:4148:43)
    at JSXParser.Parser.parseStatementListItem (/esprima.js:3388:39)
    at JSXParser.Parser.parseScript (/esprima.js:4723:29)
    at Object.parse (/esprima.js:122:61)
    at Object.parse (/esprima.js:14:34)
    at Object.parse (/parser.js:23:30)
    at parseCodeChunkToAST (/lex-parser-cjs.js:1160:44)
    at checkActionBlock (/lex-parser-cjs.js:1286:18)
    at Object.parser__PerformAction (/lex-parser-cjs.js:4535:15)
    at Object.parse (/lex-parser-cjs.js:8934:24)
    at Object.yyparse [as parse] (/lex-parser-cjs.js:12777:25)
    at Context.testEachParserExample (/all-tests.js:483:27)
    at callFn (/runnable.js:364:21)
    at Test.Runnable.run (/runnable.js:352:5)
    at Runner.runTest (/runner.js:677:10)
    at /runner.js:801:12
    at next (/runner.js:594:14)
    at /runner.js:604:7
    at next (/runner.js:486:14)
    at cbHookRun (/runner.js:551:7)
    at done (/runnable.js:308:5)
    at callFn (/runnable.js:387:7)
    at Hook.Runnable.run (/runnable.js:352:5)
    at next (/runner.js:510:10)
    at Immediate._onImmediate (/runner.js:572:5)
    at processImmediate (/timers.js:456:21)`,
              },
            ],
          },
          name: null,
          loc: {
            start: {
              line: 1,
              column: 0,
              token: 0,
            },
            end: {
              line: 19,
              column: 25,
              token: 2,
            },
            lines: '[reference to sibling --> *.rules.[12].ast.ast.program.body.[0].argument.loc.lines]',
            indent: 0,
            tokens: [
              '[reference to sibling --> *.rules.[12].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
              '[reference to sibling --> *.rules.[12].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
            ],
          },
          type: 'File',
          comments: null,
          tokens: [
            '[reference to sibling --> *.rules.[12].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
            '[reference to sibling --> *.rules.[12].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
          ],
        },
        fault: false,
      },
      fault: false,
      srcCode: "return 'VAR'",
      rule: 'var\\b',
    },
    {
      ast: {
        source: "return 'NUL'",
        augmentedSource: `


















             return 'NUL'`,
        ast: {
          program: {
            type: 'Program',
            body: [
              {
                type: 'ReturnStatement',
                argument: {
                  type: 'Literal',
                  value: 'NUL',
                  raw: "'NUL'",
                  loc: {
                    start: {
                      line: 20,
                      column: 20,
                      token: 1,
                    },
                    end: {
                      line: 20,
                      column: 25,
                      token: 2,
                    },
                    lines: {
                      infos: [
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: "             return 'NUL'",
                          indent: 13,
                          locked: false,
                          sliceStart: 13,
                          sliceEnd: 25,
                        },
                      ],
                      mappings: [],
                      cachedSourceMap: null,
                      length: 20,
                      name: null,
                    },
                    tokens: [
                      {
                        type: 'Keyword',
                        value: 'return',
                      },
                      {
                        type: 'String',
                        value: "'NUL'",
                      },
                    ],
                    indent: 13,
                  },
                },
                loc: {
                  start: {
                    line: 20,
                    column: 13,
                    token: 0,
                  },
                  end: {
                    line: 20,
                    column: 25,
                    token: 2,
                  },
                  lines: '[reference to sibling --> *.rules.[13].ast.ast.program.body.[0].argument.loc.lines]',
                  tokens: [
                    '[reference to sibling --> *.rules.[13].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
                    '[reference to sibling --> *.rules.[13].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
                  ],
                  indent: 13,
                },
              },
            ],
            sourceType: 'script',
            loc: {
              start: {
                line: 20,
                column: 13,
                token: 0,
              },
              end: {
                line: 20,
                column: 25,
                token: 2,
              },
              lines: '[reference to sibling --> *.rules.[13].ast.ast.program.body.[0].argument.loc.lines]',
              indent: 13,
              tokens: [
                '[reference to sibling --> *.rules.[13].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
                '[reference to sibling --> *.rules.[13].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
              ],
            },
            errors: [
              {
                index: 57,
                lineNumber: 20,
                description: 'Illegal return statement',
                message: 'Line 20: Illegal return statement',
                name: 'Error',
                stack: `Error: Line 20: Illegal return statement
    at ErrorHandler.constructError (/esprima.js:5012:22)
    at ErrorHandler.createError (/esprima.js:5028:27)
    at ErrorHandler.tolerateError (/esprima.js:5038:27)
    at JSXParser.Parser.tolerateError (/esprima.js:1951:28)
    at JSXParser.Parser.parseReturnStatement (/esprima.js:3911:19)
    at JSXParser.Parser.parseStatement (/esprima.js:4148:43)
    at JSXParser.Parser.parseStatementListItem (/esprima.js:3388:39)
    at JSXParser.Parser.parseScript (/esprima.js:4723:29)
    at Object.parse (/esprima.js:122:61)
    at Object.parse (/esprima.js:14:34)
    at Object.parse (/parser.js:23:30)
    at parseCodeChunkToAST (/lex-parser-cjs.js:1160:44)
    at checkActionBlock (/lex-parser-cjs.js:1286:18)
    at Object.parser__PerformAction (/lex-parser-cjs.js:4535:15)
    at Object.parse (/lex-parser-cjs.js:8934:24)
    at Object.yyparse [as parse] (/lex-parser-cjs.js:12777:25)
    at Context.testEachParserExample (/all-tests.js:483:27)
    at callFn (/runnable.js:364:21)
    at Test.Runnable.run (/runnable.js:352:5)
    at Runner.runTest (/runner.js:677:10)
    at /runner.js:801:12
    at next (/runner.js:594:14)
    at /runner.js:604:7
    at next (/runner.js:486:14)
    at cbHookRun (/runner.js:551:7)
    at done (/runnable.js:308:5)
    at callFn (/runnable.js:387:7)
    at Hook.Runnable.run (/runnable.js:352:5)
    at next (/runner.js:510:10)
    at Immediate._onImmediate (/runner.js:572:5)
    at processImmediate (/timers.js:456:21)`,
              },
            ],
          },
          name: null,
          loc: {
            start: {
              line: 1,
              column: 0,
              token: 0,
            },
            end: {
              line: 20,
              column: 25,
              token: 2,
            },
            lines: '[reference to sibling --> *.rules.[13].ast.ast.program.body.[0].argument.loc.lines]',
            indent: 0,
            tokens: [
              '[reference to sibling --> *.rules.[13].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
              '[reference to sibling --> *.rules.[13].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
            ],
          },
          type: 'File',
          comments: null,
          tokens: [
            '[reference to sibling --> *.rules.[13].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
            '[reference to sibling --> *.rules.[13].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
          ],
        },
        fault: false,
      },
      fault: false,
      srcCode: "return 'NUL'",
      rule: 'null\\b',
    },
    {
      ast: {
        source: "return 'NATLITERAL'",
        augmentedSource: `



















               return 'NATLITERAL'`,
        ast: {
          program: {
            type: 'Program',
            body: [
              {
                type: 'ReturnStatement',
                argument: {
                  type: 'Literal',
                  value: 'NATLITERAL',
                  raw: "'NATLITERAL'",
                  loc: {
                    start: {
                      line: 21,
                      column: 22,
                      token: 1,
                    },
                    end: {
                      line: 21,
                      column: 34,
                      token: 2,
                    },
                    lines: {
                      infos: [
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: "               return 'NATLITERAL'",
                          indent: 15,
                          locked: false,
                          sliceStart: 15,
                          sliceEnd: 34,
                        },
                      ],
                      mappings: [],
                      cachedSourceMap: null,
                      length: 21,
                      name: null,
                    },
                    tokens: [
                      {
                        type: 'Keyword',
                        value: 'return',
                      },
                      {
                        type: 'String',
                        value: "'NATLITERAL'",
                      },
                    ],
                    indent: 15,
                  },
                },
                loc: {
                  start: {
                    line: 21,
                    column: 15,
                    token: 0,
                  },
                  end: {
                    line: 21,
                    column: 34,
                    token: 2,
                  },
                  lines: '[reference to sibling --> *.rules.[14].ast.ast.program.body.[0].argument.loc.lines]',
                  tokens: [
                    '[reference to sibling --> *.rules.[14].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
                    '[reference to sibling --> *.rules.[14].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
                  ],
                  indent: 15,
                },
              },
            ],
            sourceType: 'script',
            loc: {
              start: {
                line: 21,
                column: 15,
                token: 0,
              },
              end: {
                line: 21,
                column: 34,
                token: 2,
              },
              lines: '[reference to sibling --> *.rules.[14].ast.ast.program.body.[0].argument.loc.lines]',
              indent: 15,
              tokens: [
                '[reference to sibling --> *.rules.[14].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
                '[reference to sibling --> *.rules.[14].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
              ],
            },
            errors: [
              {
                index: 61,
                lineNumber: 21,
                description: 'Illegal return statement',
                message: 'Line 21: Illegal return statement',
                name: 'Error',
                stack: `Error: Line 21: Illegal return statement
    at ErrorHandler.constructError (/esprima.js:5012:22)
    at ErrorHandler.createError (/esprima.js:5028:27)
    at ErrorHandler.tolerateError (/esprima.js:5038:27)
    at JSXParser.Parser.tolerateError (/esprima.js:1951:28)
    at JSXParser.Parser.parseReturnStatement (/esprima.js:3911:19)
    at JSXParser.Parser.parseStatement (/esprima.js:4148:43)
    at JSXParser.Parser.parseStatementListItem (/esprima.js:3388:39)
    at JSXParser.Parser.parseScript (/esprima.js:4723:29)
    at Object.parse (/esprima.js:122:61)
    at Object.parse (/esprima.js:14:34)
    at Object.parse (/parser.js:23:30)
    at parseCodeChunkToAST (/lex-parser-cjs.js:1160:44)
    at checkActionBlock (/lex-parser-cjs.js:1286:18)
    at Object.parser__PerformAction (/lex-parser-cjs.js:4535:15)
    at Object.parse (/lex-parser-cjs.js:8934:24)
    at Object.yyparse [as parse] (/lex-parser-cjs.js:12777:25)
    at Context.testEachParserExample (/all-tests.js:483:27)
    at callFn (/runnable.js:364:21)
    at Test.Runnable.run (/runnable.js:352:5)
    at Runner.runTest (/runner.js:677:10)
    at /runner.js:801:12
    at next (/runner.js:594:14)
    at /runner.js:604:7
    at next (/runner.js:486:14)
    at cbHookRun (/runner.js:551:7)
    at done (/runnable.js:308:5)
    at callFn (/runnable.js:387:7)
    at Hook.Runnable.run (/runnable.js:352:5)
    at next (/runner.js:510:10)
    at Immediate._onImmediate (/runner.js:572:5)
    at processImmediate (/timers.js:456:21)`,
              },
            ],
          },
          name: null,
          loc: {
            start: {
              line: 1,
              column: 0,
              token: 0,
            },
            end: {
              line: 21,
              column: 34,
              token: 2,
            },
            lines: '[reference to sibling --> *.rules.[14].ast.ast.program.body.[0].argument.loc.lines]',
            indent: 0,
            tokens: [
              '[reference to sibling --> *.rules.[14].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
              '[reference to sibling --> *.rules.[14].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
            ],
          },
          type: 'File',
          comments: null,
          tokens: [
            '[reference to sibling --> *.rules.[14].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
            '[reference to sibling --> *.rules.[14].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
          ],
        },
        fault: false,
      },
      fault: false,
      srcCode: "return 'NATLITERAL'",
      rule: '{digit}+',
    },
    {
      ast: {
        source: "return 'ID'",
        augmentedSource: `




















               return 'ID'`,
        ast: {
          program: {
            type: 'Program',
            body: [
              {
                type: 'ReturnStatement',
                argument: {
                  type: 'Literal',
                  value: 'ID',
                  raw: "'ID'",
                  loc: {
                    start: {
                      line: 22,
                      column: 22,
                      token: 1,
                    },
                    end: {
                      line: 22,
                      column: 26,
                      token: 2,
                    },
                    lines: {
                      infos: [
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: "               return 'ID'",
                          indent: 15,
                          locked: false,
                          sliceStart: 15,
                          sliceEnd: 26,
                        },
                      ],
                      mappings: [],
                      cachedSourceMap: null,
                      length: 22,
                      name: null,
                    },
                    tokens: [
                      {
                        type: 'Keyword',
                        value: 'return',
                      },
                      {
                        type: 'String',
                        value: "'ID'",
                      },
                    ],
                    indent: 15,
                  },
                },
                loc: {
                  start: {
                    line: 22,
                    column: 15,
                    token: 0,
                  },
                  end: {
                    line: 22,
                    column: 26,
                    token: 2,
                  },
                  lines: '[reference to sibling --> *.rules.[15].ast.ast.program.body.[0].argument.loc.lines]',
                  tokens: [
                    '[reference to sibling --> *.rules.[15].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
                    '[reference to sibling --> *.rules.[15].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
                  ],
                  indent: 15,
                },
              },
            ],
            sourceType: 'script',
            loc: {
              start: {
                line: 22,
                column: 15,
                token: 0,
              },
              end: {
                line: 22,
                column: 26,
                token: 2,
              },
              lines: '[reference to sibling --> *.rules.[15].ast.ast.program.body.[0].argument.loc.lines]',
              indent: 15,
              tokens: [
                '[reference to sibling --> *.rules.[15].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
                '[reference to sibling --> *.rules.[15].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
              ],
            },
            errors: [
              {
                index: 63,
                lineNumber: 22,
                description: 'Illegal return statement',
                message: 'Line 22: Illegal return statement',
                name: 'Error',
                stack: `Error: Line 22: Illegal return statement
    at ErrorHandler.constructError (/esprima.js:5012:22)
    at ErrorHandler.createError (/esprima.js:5028:27)
    at ErrorHandler.tolerateError (/esprima.js:5038:27)
    at JSXParser.Parser.tolerateError (/esprima.js:1951:28)
    at JSXParser.Parser.parseReturnStatement (/esprima.js:3911:19)
    at JSXParser.Parser.parseStatement (/esprima.js:4148:43)
    at JSXParser.Parser.parseStatementListItem (/esprima.js:3388:39)
    at JSXParser.Parser.parseScript (/esprima.js:4723:29)
    at Object.parse (/esprima.js:122:61)
    at Object.parse (/esprima.js:14:34)
    at Object.parse (/parser.js:23:30)
    at parseCodeChunkToAST (/lex-parser-cjs.js:1160:44)
    at checkActionBlock (/lex-parser-cjs.js:1286:18)
    at Object.parser__PerformAction (/lex-parser-cjs.js:4535:15)
    at Object.parse (/lex-parser-cjs.js:8934:24)
    at Object.yyparse [as parse] (/lex-parser-cjs.js:12777:25)
    at Context.testEachParserExample (/all-tests.js:483:27)
    at callFn (/runnable.js:364:21)
    at Test.Runnable.run (/runnable.js:352:5)
    at Runner.runTest (/runner.js:677:10)
    at /runner.js:801:12
    at next (/runner.js:594:14)
    at /runner.js:604:7
    at next (/runner.js:486:14)
    at cbHookRun (/runner.js:551:7)
    at done (/runnable.js:308:5)
    at callFn (/runnable.js:387:7)
    at Hook.Runnable.run (/runnable.js:352:5)
    at next (/runner.js:510:10)
    at Immediate._onImmediate (/runner.js:572:5)
    at processImmediate (/timers.js:456:21)`,
              },
            ],
          },
          name: null,
          loc: {
            start: {
              line: 1,
              column: 0,
              token: 0,
            },
            end: {
              line: 22,
              column: 26,
              token: 2,
            },
            lines: '[reference to sibling --> *.rules.[15].ast.ast.program.body.[0].argument.loc.lines]',
            indent: 0,
            tokens: [
              '[reference to sibling --> *.rules.[15].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
              '[reference to sibling --> *.rules.[15].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
            ],
          },
          type: 'File',
          comments: null,
          tokens: [
            '[reference to sibling --> *.rules.[15].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
            '[reference to sibling --> *.rules.[15].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
          ],
        },
        fault: false,
      },
      fault: false,
      srcCode: "return 'ID'",
      rule: '{id}',
    },
    {
      ast: {
        source: '/* skip whitespace */',
        augmentedSource: `





















               /* skip whitespace */`,
        ast: {
          program: {
            type: 'Program',
            body: [],
            sourceType: 'script',
            loc: {
              start: {
                line: 23,
                column: 15,
                token: 0,
              },
              end: {
                line: 23,
                column: 36,
                token: 0,
              },
              lines: {
                infos: [
                  {
                    line: '',
                    indent: 0,
                    locked: false,
                    sliceStart: 0,
                    sliceEnd: 0,
                  },
                  {
                    line: '',
                    indent: 0,
                    locked: false,
                    sliceStart: 0,
                    sliceEnd: 0,
                  },
                  {
                    line: '',
                    indent: 0,
                    locked: false,
                    sliceStart: 0,
                    sliceEnd: 0,
                  },
                  {
                    line: '',
                    indent: 0,
                    locked: false,
                    sliceStart: 0,
                    sliceEnd: 0,
                  },
                  {
                    line: '',
                    indent: 0,
                    locked: false,
                    sliceStart: 0,
                    sliceEnd: 0,
                  },
                  {
                    line: '',
                    indent: 0,
                    locked: false,
                    sliceStart: 0,
                    sliceEnd: 0,
                  },
                  {
                    line: '',
                    indent: 0,
                    locked: false,
                    sliceStart: 0,
                    sliceEnd: 0,
                  },
                  {
                    line: '',
                    indent: 0,
                    locked: false,
                    sliceStart: 0,
                    sliceEnd: 0,
                  },
                  {
                    line: '',
                    indent: 0,
                    locked: false,
                    sliceStart: 0,
                    sliceEnd: 0,
                  },
                  {
                    line: '',
                    indent: 0,
                    locked: false,
                    sliceStart: 0,
                    sliceEnd: 0,
                  },
                  {
                    line: '',
                    indent: 0,
                    locked: false,
                    sliceStart: 0,
                    sliceEnd: 0,
                  },
                  {
                    line: '',
                    indent: 0,
                    locked: false,
                    sliceStart: 0,
                    sliceEnd: 0,
                  },
                  {
                    line: '',
                    indent: 0,
                    locked: false,
                    sliceStart: 0,
                    sliceEnd: 0,
                  },
                  {
                    line: '',
                    indent: 0,
                    locked: false,
                    sliceStart: 0,
                    sliceEnd: 0,
                  },
                  {
                    line: '',
                    indent: 0,
                    locked: false,
                    sliceStart: 0,
                    sliceEnd: 0,
                  },
                  {
                    line: '',
                    indent: 0,
                    locked: false,
                    sliceStart: 0,
                    sliceEnd: 0,
                  },
                  {
                    line: '',
                    indent: 0,
                    locked: false,
                    sliceStart: 0,
                    sliceEnd: 0,
                  },
                  {
                    line: '',
                    indent: 0,
                    locked: false,
                    sliceStart: 0,
                    sliceEnd: 0,
                  },
                  {
                    line: '',
                    indent: 0,
                    locked: false,
                    sliceStart: 0,
                    sliceEnd: 0,
                  },
                  {
                    line: '',
                    indent: 0,
                    locked: false,
                    sliceStart: 0,
                    sliceEnd: 0,
                  },
                  {
                    line: '',
                    indent: 0,
                    locked: false,
                    sliceStart: 0,
                    sliceEnd: 0,
                  },
                  {
                    line: '',
                    indent: 0,
                    locked: false,
                    sliceStart: 0,
                    sliceEnd: 0,
                  },
                  {
                    line: '               /* skip whitespace */',
                    indent: 15,
                    locked: false,
                    sliceStart: 15,
                    sliceEnd: 36,
                  },
                ],
                mappings: [],
                cachedSourceMap: null,
                length: 23,
                name: null,
              },
              indent: 15,
              tokens: [],
            },
            errors: [],
            comments: [
              {
                type: 'Block',
                value: ' skip whitespace ',
                loc: {
                  start: '[reference to sibling --> *.rules.[16].ast.ast.program.loc.start]',
                  end: {
                    line: 23,
                    column: 36,
                    token: 0,
                  },
                  lines: '[reference to sibling --> *.rules.[16].ast.ast.program.loc.lines]',
                  tokens: [],
                  indent: 15,
                },
                leading: false,
                trailing: false,
              },
            ],
          },
          name: null,
          loc: {
            start: {
              line: 1,
              column: 0,
              token: 0,
            },
            end: {
              line: 23,
              column: 36,
              token: 0,
            },
            lines: '[reference to sibling --> *.rules.[16].ast.ast.program.loc.lines]',
            indent: 0,
            tokens: [],
          },
          type: 'File',
          comments: null,
          tokens: [],
        },
        fault: false,
      },
      fault: false,
      srcCode: '/* skip whitespace */',
      rule: '\\s+',
    },
    {
      ast: {
        source: "return 'Illegal character'",
        augmentedSource: `






















               return 'Illegal character'`,
        ast: {
          program: {
            type: 'Program',
            body: [
              {
                type: 'ReturnStatement',
                argument: {
                  type: 'Literal',
                  value: 'Illegal character',
                  raw: "'Illegal character'",
                  loc: {
                    start: {
                      line: 24,
                      column: 22,
                      token: 1,
                    },
                    end: {
                      line: 24,
                      column: 41,
                      token: 2,
                    },
                    lines: {
                      infos: [
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: "               return 'Illegal character'",
                          indent: 15,
                          locked: false,
                          sliceStart: 15,
                          sliceEnd: 41,
                        },
                      ],
                      mappings: [],
                      cachedSourceMap: null,
                      length: 24,
                      name: null,
                    },
                    tokens: [
                      {
                        type: 'Keyword',
                        value: 'return',
                      },
                      {
                        type: 'String',
                        value: "'Illegal character'",
                      },
                    ],
                    indent: 15,
                  },
                },
                loc: {
                  start: {
                    line: 24,
                    column: 15,
                    token: 0,
                  },
                  end: {
                    line: 24,
                    column: 41,
                    token: 2,
                  },
                  lines: '[reference to sibling --> *.rules.[17].ast.ast.program.body.[0].argument.loc.lines]',
                  tokens: [
                    '[reference to sibling --> *.rules.[17].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
                    '[reference to sibling --> *.rules.[17].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
                  ],
                  indent: 15,
                },
              },
            ],
            sourceType: 'script',
            loc: {
              start: {
                line: 24,
                column: 15,
                token: 0,
              },
              end: {
                line: 24,
                column: 41,
                token: 2,
              },
              lines: '[reference to sibling --> *.rules.[17].ast.ast.program.body.[0].argument.loc.lines]',
              indent: 15,
              tokens: [
                '[reference to sibling --> *.rules.[17].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
                '[reference to sibling --> *.rules.[17].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
              ],
            },
            errors: [
              {
                index: 67,
                lineNumber: 24,
                description: 'Illegal return statement',
                message: 'Line 24: Illegal return statement',
                name: 'Error',
                stack: `Error: Line 24: Illegal return statement
    at ErrorHandler.constructError (/esprima.js:5012:22)
    at ErrorHandler.createError (/esprima.js:5028:27)
    at ErrorHandler.tolerateError (/esprima.js:5038:27)
    at JSXParser.Parser.tolerateError (/esprima.js:1951:28)
    at JSXParser.Parser.parseReturnStatement (/esprima.js:3911:19)
    at JSXParser.Parser.parseStatement (/esprima.js:4148:43)
    at JSXParser.Parser.parseStatementListItem (/esprima.js:3388:39)
    at JSXParser.Parser.parseScript (/esprima.js:4723:29)
    at Object.parse (/esprima.js:122:61)
    at Object.parse (/esprima.js:14:34)
    at Object.parse (/parser.js:23:30)
    at parseCodeChunkToAST (/lex-parser-cjs.js:1160:44)
    at checkActionBlock (/lex-parser-cjs.js:1286:18)
    at Object.parser__PerformAction (/lex-parser-cjs.js:4535:15)
    at Object.parse (/lex-parser-cjs.js:8934:24)
    at Object.yyparse [as parse] (/lex-parser-cjs.js:12777:25)
    at Context.testEachParserExample (/all-tests.js:483:27)
    at callFn (/runnable.js:364:21)
    at Test.Runnable.run (/runnable.js:352:5)
    at Runner.runTest (/runner.js:677:10)
    at /runner.js:801:12
    at next (/runner.js:594:14)
    at /runner.js:604:7
    at next (/runner.js:486:14)
    at cbHookRun (/runner.js:551:7)
    at done (/runnable.js:308:5)
    at callFn (/runnable.js:387:7)
    at Hook.Runnable.run (/runnable.js:352:5)
    at next (/runner.js:510:10)
    at Immediate._onImmediate (/runner.js:572:5)
    at processImmediate (/timers.js:456:21)`,
              },
            ],
          },
          name: null,
          loc: {
            start: {
              line: 1,
              column: 0,
              token: 0,
            },
            end: {
              line: 24,
              column: 41,
              token: 2,
            },
            lines: '[reference to sibling --> *.rules.[17].ast.ast.program.body.[0].argument.loc.lines]',
            indent: 0,
            tokens: [
              '[reference to sibling --> *.rules.[17].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
              '[reference to sibling --> *.rules.[17].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
            ],
          },
          type: 'File',
          comments: null,
          tokens: [
            '[reference to sibling --> *.rules.[17].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
            '[reference to sibling --> *.rules.[17].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
          ],
        },
        fault: false,
      },
      fault: false,
      srcCode: "return 'Illegal character'",
      rule: '.',
    },
    {
      ast: {
        source: "return 'ENDOFFILE'",
        augmentedSource: `























               return 'ENDOFFILE'`,
        ast: {
          program: {
            type: 'Program',
            body: [
              {
                type: 'ReturnStatement',
                argument: {
                  type: 'Literal',
                  value: 'ENDOFFILE',
                  raw: "'ENDOFFILE'",
                  loc: {
                    start: {
                      line: 25,
                      column: 22,
                      token: 1,
                    },
                    end: {
                      line: 25,
                      column: 33,
                      token: 2,
                    },
                    lines: {
                      infos: [
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: "               return 'ENDOFFILE'",
                          indent: 15,
                          locked: false,
                          sliceStart: 15,
                          sliceEnd: 33,
                        },
                      ],
                      mappings: [],
                      cachedSourceMap: null,
                      length: 25,
                      name: null,
                    },
                    tokens: [
                      {
                        type: 'Keyword',
                        value: 'return',
                      },
                      {
                        type: 'String',
                        value: "'ENDOFFILE'",
                      },
                    ],
                    indent: 15,
                  },
                },
                loc: {
                  start: {
                    line: 25,
                    column: 15,
                    token: 0,
                  },
                  end: {
                    line: 25,
                    column: 33,
                    token: 2,
                  },
                  lines: '[reference to sibling --> *.rules.[18].ast.ast.program.body.[0].argument.loc.lines]',
                  tokens: [
                    '[reference to sibling --> *.rules.[18].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
                    '[reference to sibling --> *.rules.[18].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
                  ],
                  indent: 15,
                },
              },
            ],
            sourceType: 'script',
            loc: {
              start: {
                line: 25,
                column: 15,
                token: 0,
              },
              end: {
                line: 25,
                column: 33,
                token: 2,
              },
              lines: '[reference to sibling --> *.rules.[18].ast.ast.program.body.[0].argument.loc.lines]',
              indent: 15,
              tokens: [
                '[reference to sibling --> *.rules.[18].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
                '[reference to sibling --> *.rules.[18].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
              ],
            },
            errors: [
              {
                index: 69,
                lineNumber: 25,
                description: 'Illegal return statement',
                message: 'Line 25: Illegal return statement',
                name: 'Error',
                stack: `Error: Line 25: Illegal return statement
    at ErrorHandler.constructError (/esprima.js:5012:22)
    at ErrorHandler.createError (/esprima.js:5028:27)
    at ErrorHandler.tolerateError (/esprima.js:5038:27)
    at JSXParser.Parser.tolerateError (/esprima.js:1951:28)
    at JSXParser.Parser.parseReturnStatement (/esprima.js:3911:19)
    at JSXParser.Parser.parseStatement (/esprima.js:4148:43)
    at JSXParser.Parser.parseStatementListItem (/esprima.js:3388:39)
    at JSXParser.Parser.parseScript (/esprima.js:4723:29)
    at Object.parse (/esprima.js:122:61)
    at Object.parse (/esprima.js:14:34)
    at Object.parse (/parser.js:23:30)
    at parseCodeChunkToAST (/lex-parser-cjs.js:1160:44)
    at checkActionBlock (/lex-parser-cjs.js:1286:18)
    at Object.parser__PerformAction (/lex-parser-cjs.js:4535:15)
    at Object.parse (/lex-parser-cjs.js:8934:24)
    at Object.yyparse [as parse] (/lex-parser-cjs.js:12777:25)
    at Context.testEachParserExample (/all-tests.js:483:27)
    at callFn (/runnable.js:364:21)
    at Test.Runnable.run (/runnable.js:352:5)
    at Runner.runTest (/runner.js:677:10)
    at /runner.js:801:12
    at next (/runner.js:594:14)
    at /runner.js:604:7
    at next (/runner.js:486:14)
    at cbHookRun (/runner.js:551:7)
    at done (/runnable.js:308:5)
    at callFn (/runnable.js:387:7)
    at Hook.Runnable.run (/runnable.js:352:5)
    at next (/runner.js:510:10)
    at Immediate._onImmediate (/runner.js:572:5)
    at processImmediate (/timers.js:456:21)`,
              },
            ],
          },
          name: null,
          loc: {
            start: {
              line: 1,
              column: 0,
              token: 0,
            },
            end: {
              line: 25,
              column: 33,
              token: 2,
            },
            lines: '[reference to sibling --> *.rules.[18].ast.ast.program.body.[0].argument.loc.lines]',
            indent: 0,
            tokens: [
              '[reference to sibling --> *.rules.[18].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
              '[reference to sibling --> *.rules.[18].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
            ],
          },
          type: 'File',
          comments: null,
          tokens: [
            '[reference to sibling --> *.rules.[18].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
            '[reference to sibling --> *.rules.[18].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
          ],
        },
        fault: false,
      },
      fault: false,
      srcCode: "return 'ENDOFFILE'",
      rule: '$',
    },
    {
      ast: {
        source: "return 'EOF'",
        augmentedSource: `

























               return 'EOF'`,
        ast: {
          program: {
            type: 'Program',
            body: [
              {
                type: 'ReturnStatement',
                argument: {
                  type: 'Literal',
                  value: 'EOF',
                  raw: "'EOF'",
                  loc: {
                    start: {
                      line: 27,
                      column: 22,
                      token: 1,
                    },
                    end: {
                      line: 27,
                      column: 27,
                      token: 2,
                    },
                    lines: {
                      infos: [
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: '',
                          indent: 0,
                          locked: false,
                          sliceStart: 0,
                          sliceEnd: 0,
                        },
                        {
                          line: "               return 'EOF'",
                          indent: 15,
                          locked: false,
                          sliceStart: 15,
                          sliceEnd: 27,
                        },
                      ],
                      mappings: [],
                      cachedSourceMap: null,
                      length: 27,
                      name: null,
                    },
                    tokens: [
                      {
                        type: 'Keyword',
                        value: 'return',
                      },
                      {
                        type: 'String',
                        value: "'EOF'",
                      },
                    ],
                    indent: 15,
                  },
                },
                loc: {
                  start: {
                    line: 27,
                    column: 15,
                    token: 0,
                  },
                  end: {
                    line: 27,
                    column: 27,
                    token: 2,
                  },
                  lines: '[reference to sibling --> *.rules.[19].ast.ast.program.body.[0].argument.loc.lines]',
                  tokens: [
                    '[reference to sibling --> *.rules.[19].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
                    '[reference to sibling --> *.rules.[19].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
                  ],
                  indent: 15,
                },
              },
            ],
            sourceType: 'script',
            loc: {
              start: {
                line: 27,
                column: 15,
                token: 0,
              },
              end: {
                line: 27,
                column: 27,
                token: 2,
              },
              lines: '[reference to sibling --> *.rules.[19].ast.ast.program.body.[0].argument.loc.lines]',
              indent: 15,
              tokens: [
                '[reference to sibling --> *.rules.[19].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
                '[reference to sibling --> *.rules.[19].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
              ],
            },
            errors: [
              {
                index: 73,
                lineNumber: 27,
                description: 'Illegal return statement',
                message: 'Line 27: Illegal return statement',
                name: 'Error',
                stack: `Error: Line 27: Illegal return statement
    at ErrorHandler.constructError (/esprima.js:5012:22)
    at ErrorHandler.createError (/esprima.js:5028:27)
    at ErrorHandler.tolerateError (/esprima.js:5038:27)
    at JSXParser.Parser.tolerateError (/esprima.js:1951:28)
    at JSXParser.Parser.parseReturnStatement (/esprima.js:3911:19)
    at JSXParser.Parser.parseStatement (/esprima.js:4148:43)
    at JSXParser.Parser.parseStatementListItem (/esprima.js:3388:39)
    at JSXParser.Parser.parseScript (/esprima.js:4723:29)
    at Object.parse (/esprima.js:122:61)
    at Object.parse (/esprima.js:14:34)
    at Object.parse (/parser.js:23:30)
    at parseCodeChunkToAST (/lex-parser-cjs.js:1160:44)
    at checkActionBlock (/lex-parser-cjs.js:1286:18)
    at Object.parser__PerformAction (/lex-parser-cjs.js:4535:15)
    at Object.parse (/lex-parser-cjs.js:8934:24)
    at Object.yyparse [as parse] (/lex-parser-cjs.js:12777:25)
    at Context.testEachParserExample (/all-tests.js:483:27)
    at callFn (/runnable.js:364:21)
    at Test.Runnable.run (/runnable.js:352:5)
    at Runner.runTest (/runner.js:677:10)
    at /runner.js:801:12
    at next (/runner.js:594:14)
    at /runner.js:604:7
    at next (/runner.js:486:14)
    at cbHookRun (/runner.js:551:7)
    at done (/runnable.js:308:5)
    at callFn (/runnable.js:387:7)
    at Hook.Runnable.run (/runnable.js:352:5)
    at next (/runner.js:510:10)
    at Immediate._onImmediate (/runner.js:572:5)
    at processImmediate (/timers.js:456:21)`,
              },
            ],
          },
          name: null,
          loc: {
            start: {
              line: 1,
              column: 0,
              token: 0,
            },
            end: {
              line: 27,
              column: 27,
              token: 2,
            },
            lines: '[reference to sibling --> *.rules.[19].ast.ast.program.body.[0].argument.loc.lines]',
            indent: 0,
            tokens: [
              '[reference to sibling --> *.rules.[19].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
              '[reference to sibling --> *.rules.[19].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
            ],
          },
          type: 'File',
          comments: null,
          tokens: [
            '[reference to sibling --> *.rules.[19].ast.ast.program.body.[0].argument.loc.tokens.[0]]',
            '[reference to sibling --> *.rules.[19].ast.ast.program.body.[0].argument.loc.tokens.[1]]',
          ],
        },
        fault: false,
      },
      fault: false,
      srcCode: "return 'EOF'",
      rule: '$',
    },
  ],
  macros: {
    digit: '[0-9]',
    id: '[a-zA-Z_][a-zA-Z0-9_]*',
  },
  startConditions: {},
  codeSections: [],
  importDecls: [],
  unknownDecls: [],
  options: {
    easy_keyword_rules: true,
  },
  __extra_diag_info__: {
    pre_parse_callback_callCount: 1,
    post_parse_callback_callCount: 1,
    post_parse_diaginfo: {
      sharedState_yy: {
        startConditions: {},
        __options_flags__: 0,
        __options_category_description__: '???',
        __inside_scoped_ruleset__: false,
        __context_cfg_stack__: [],
        depth: 0,
        include_command_allowed: false,
      },
      hash: {
        errStr: null,
        exception: null,
        text: '',
        value: '',
        token: '"$accept"',
        token_id: 0,
        line: 26,
        expected: null,
        recoverable: false,
        state: 26,
        action: 2,
        new_state: 1,
        stack_pointer: 5,
      },
      reentrant_call_depth: 1,
      error_infos_stack: [
        {
          errStr: null,
          exception: null,
          text: '',
          value: '',
          token: '"$accept"',
          token_id: 0,
          line: 26,
          expected: null,
          recoverable: false,
          state: 26,
          action: 2,
          new_state: 1,
          stack_pointer: 5,
        },
      ],
      error_recovery_stack: [],
      error_infos_stack_size: 1,
      error_recovery_stack_size: 0,
    },
    reentrant_call_depth: 0,
    error_infos_stack_size: 0,
    error_recovery_stack_size: 0,
  },
  __original_input__: `digit      [0-9]
id         [a-zA-Z_][a-zA-Z0-9_]*

%options easy_keyword_rules 
%%

\\/\\/.*         /* ignore comment */
main          return 'MAIN';
class         return 'CLASS';
extends       return 'EXTENDS';
nat           return 'NATTYPE';
if            return 'IF';
else          return 'ELSE';
for           return 'FOR';
printNat      return 'PRINTNAT';
readNat       return 'READNAT';
this          return 'THIS';
new           return 'NEW';
var           return 'VAR';
null          return 'NUL';
{digit}+        return 'NATLITERAL';
{id}            return 'ID';
\\s+             /* skip whitespace */
.               return 'Illegal character';
$               return 'ENDOFFILE';

<<EOF>>         return 'EOF';`,
}