{
  id: -1,
  token: null,
  fail: 1,
  spec: `%%
"["[^\\]]"]" %{
return true;
%}
}

`,
  err: {
    hash: {
      errStr: `
There's probably an error in one or more of your lexer regex rules.
The lexer rule spec should have this structure:
    
        regex  action_code
    
where 'regex' is a lex-style regex expression (see the
jison and jison-lex documentation) which is intended to match a chunk
of the input to lex, while the 'action_code' block is the JS code
which will be invoked when the regex is matched. The 'action_code' block
may be any (indented!) set of JS statements, optionally surrounded
by '{...}' curly braces or otherwise enclosed in a '%{...%}' block.
    
  Erroneous code:
2: "["[^\\]]"]" %{
3: return true;
4: %}
5: }
^..^
6: 
7: 
    
  Technical error report:
Parse error on line 5:
}
^
Expecting end of input, "<", "|", "(", "/", ".", "^", "$", "ACTION_START_AT_SOL", "UNTERMINATED_ACTION_BLOCK", "ACTION_START", "UNKNOWN_DECL", "OPTIONS", "IMPORT", "INIT_CODE", "START_INC", "START_EXC", "%%", "SPECIAL_GROUP", "/!", "REGEX_SPECIAL_CHAR", "ESCAPED_CHAR", macro name in '{...}' curly braces, "REGEX_SET_START", "STRING_LIT", "CHARACTER_LIT", "option_keyword", "import_keyword", "init_code_keyword", "start_inclusive_keyword", "start_exclusive_keyword", "start_conditions_marker", "start_epilogue_marker", "scoped_rules_collective", "rule", "start_conditions", "regex", "nonempty_regex_list", "regex_concat", "regex_base", "name_expansion", "any_group_regex", "literal_string", "epilogue", got unexpected "}"
`,
      exception: null,
      text: '',
      value: '',
      token: 'end of input',
      token_id: 1,
      line: 6,
      recoverable: false,
      state: 87,
      action: 2,
      new_state: 3,
      stack_pointer: 6,
    },
    message: `
There's probably an error in one or more of your lexer regex rules.
The lexer rule spec should have this structure:
    
        regex  action_code
    
where 'regex' is a lex-style regex expression (see the
jison and jison-lex documentation) which is intended to match a chunk
of the input to lex, while the 'action_code' block is the JS code
which will be invoked when the regex is matched. The 'action_code' block
may be any (indented!) set of JS statements, optionally surrounded
by '{...}' curly braces or otherwise enclosed in a '%{...%}' block.
    
  Erroneous code:
2: "["[^\\]]"]" %{
3: return true;
4: %}
5: }
^..^
6: 
7: 
    
  Technical error report:
Parse error on line 5:
}
^
Expecting end of input, "<", "|", "(", "/", ".", "^", "$", "ACTION_START_AT_SOL", "UNTERMINATED_ACTION_BLOCK", "ACTION_START", "UNKNOWN_DECL", "OPTIONS", "IMPORT", "INIT_CODE", "START_INC", "START_EXC", "%%", "SPECIAL_GROUP", "/!", "REGEX_SPECIAL_CHAR", "ESCAPED_CHAR", macro name in '{...}' curly braces, "REGEX_SET_START", "STRING_LIT", "CHARACTER_LIT", "option_keyword", "import_keyword", "init_code_keyword", "start_inclusive_keyword", "start_exclusive_keyword", "start_conditions_marker", "start_epilogue_marker", "scoped_rules_collective", "rule", "start_conditions", "regex", "nonempty_regex_list", "regex_concat", "regex_base", "name_expansion", "any_group_regex", "literal_string", "epilogue", got unexpected "}"
`,
    name: 'JisonParserError',
    stack: `JisonParserError: 
There's probably an error in one or more of your lexer regex rules.
The lexer rule spec should have this structure:
    
        regex  action_code
    
where 'regex' is a lex-style regex expression (see the
jison and jison-lex documentation) which is intended to match a chunk
of the input to lex, while the 'action_code' block is the JS code
which will be invoked when the regex is matched. The 'action_code' block
may be any (indented!) set of JS statements, optionally surrounded
by '{...}' curly braces or otherwise enclosed in a '%{...%}' block.
    
  Erroneous code:
2: "["[^\\]]"]" %{
3: return true;
4: %}
5: }
^..^
6: 
7: 
    
  Technical error report:
Parse error on line 5:
}
^
Expecting end of input, "<", "|", "(", "/", ".", "^", "$", "ACTION_START_AT_SOL", "UNTERMINATED_ACTION_BLOCK", "ACTION_START", "UNKNOWN_DECL", "OPTIONS", "IMPORT", "INIT_CODE", "START_INC", "START_EXC", "%%", "SPECIAL_GROUP", "/!", "REGEX_SPECIAL_CHAR", "ESCAPED_CHAR", macro name in '{...}' curly braces, "REGEX_SET_START", "STRING_LIT", "CHARACTER_LIT", "option_keyword", "import_keyword", "init_code_keyword", "start_inclusive_keyword", "start_exclusive_keyword", "start_conditions_marker", "start_epilogue_marker", "scoped_rules_collective", "rule", "start_conditions", "regex", "nonempty_regex_list", "regex_concat", "regex_base", "name_expansion", "any_group_regex", "literal_string", "epilogue", got unexpected "}"

    at Object.parseError (/lex-parser-cjs.js:7138:15)
    at Object.yyError (/lex-parser-cjs.js:7328:25)
    at Object.parser__PerformAction (/lex-parser-cjs.js:2857:14)
    at Object.parse (/lex-parser-cjs.js:8392:24)
    at Object.yyparse [as parse] (/lex-parser-cjs.js:12302:25)
    at Context.testEachParserExample (/all-tests.js:466:27)
    at callFn (/runnable.js:364:21)
    at Test.Runnable.run (/runnable.js:352:5)
    at Runner.runTest (/runner.js:677:10)
    at /runner.js:801:12
    at next (/runner.js:594:14)
    at /runner.js:604:7
    at next (/runner.js:486:14)
    at cbHookRun (/runner.js:551:7)
    at done (/runnable.js:308:5)
    at callFn (/runnable.js:387:7)
    at Hook.Runnable.run (/runnable.js:352:5)
    at next (/runner.js:510:10)
    at Immediate._onImmediate (/runner.js:572:5)
    at processImmediate (/timers.js:456:21)`,
  },
  __extra_diag_info__: {
    pre_parse_callback_callCount: 1,
    post_parse_callback_callCount: 1,
    post_parse_diaginfo: {
      sharedState_yy: {
        actionInclude: [],
        options: {},
        startConditions: {},
        __options_flags__: 0,
        __options_category_description__: 'the lexer rules definition section',
        __inside_scoped_ruleset__: false,
        __context_cfg_stack__: [
          {
            flags: 0,
            descr: '???',
            scoped: false,
          },
        ],
        depth: 0,
        include_command_allowed: false,
      },
      hash: {
        errStr: null,
        exception: null,
        text: '',
        value: '',
        token: 'end of input',
        token_id: 1,
        line: 6,
        expected: null,
        recoverable: false,
        state: 87,
        action: 2,
        new_state: 3,
        stack_pointer: 6,
      },
      reentrant_call_depth: 1,
      error_infos_stack: [
        {
          errStr: `Parse error on line 5:
}
^
Expecting end of input, "<", "|", "(", "/", ".", "^", "$", "ACTION_START_AT_SOL", "UNTERMINATED_ACTION_BLOCK", "ACTION_START", "UNKNOWN_DECL", "OPTIONS", "IMPORT", "INIT_CODE", "START_INC", "START_EXC", "%%", "SPECIAL_GROUP", "/!", "REGEX_SPECIAL_CHAR", "ESCAPED_CHAR", macro name in '{...}' curly braces, "REGEX_SET_START", "STRING_LIT", "CHARACTER_LIT", "option_keyword", "import_keyword", "init_code_keyword", "start_inclusive_keyword", "start_exclusive_keyword", "start_conditions_marker", "start_epilogue_marker", "scoped_rules_collective", "rule", "start_conditions", "regex", "nonempty_regex_list", "regex_concat", "regex_base", "name_expansion", "any_group_regex", "literal_string", "epilogue", got unexpected "}"`,
          exception: null,
          text: '}',
          value: '}',
          token: '"}"',
          token_id: 5,
          line: 4,
          recoverable: true,
          state: 25,
          action: 0,
          new_state: 196,
          stack_pointer: 5,
        },
        {
          errStr: `
There's probably an error in one or more of your lexer regex rules.
The lexer rule spec should have this structure:
    
        regex  action_code
    
where 'regex' is a lex-style regex expression (see the
jison and jison-lex documentation) which is intended to match a chunk
of the input to lex, while the 'action_code' block is the JS code
which will be invoked when the regex is matched. The 'action_code' block
may be any (indented!) set of JS statements, optionally surrounded
by '{...}' curly braces or otherwise enclosed in a '%{...%}' block.
    
  Erroneous code:
2: "["[^\\]]"]" %{
3: return true;
4: %}
5: }
^..^
6: 
7: 
    
  Technical error report:
Parse error on line 5:
}
^
Expecting end of input, "<", "|", "(", "/", ".", "^", "$", "ACTION_START_AT_SOL", "UNTERMINATED_ACTION_BLOCK", "ACTION_START", "UNKNOWN_DECL", "OPTIONS", "IMPORT", "INIT_CODE", "START_INC", "START_EXC", "%%", "SPECIAL_GROUP", "/!", "REGEX_SPECIAL_CHAR", "ESCAPED_CHAR", macro name in '{...}' curly braces, "REGEX_SET_START", "STRING_LIT", "CHARACTER_LIT", "option_keyword", "import_keyword", "init_code_keyword", "start_inclusive_keyword", "start_exclusive_keyword", "start_conditions_marker", "start_epilogue_marker", "scoped_rules_collective", "rule", "start_conditions", "regex", "nonempty_regex_list", "regex_concat", "regex_base", "name_expansion", "any_group_regex", "literal_string", "epilogue", got unexpected "}"
`,
          exception: null,
          text: '',
          value: '',
          token: 'end of input',
          token_id: 1,
          line: 6,
          recoverable: false,
          state: 87,
          action: 2,
          new_state: 3,
          stack_pointer: 6,
        },
        {
          errStr: null,
          exception: null,
          text: '',
          value: '',
          token: 'end of input',
          token_id: 1,
          line: 6,
          expected: null,
          recoverable: false,
          state: 87,
          action: 2,
          new_state: 3,
          stack_pointer: 6,
        },
      ],
      error_recovery_stack: [
        {
          errStr: `Parse error on line 5:
}
^
Expecting end of input, "<", "|", "(", "/", ".", "^", "$", "ACTION_START_AT_SOL", "UNTERMINATED_ACTION_BLOCK", "ACTION_START", "UNKNOWN_DECL", "OPTIONS", "IMPORT", "INIT_CODE", "START_INC", "START_EXC", "%%", "SPECIAL_GROUP", "/!", "REGEX_SPECIAL_CHAR", "ESCAPED_CHAR", macro name in '{...}' curly braces, "REGEX_SET_START", "STRING_LIT", "CHARACTER_LIT", "option_keyword", "import_keyword", "init_code_keyword", "start_inclusive_keyword", "start_exclusive_keyword", "start_conditions_marker", "start_epilogue_marker", "scoped_rules_collective", "rule", "start_conditions", "regex", "nonempty_regex_list", "regex_concat", "regex_base", "name_expansion", "any_group_regex", "literal_string", "epilogue", got unexpected "}"`,
          exception: null,
          text: '}',
          value: '}',
          token: '"}"',
          token_id: 5,
          line: 4,
          recoverable: true,
          state: 25,
          action: 0,
          new_state: 196,
          stack_pointer: 5,
          base_pointer: 9,
          info_stack_pointer: 13,
          root_failure_pointer: 5,
        },
        {
          errStr: `
There's probably an error in one or more of your lexer regex rules.
The lexer rule spec should have this structure:
    
        regex  action_code
    
where 'regex' is a lex-style regex expression (see the
jison and jison-lex documentation) which is intended to match a chunk
of the input to lex, while the 'action_code' block is the JS code
which will be invoked when the regex is matched. The 'action_code' block
may be any (indented!) set of JS statements, optionally surrounded
by '{...}' curly braces or otherwise enclosed in a '%{...%}' block.
    
  Erroneous code:
2: "["[^\\]]"]" %{
3: return true;
4: %}
5: }
^..^
6: 
7: 
    
  Technical error report:
Parse error on line 5:
}
^
Expecting end of input, "<", "|", "(", "/", ".", "^", "$", "ACTION_START_AT_SOL", "UNTERMINATED_ACTION_BLOCK", "ACTION_START", "UNKNOWN_DECL", "OPTIONS", "IMPORT", "INIT_CODE", "START_INC", "START_EXC", "%%", "SPECIAL_GROUP", "/!", "REGEX_SPECIAL_CHAR", "ESCAPED_CHAR", macro name in '{...}' curly braces, "REGEX_SET_START", "STRING_LIT", "CHARACTER_LIT", "option_keyword", "import_keyword", "init_code_keyword", "start_inclusive_keyword", "start_exclusive_keyword", "start_conditions_marker", "start_epilogue_marker", "scoped_rules_collective", "rule", "start_conditions", "regex", "nonempty_regex_list", "regex_concat", "regex_base", "name_expansion", "any_group_regex", "literal_string", "epilogue", got unexpected "}"
`,
          exception: null,
          text: '',
          value: '',
          token: 'end of input',
          token_id: 1,
          line: 6,
          recoverable: false,
          state: 87,
          action: 2,
          new_state: 3,
          stack_pointer: 6,
          base_pointer: 9,
          info_stack_pointer: 9,
          root_failure_pointer: 6,
          yyError: true,
          errorRuleDepth: -1,
          recovering: 2,
        },
      ],
      error_infos_stack_size: 3,
      error_recovery_stack_size: 2,
    },
    reentrant_call_depth: 0,
    error_infos_stack_size: 0,
    error_recovery_stack_size: 0,
  },
  __original_input__: `%%
"["[^\\]]"]" %{
return true;
%}
}

`,
}