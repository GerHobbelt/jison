{
  fail: 1,
  spec: `%%
"["[^\\]]"]" %{
return true;
%}
}

`,
  err: {
    name: 'JisonParserError',
    message: `
There's probably an error in one or more of your lexer regex rules.
The lexer rule spec should have this structure:
    
        regex  action_code
    
where 'regex' is a lex-style regex expression (see the
jison and jison-lex documentation) which is intended to match a chunk
of the input to lex, while the 'action_code' block is the JS code
which will be invoked when the regex is matched. The 'action_code' block
may be any (indented!) set of JS statements, optionally surrounded
by '{...}' curly braces or otherwise enclosed in a '%{...%}' block.
    
  Erroneous code:
2: "["[^\\]]"]" %{
3: return true;
4: %}
5: }
^..^
6: 
7: 
    
  Technical error report:
Parse error on line 5:
}
^
Expecting end of input, "<", "|", "(", "/", ".", "^", "$", "ACTION_START_AT_SOL", "UNTERMINATED_ACTION_BLOCK", "ACTION_START", "UNKNOWN_DECL", "OPTIONS", "IMPORT", "CODE", "START_INC", "START_EXC", "%%", "SPECIAL_GROUP", "/!", "REGEX_SPECIAL_CHAR", "ESCAPED_CHAR", macro name in '{...}' curly braces, "REGEX_SET_START", "STRING_LIT", "CHARACTER_LIT", "option_keyword", "import_keyword", "init_code_keyword", "start_inclusive_keyword", "start_exclusive_keyword", "start_conditions_marker", "start_epilogue_marker", "scoped_rules_collective", "rule", "start_conditions", "regex", "nonempty_regex_list", "regex_concat", "regex_base", "name_expansion", "any_group_regex", "literal_string", "epilogue", got unexpected "}"
`,
    stack: `JisonParserError: 
There's probably an error in one or more of your lexer regex rules.
The lexer rule spec should have this structure:
    
        regex  action_code
    
where 'regex' is a lex-style regex expression (see the
jison and jison-lex documentation) which is intended to match a chunk
of the input to lex, while the 'action_code' block is the JS code
which will be invoked when the regex is matched. The 'action_code' block
may be any (indented!) set of JS statements, optionally surrounded
by '{...}' curly braces or otherwise enclosed in a '%{...%}' block.
    
  Erroneous code:
2: "["[^\\]]"]" %{
3: return true;
4: %}
5: }
^..^
6: 
7: 
    
  Technical error report:
Parse error on line 5:
}
^
Expecting end of input, "<", "|", "(", "/", ".", "^", "$", "ACTION_START_AT_SOL", "UNTERMINATED_ACTION_BLOCK", "ACTION_START", "UNKNOWN_DECL", "OPTIONS", "IMPORT", "CODE", "START_INC", "START_EXC", "%%", "SPECIAL_GROUP", "/!", "REGEX_SPECIAL_CHAR", "ESCAPED_CHAR", macro name in '{...}' curly braces, "REGEX_SET_START", "STRING_LIT", "CHARACTER_LIT", "option_keyword", "import_keyword", "init_code_keyword", "start_inclusive_keyword", "start_exclusive_keyword", "start_conditions_marker", "start_epilogue_marker", "scoped_rules_collective", "rule", "start_conditions", "regex", "nonempty_regex_list", "regex_concat", "regex_base", "name_expansion", "any_group_regex", "literal_string", "epilogue", got unexpected "}"

    at Object.parseError (/lex-parser-cjs.js:6525:15)
    at Object.yyError (/lex-parser-cjs.js:6708:25)
    at Object.parser__PerformAction (/lex-parser-cjs.js:2613:14)
    at Object.parse (/lex-parser-cjs.js:7772:24)
    at Object.yyparse [as parse] (/lex-parser-cjs.js:11622:25)
    at Context.testEachParserExample (/all-tests.js:336:27)
    at callFn (/runnable.js:364:21)
    at Test.Runnable.run (/runnable.js:352:5)
    at Runner.runTest (/runner.js:677:10)
    at /runner.js:801:12
    at next (/runner.js:594:14)
    at /runner.js:604:7
    at next (/runner.js:486:14)
    at cbHookRun (/runner.js:551:7)
    at done (/runnable.js:308:5)
    at callFn (/runnable.js:387:7)
    at Hook.Runnable.run (/runnable.js:352:5)
    at next (/runner.js:510:10)
    at Immediate._onImmediate (/runner.js:572:5)
    at processImmediate (/timers.js:456:21)`,
    hash: {
      errStr: `
There's probably an error in one or more of your lexer regex rules.
The lexer rule spec should have this structure:
    
        regex  action_code
    
where 'regex' is a lex-style regex expression (see the
jison and jison-lex documentation) which is intended to match a chunk
of the input to lex, while the 'action_code' block is the JS code
which will be invoked when the regex is matched. The 'action_code' block
may be any (indented!) set of JS statements, optionally surrounded
by '{...}' curly braces or otherwise enclosed in a '%{...%}' block.
    
  Erroneous code:
2: "["[^\\]]"]" %{
3: return true;
4: %}
5: }
^..^
6: 
7: 
    
  Technical error report:
Parse error on line 5:
}
^
Expecting end of input, "<", "|", "(", "/", ".", "^", "$", "ACTION_START_AT_SOL", "UNTERMINATED_ACTION_BLOCK", "ACTION_START", "UNKNOWN_DECL", "OPTIONS", "IMPORT", "CODE", "START_INC", "START_EXC", "%%", "SPECIAL_GROUP", "/!", "REGEX_SPECIAL_CHAR", "ESCAPED_CHAR", macro name in '{...}' curly braces, "REGEX_SET_START", "STRING_LIT", "CHARACTER_LIT", "option_keyword", "import_keyword", "init_code_keyword", "start_inclusive_keyword", "start_exclusive_keyword", "start_conditions_marker", "start_epilogue_marker", "scoped_rules_collective", "rule", "start_conditions", "regex", "nonempty_regex_list", "regex_concat", "regex_base", "name_expansion", "any_group_regex", "literal_string", "epilogue", got unexpected "}"
`,
      exception: null,
      text: '',
      value: '',
      token: 'end of input',
      token_id: 1,
      line: 6,
      loc: {
        first_line: 7,
        first_column: 0,
        last_line: 7,
        last_column: 0,
        range: [
          37,
          37,
        ],
      },
      expected: [
        'end of input',
      ],
      recoverable: false,
      state: 87,
      action: 2,
      new_state: 3,
      symbol_stack: [],
      state_stack: [],
      value_stack: [],
      location_stack: [],
      stack_pointer: 6,
      yy: {
        actionInclude: [],
        options: {},
        __options_flags__: 0,
        __options_category_description__: 'the lexer epilogue section',
        startConditions: {},
        __context_description__: [
          '???CONTEXT???',
        ],
        depth: 0,
        include_command_allowed: false,
      },
      lexer: {
        yy: {},
        _input: '',
        _clear_state: -1,
        _signaled_error_token: false,
        done: false,
        yylineno: 0,
        matched: '',
        conditionStack: [
          'INITIAL',
        ],
        yylloc: {
          first_line: 1,
          first_column: 0,
          last_line: 1,
          last_column: 0,
          range: [
            0,
            0,
          ],
        },
        offset: 0,
        base_position: 0,
        yytext: '',
        yyleng: 0,
        match: '',
        matches: false,
        _more: false,
        _backtrack: false,
      },
      parser: {
        yy: {},
        options: {
          type: 'lalr',
          hasPartialLrUpgradeOnConflict: true,
          errorRecoveryTokenDiscardCount: 3,
          ebnf: true,
        },
        symbols_: {
          $: 16,
          $accept: 0,
          $end: 1,
          '%%': 33,
          '(': 8,
          ')': 9,
          '*': 11,
          '+': 10,
          ',': 17,
          '.': 14,
          '/': 13,
          '/!': 41,
          '<': 3,
          '=': 18,
          '>': 6,
          '?': 12,
          ACTION_BODY: 35,
          ACTION_END: 23,
          ACTION_START: 25,
          ACTION_START_AT_SOL: 22,
          ARROW_ACTION_START: 34,
          BRACKET_MISSING: 37,
          BRACKET_SURPLUS: 38,
          CHARACTER_LIT: 50,
          CODE: 29,
          DUMMY3: 51,
          EOF: 1,
          ESCAPED_CHAR: 43,
          IMPORT: 28,
          INCLUDE: 30,
          INCLUDE_PLACEMENT_ERROR: 36,
          MACRO_END: 20,
          MACRO_NAME: 19,
          NAME_BRACE: 44,
          OPTIONS: 27,
          OPTIONS_END: 21,
          OPTION_STRING: 52,
          OPTION_VALUE: 53,
          RANGE_REGEX: 48,
          REGEX_SET: 47,
          REGEX_SET_END: 46,
          REGEX_SET_START: 45,
          REGEX_SPECIAL_CHAR: 42,
          SPECIAL_GROUP: 40,
          START_EXC: 32,
          START_INC: 31,
          STRING_LIT: 49,
          TRAILING_CODE_CHUNK: 54,
          UNKNOWN_DECL: 26,
          UNTERMINATED_ACTION_BLOCK: 24,
          UNTERMINATED_STRING_ERROR: 39,
          '^': 15,
          action: 73,
          any_group_regex: 81,
          definition: 59,
          definitions: 58,
          epilogue: 90,
          epilogue_chunk: 92,
          epilogue_chunks: 91,
          error: 2,
          import_keyword: 61,
          include_keyword: 63,
          include_macro_code: 93,
          init: 57,
          init_code_keyword: 62,
          lex: 55,
          literal_string: 85,
          name_expansion: 80,
          nonempty_regex_list: 77,
          option: 87,
          option_keyword: 60,
          option_list: 86,
          option_name: 88,
          option_value: 89,
          range_regex: 84,
          regex: 75,
          regex_base: 79,
          regex_concat: 78,
          regex_list: 76,
          regex_set: 82,
          regex_set_atom: 83,
          rule: 72,
          rule_block: 71,
          rules: 69,
          rules_and_epilogue: 56,
          scoped_rules_collective: 70,
          start_conditions: 74,
          start_conditions_marker: 66,
          start_epilogue_marker: 68,
          start_exclusive_keyword: 65,
          start_inclusive_keyword: 64,
          start_productions_marker: 67,
          '{': 4,
          '|': 7,
          '}': 5,
        },
        terminals_: {
          '1': 'EOF',
          '2': 'error',
          '3': '<',
          '4': '{',
          '5': '}',
          '6': '>',
          '7': '|',
          '8': '(',
          '9': ')',
          '10': '+',
          '11': '*',
          '12': '?',
          '13': '/',
          '14': '.',
          '15': '^',
          '16': '$',
          '17': ',',
          '18': '=',
          '19': 'MACRO_NAME',
          '20': 'MACRO_END',
          '21': 'OPTIONS_END',
          '22': 'ACTION_START_AT_SOL',
          '23': 'ACTION_END',
          '24': 'UNTERMINATED_ACTION_BLOCK',
          '25': 'ACTION_START',
          '26': 'UNKNOWN_DECL',
          '27': 'OPTIONS',
          '28': 'IMPORT',
          '29': 'CODE',
          '30': 'INCLUDE',
          '31': 'START_INC',
          '32': 'START_EXC',
          '33': '%%',
          '34': 'ARROW_ACTION_START',
          '35': 'ACTION_BODY',
          '36': 'INCLUDE_PLACEMENT_ERROR',
          '37': 'BRACKET_MISSING',
          '38': 'BRACKET_SURPLUS',
          '39': 'UNTERMINATED_STRING_ERROR',
          '40': 'SPECIAL_GROUP',
          '41': '/!',
          '42': 'REGEX_SPECIAL_CHAR',
          '43': 'ESCAPED_CHAR',
          '44': 'NAME_BRACE',
          '45': 'REGEX_SET_START',
          '46': 'REGEX_SET_END',
          '47': 'REGEX_SET',
          '48': 'RANGE_REGEX',
          '49': 'STRING_LIT',
          '50': 'CHARACTER_LIT',
          '51': 'DUMMY3',
          '52': 'OPTION_STRING',
          '53': 'OPTION_VALUE',
          '54': 'TRAILING_CODE_CHUNK',
        },
        terminal_descriptions_: {
          '44': "macro name in '{...}' curly braces",
        },
        TERROR: 2,
        EOF: 1,
        __reentrant_call_depth: 0,
        __error_infos: [
          {
            errStr: `Parse error on line 5:
}
^
Expecting end of input, "<", "|", "(", "/", ".", "^", "$", "ACTION_START_AT_SOL", "UNTERMINATED_ACTION_BLOCK", "ACTION_START", "UNKNOWN_DECL", "OPTIONS", "IMPORT", "CODE", "START_INC", "START_EXC", "%%", "SPECIAL_GROUP", "/!", "REGEX_SPECIAL_CHAR", "ESCAPED_CHAR", macro name in '{...}' curly braces, "REGEX_SET_START", "STRING_LIT", "CHARACTER_LIT", "option_keyword", "import_keyword", "init_code_keyword", "start_inclusive_keyword", "start_exclusive_keyword", "start_conditions_marker", "start_epilogue_marker", "scoped_rules_collective", "rule", "start_conditions", "regex", "nonempty_regex_list", "regex_concat", "regex_base", "name_expansion", "any_group_regex", "literal_string", "epilogue", got unexpected "}"`,
            exception: null,
            text: '}',
            value: '}',
            token: '"}"',
            token_id: 5,
            line: 4,
            recoverable: true,
            state: 25,
            action: 0,
            new_state: 189,
            stack_pointer: 5,
          },
          {
            errStr: `
There's probably an error in one or more of your lexer regex rules.
The lexer rule spec should have this structure:
    
        regex  action_code
    
where 'regex' is a lex-style regex expression (see the
jison and jison-lex documentation) which is intended to match a chunk
of the input to lex, while the 'action_code' block is the JS code
which will be invoked when the regex is matched. The 'action_code' block
may be any (indented!) set of JS statements, optionally surrounded
by '{...}' curly braces or otherwise enclosed in a '%{...%}' block.
    
  Erroneous code:
2: "["[^\\]]"]" %{
3: return true;
4: %}
5: }
^..^
6: 
7: 
    
  Technical error report:
Parse error on line 5:
}
^
Expecting end of input, "<", "|", "(", "/", ".", "^", "$", "ACTION_START_AT_SOL", "UNTERMINATED_ACTION_BLOCK", "ACTION_START", "UNKNOWN_DECL", "OPTIONS", "IMPORT", "CODE", "START_INC", "START_EXC", "%%", "SPECIAL_GROUP", "/!", "REGEX_SPECIAL_CHAR", "ESCAPED_CHAR", macro name in '{...}' curly braces, "REGEX_SET_START", "STRING_LIT", "CHARACTER_LIT", "option_keyword", "import_keyword", "init_code_keyword", "start_inclusive_keyword", "start_exclusive_keyword", "start_conditions_marker", "start_epilogue_marker", "scoped_rules_collective", "rule", "start_conditions", "regex", "nonempty_regex_list", "regex_concat", "regex_base", "name_expansion", "any_group_regex", "literal_string", "epilogue", got unexpected "}"
`,
            exception: null,
            text: '',
            value: '',
            token: 'end of input',
            token_id: 1,
            line: 6,
            loc: {
              first_line: 7,
              first_column: 0,
              last_line: 7,
              last_column: 0,
              range: [
                37,
                37,
              ],
            },
            expected: [
              'end of input',
            ],
            recoverable: false,
            state: 87,
            action: 2,
            new_state: 3,
            symbol_stack: [],
            state_stack: [],
            value_stack: [],
            location_stack: [],
            stack_pointer: 6,
            yy: {
              actionInclude: [],
              options: {},
              __options_flags__: 0,
              __options_category_description__: 'the lexer epilogue section',
              startConditions: {},
              __context_description__: [
                '???CONTEXT???',
              ],
              depth: 0,
              include_command_allowed: false,
            },
            lexer: '[lexer]',
            parser: '[parser]',
          },
        ],
        __error_recovery_infos: '[reference to sibling array --> *.hash.parser.__error_infos.[1].parser.__error_recovery_infos, length = 2]',
        lexer: {
          EOF: 1,
          ERROR: 2,
          __error_infos: '[reference to sibling array --> *.hash.parser.__error_infos.[1].parser.lexer.__error_infos, length = 0]',
          __decompressed: true,
          done: false,
          _backtrack: false,
          _input: '',
          _more: false,
          _signaled_error_token: false,
          _clear_state: -1,
          conditionStack: [
            'INITIAL',
          ],
          match: '',
          matched: '',
          matches: false,
          yytext: '',
          offset: 0,
          base_position: 0,
          yyleng: 0,
          yylineno: 0,
          yylloc: {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0,
            range: [
              0,
              0,
            ],
          },
          CRLF_Re: {
            re: '/\\r\\n?|\\n/',
            source: '\\r\\n?|\\n',
            flags: '',
          },
          options: {
            xregexp: true,
            ranges: true,
            trackPosition: true,
            easy_keyword_rules: true,
          },
          yy: {},
          __original_input__: `%options easy_keyword_rules
%s TEST TEST2
%x EAT
%%
"enter-test" {this.begin('TEST');}
"enter_test" {this.begin('TEST');}
<TEST,EAT>"x" {return 'T';}
<*>"z" {return 'Z';}
<TEST>"y" {this.begin('INITIAL'); return 'TY';}
\\"\\'"a" return 1;
\\"\\'\\\\\\*\\i return 1;
"a"\\b return 2;
\\cA {}
\\012 {}
\\xFF {}
"["[^\\\\]"]" {return true;}
'f"oo\\'bar'  {return 'baz2';}
"fo\\"obar"  {return 'baz';}

`,
        },
        __lexer__: {
          yy: {},
          _input: '',
          _clear_state: -1,
          _signaled_error_token: false,
          done: false,
          yylineno: 0,
          matched: '',
          conditionStack: [
            'INITIAL',
          ],
          __currentRuleSet__: null,
          yylloc: {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0,
            range: [
              0,
              0,
            ],
          },
          offset: 0,
          base_position: 0,
          yytext: '',
          yyleng: 0,
          match: '',
          matches: false,
          _more: false,
          _backtrack: false,
        },
      },
    },
  },
}