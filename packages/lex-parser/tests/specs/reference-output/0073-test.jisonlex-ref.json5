/* 
 * grammar spec generated by @gerhobbelt/lex-parser for input file:
 *     :/0073-test.jisonlex
 */

{
  rules: [
    {
      ast: {
        source: '[IDEM: srcCode]',
        augmentedSource: '[LINE-SHIFTED SOURCE]',
        ast: '[recast AST]',
        fault: false,
      },
      fault: false,
      srcCode: "this.begin('TEST')",
      rule: 'enter-test\\b',
    },
    {
      ast: {
        source: '[IDEM: srcCode]',
        augmentedSource: '[LINE-SHIFTED SOURCE]',
        ast: '[recast AST]',
        fault: false,
      },
      fault: false,
      srcCode: "this.begin('TEST')",
      rule: 'enter_test\\b',
    },
    {
      ast: {
        source: '[IDEM: srcCode]',
        augmentedSource: '[LINE-SHIFTED SOURCE]',
        ast: '[recast AST]',
        fault: false,
      },
      fault: false,
      srcCode: "return 'T'",
      rule: 'x\\b',
      start_condition: [
        'TEST',
        'EAT',
      ],
    },
    {
      ast: {
        source: '[IDEM: srcCode]',
        augmentedSource: '[LINE-SHIFTED SOURCE]',
        ast: '[recast AST]',
        fault: false,
      },
      fault: false,
      srcCode: "return 'Z'",
      rule: 'z\\b',
      start_condition: [
        '*',
      ],
    },
    {
      ast: {
        source: '[IDEM: srcCode]',
        augmentedSource: '[LINE-SHIFTED SOURCE]',
        ast: '[recast AST]',
        fault: false,
      },
      fault: false,
      srcCode: `this.begin('INITIAL'); return 'TY'`,
      rule: 'y\\b',
      start_condition: [
        'TEST',
      ],
    },
    {
      ast: {
        source: '[IDEM: srcCode]',
        augmentedSource: '[LINE-SHIFTED SOURCE]',
        ast: '[recast AST]',
        fault: false,
      },
      fault: false,
      srcCode: 'return 10',
      rule: '"\'a\\b',
    },
    {
      ast: {
        source: '[IDEM: srcCode]',
        augmentedSource: '[LINE-SHIFTED SOURCE]',
        ast: '[recast AST]',
        fault: false,
      },
      fault: false,
      srcCode: 'return 11',
      rule: '"\'\\\\\\*i\\b',
    },
    {
      ast: {
        source: '[IDEM: srcCode]',
        augmentedSource: '[LINE-SHIFTED SOURCE]',
        ast: '[recast AST]',
        fault: false,
      },
      fault: false,
      srcCode: 'return 12',
      rule: 'a\\b',
    },
    {
      ast: {
        source: '',
        fault: false,
      },
      fault: false,
      srcCode: '',
      rule: '\\u0001',
    },
    {
      ast: {
        source: '',
        fault: false,
      },
      fault: false,
      srcCode: '',
      rule: '\\n',
    },
    {
      ast: {
        source: '',
        fault: false,
      },
      fault: false,
      srcCode: '',
      rule: 'Ã¿',
    },
    {
      ast: {
        source: '[IDEM: srcCode]',
        augmentedSource: '[LINE-SHIFTED SOURCE]',
        ast: '[recast AST]',
        fault: false,
      },
      fault: false,
      srcCode: 'return true',
      rule: '\\[[^\\\\]\\]',
    },
    {
      ast: {
        source: '[IDEM: srcCode]',
        augmentedSource: '[LINE-SHIFTED SOURCE]',
        ast: '[recast AST]',
        fault: false,
      },
      fault: false,
      srcCode: "return 'baz2'",
      rule: 'f"oo\'bar\\b',
    },
    {
      ast: {
        source: '[IDEM: srcCode]',
        augmentedSource: '[LINE-SHIFTED SOURCE]',
        ast: '[recast AST]',
        fault: false,
      },
      fault: false,
      srcCode: "return 'baz'",
      rule: 'fo"obar\\b',
    },
  ],
  macros: {},
  startConditions: {
    TEST: 0,
    TEST2: 0,
    EAT: 1,
  },
  codeSections: [],
  importDecls: [],
  unknownDecls: [],
  options: {
    easy_keyword_rules: true,
  },
  __extra_diag_info__: {
    pre_parse_callback_callCount: 1,
    post_parse_callback_callCount: 1,
    post_parse_diaginfo: {
      sharedState_yy: {
        startConditions: '[reference to sibling --> *.startConditions]',
        __options_flags__: 0,
        __options_category_description__: '???',
        __inside_scoped_ruleset__: false,
        __context_cfg_stack__: [],
        depth: 0,
        include_command_allowed: false,
        __inside_condition_set__: false,
      },
      hash: {
        errStr: null,
        exception: null,
        text: '',
        value: '',
        token: '"$accept"',
        token_id: 0,
        line: 26,
        expected: null,
        recoverable: false,
        state: 26,
        action: 2,
        new_state: 1,
        stack_pointer: 5,
      },
      reentrant_call_depth: 1,
      error_infos_stack: [
        {
          errStr: null,
          exception: null,
          text: '',
          value: '',
          token: '"$accept"',
          token_id: 0,
          line: 26,
          expected: null,
          recoverable: false,
          state: 26,
          action: 2,
          new_state: 1,
          stack_pointer: 5,
        },
      ],
      error_recovery_stack: [],
      error_infos_stack_size: 1,
      error_recovery_stack_size: 0,
    },
    reentrant_call_depth: 0,
    error_infos_stack_size: 0,
    error_recovery_stack_size: 0,
  },
  __original_input__: `//
// title: "test %options easy_keyword_rules"
// test_input: "enter-test.x.z a fo\\"obar f\\"oo'bar ab fo\\"obarf"
//
// ...
//

%options easy_keyword_rules
%s TEST TEST2
%x EAT
%%
"enter-test" {this.begin('TEST');}
"enter_test" {this.begin('TEST');}
<TEST,EAT>"x" {return 'T';}
<*>"z" {return 'Z';}
<TEST>"y" {this.begin('INITIAL'); return 'TY';}
\\"\\'"a" return 10;
\\"\\'\\\\\\*\\i return 11;
"a"\\b return 12;
\\cA {}
\\012 {}
\\xFF {}
"["[^\\\\]"]" {return true;}
'f"oo\\'bar'  {return 'baz2';}
"fo\\"obar"  {return 'baz';}

`,
}