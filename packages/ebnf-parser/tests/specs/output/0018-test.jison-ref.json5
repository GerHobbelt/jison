/* 
 * grammar spec generated by @gerhobbelt/ebnf-parser for input file:
 *     :/0018-test.jison
 */

{
  lex: {
    rules: [
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'foo'",
        rule: 'foo',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'bar'",
        rule: 'bar',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'baz'",
        rule: 'baz',
      },
      {
        ast: {
          source: '[IDEM: srcCode]',
          augmentedSource: '[LINE-SHIFTED SOURCE]',
          ast: '[recast AST]',
          fault: false,
        },
        fault: false,
        srcCode: "return 'world'",
        rule: 'world',
      },
    ],
    macros: {},
    startConditions: {},
    codeSections: [],
    importDecls: [],
    unknownDecls: [],
  },
  bnf: {
    test: {
      id: 'test',
      productions: [
        {
          handle: [
            {
              type: 3,
              symbol: 'foo',
            },
            {
              type: 3,
              symbol: 'bar',
            },
          ],
          prec: null,
        },
        {
          handle: [
            {
              type: 3,
              symbol: 'baz',
            },
          ],
          prec: null,
        },
      ],
    },
    hello: {
      id: 'hello',
      productions: [
        {
          handle: [
            {
              type: 3,
              symbol: 'world',
            },
          ],
          prec: null,
        },
      ],
    },
  },
  __original_input__: `
// title: test embedded lexical block
// 
// ...
// 

%lex 
%%
'foo' return 'foo';
'bar' {return 'bar';}
'baz' {return 'baz';}
'world' {return 'world';}
/lex                   %% test: foo bar | baz ; hello: world ;

`,
}