{
  fail: 1,
  spec: `%options foo
%options bar=123

%%

%options fuzz=42

foo: bar;
`,
  err: {
    name: 'JisonParserError',
    message: `
declaration list error?
    
  Erroneous area:
1: %options foo
2: %options bar=123
3: 
4: %%
5: 
6: %options fuzz=42
^..^^^^^^^^
7: 
8: foo: bar;
`,
    stack: `JisonParserError: 
declaration list error?
    
  Erroneous area:
1: %options foo
2: %options bar=123
3: 
4: %%
5: 
6: %options fuzz=42
^..^^^^^^^^
7: 
8: foo: bar;

    at Object.parseError (/ebnf-parser-cjs.js:9335:15)
    at Object.yyError (/ebnf-parser-cjs.js:9518:25)
    at Object.parser__PerformAction (/ebnf-parser-cjs.js:6540:14)
    at Object.parse (/ebnf-parser-cjs.js:10582:24)
    at Object.parse (/ebnf-parser-cjs.js:23544:23)
    at Context.testEachParserExample (/ebnf_parse.js:345:27)
    at callFn (/runnable.js:364:21)
    at Test.Runnable.run (/runnable.js:352:5)
    at Runner.runTest (/runner.js:677:10)
    at /runner.js:801:12
    at next (/runner.js:594:14)
    at /runner.js:604:7
    at next (/runner.js:486:14)
    at cbHookRun (/runner.js:551:7)
    at done (/runnable.js:308:5)
    at callFn (/runnable.js:387:7)
    at Hook.Runnable.run (/runnable.js:352:5)
    at next (/runner.js:510:10)
    at Immediate._onImmediate (/runner.js:572:5)
    at processImmediate (/timers.js:456:21)`,
    hash: {
      errStr: `
declaration list error?
    
  Erroneous area:
1: %options foo
2: %options bar=123
3: 
4: %%
5: 
6: %options fuzz=42
^..^^^^^^^^
7: 
8: foo: bar;
`,
      exception: null,
      text: '%options',
      value: '%options',
      token: '"OPTIONS"',
      token_id: 27,
      line: 5,
      loc: {
        first_line: 6,
        first_column: 0,
        last_line: 6,
        last_column: 8,
        range: [
          35,
          43,
        ],
      },
      expected: [
        'end of input',
        '"%%"',
        '"ACTION"',
        '"START"',
        '"LEX_BLOCK"',
        '"TOKEN"',
        '"DEBUG"',
        '"EBNF"',
        '"UNKNOWN_DECL"',
        '"IMPORT"',
        '"INIT_CODE"',
        '"OPTIONS"',
        '"PARSE_PARAM"',
        '"PARSER_TYPE"',
        '"LEFT"',
        '"RIGHT"',
        '"NONASSOC"',
        '"INCLUDE"',
      ],
      recoverable: false,
      state: 4,
      action: 2,
      new_state: 11,
      symbol_stack: [],
      state_stack: [],
      value_stack: [],
      location_stack: [],
      stack_pointer: 3,
      yy: {},
      lexer: {
        yy: {},
        _input: '',
        _clear_state: -1,
        _signaled_error_token: false,
        done: false,
        yylineno: 0,
        matched: '',
        conditionStack: [
          'INITIAL',
        ],
        yylloc: {
          first_line: 1,
          first_column: 0,
          last_line: 1,
          last_column: 0,
          range: [
            0,
            0,
          ],
        },
        offset: 0,
        base_position: 0,
        yytext: '',
        yyleng: 0,
        match: '',
        matches: false,
        _more: false,
        _backtrack: false,
      },
      parser: {
        yy: {},
        options: {
          type: 'lalr',
          hasPartialLrUpgradeOnConflict: true,
          errorRecoveryTokenDiscardCount: 3,
        },
        symbols_: {
          $accept: 0,
          $end: 1,
          '%%': 14,
          '(': 7,
          ')': 8,
          '*': 9,
          '+': 11,
          ':': 5,
          ';': 4,
          '=': 3,
          '?': 10,
          ACTION: 15,
          ACTION_BODY: 43,
          ALIAS: 40,
          ARROW_ACTION: 38,
          CODE: 46,
          DEBUG: 19,
          EBNF: 20,
          EOF: 1,
          EOF_ID: 41,
          EPSILON: 39,
          ID: 24,
          IMPORT: 22,
          INCLUDE: 44,
          INIT_CODE: 23,
          INTEGER: 37,
          LEFT: 33,
          LEX_BLOCK: 17,
          NAME: 25,
          NONASSOC: 35,
          OPTIONS: 27,
          OPTIONS_END: 28,
          OPTION_STRING_VALUE: 29,
          OPTION_VALUE: 30,
          PARSER_TYPE: 32,
          PARSE_PARAM: 31,
          PATH: 45,
          PREC: 42,
          RIGHT: 34,
          START: 16,
          STRING: 26,
          TOKEN: 18,
          TOKEN_TYPE: 36,
          UNKNOWN_DECL: 21,
          action: 85,
          action_body: 86,
          action_comments_body: 87,
          action_ne: 84,
          associativity: 61,
          declaration: 51,
          declaration_list: 50,
          error: 2,
          expression: 79,
          extra_parser_module_code: 88,
          full_token_definitions: 63,
          grammar: 69,
          handle: 76,
          handle_action: 75,
          handle_list: 74,
          handle_sublist: 77,
          id: 83,
          id_list: 68,
          import_name: 53,
          import_path: 54,
          include_macro_code: 89,
          init_code_name: 52,
          module_code_chunk: 90,
          one_full_token: 64,
          operator: 60,
          option: 57,
          option_list: 56,
          optional_action_header_block: 49,
          optional_end_block: 48,
          optional_module_code_chunk: 91,
          optional_production_description: 73,
          optional_token_type: 65,
          options: 55,
          parse_params: 58,
          parser_type: 59,
          prec: 81,
          production: 71,
          production_id: 72,
          production_list: 70,
          spec: 47,
          suffix: 80,
          suffixed_expression: 78,
          symbol: 82,
          token_description: 67,
          token_list: 62,
          token_value: 66,
          '{': 12,
          '|': 6,
          '}': 13,
        },
        terminals_: {
          '1': 'EOF',
          '2': 'error',
          '3': '=',
          '4': ';',
          '5': ':',
          '6': '|',
          '7': '(',
          '8': ')',
          '9': '*',
          '10': '?',
          '11': '+',
          '12': '{',
          '13': '}',
          '14': '%%',
          '15': 'ACTION',
          '16': 'START',
          '17': 'LEX_BLOCK',
          '18': 'TOKEN',
          '19': 'DEBUG',
          '20': 'EBNF',
          '21': 'UNKNOWN_DECL',
          '22': 'IMPORT',
          '23': 'INIT_CODE',
          '24': 'ID',
          '25': 'NAME',
          '26': 'STRING',
          '27': 'OPTIONS',
          '28': 'OPTIONS_END',
          '29': 'OPTION_STRING_VALUE',
          '30': 'OPTION_VALUE',
          '31': 'PARSE_PARAM',
          '32': 'PARSER_TYPE',
          '33': 'LEFT',
          '34': 'RIGHT',
          '35': 'NONASSOC',
          '36': 'TOKEN_TYPE',
          '37': 'INTEGER',
          '38': 'ARROW_ACTION',
          '39': 'EPSILON',
          '40': 'ALIAS',
          '41': 'EOF_ID',
          '42': 'PREC',
          '43': 'ACTION_BODY',
          '44': 'INCLUDE',
          '45': 'PATH',
          '46': 'CODE',
        },
        TERROR: 2,
        EOF: 1,
        __reentrant_call_depth: 0,
        __error_infos: [
          {
            errStr: `Parse error on line 6:
bottom : word+ EOF;
---------^
Unexpected "ID"`,
            exception: null,
            text: 'word',
            value: 'word',
            token: '"ID"',
            token_id: 24,
            line: 5,
            recoverable: true,
            state: 121,
            action: 0,
            new_state: 165,
            stack_pointer: 7,
          },
          {
            errStr: `
multiple alternative rule productions should be separated by a '|' pipe character, not a ':' colon!
    
  Erroneous area:
4: top : word+ EOF
5: 
6: bottom : word+ EOF;
^...........^^^^
7: 
`,
            exception: null,
            text: 'word',
            value: 'word',
            token: '"$accept"',
            token_id: 0,
            line: 5,
            loc: {
              first_line: 6,
              first_column: 9,
              last_line: 6,
              last_column: 13,
              range: [
                65,
                69,
              ],
            },
            expected: [
              '";"',
              '":"',
              '"|"',
            ],
            recoverable: false,
            state: 146,
            action: 2,
            new_state: 86,
            symbol_stack: [],
            state_stack: [],
            value_stack: [],
            location_stack: [],
            stack_pointer: 8,
            yy: {
              ebnf: true,
            },
            lexer: '[lexer]',
            parser: '[parser]',
          },
          {
            errStr: 'Parsing aborted due to exception.',
            exception: {
              message: '$id is not defined',
              name: 'ReferenceError',
            },
            text: '-> word+ EOF;',
            value: 'word+ EOF;',
            token: '"$accept"',
            token_id: 0,
            line: 3,
            loc: {
              first_line: 4,
              first_column: 4,
              last_line: 4,
              last_column: 17,
              range: [
                64,
                77,
              ],
            },
            expected: null,
            recoverable: false,
            state: 137,
            action: 2,
            new_state: 80,
            symbol_stack: [],
            state_stack: [],
            value_stack: [],
            location_stack: [],
            stack_pointer: 7,
            yy: {
              ebnf: true,
            },
            lexer: '[lexer]',
            parser: '[parser]',
          },
          {
            errStr: `Parse error on line 4:
top :: word+ EOF;
-------^
Unexpected "ID"`,
            exception: null,
            text: 'word',
            value: 'word',
            token: '"ID"',
            token_id: 24,
            line: 3,
            recoverable: true,
            state: 121,
            action: 0,
            new_state: 165,
            stack_pointer: 7,
          },
          {
            errStr: `
multiple alternative rule productions should be separated by a '|' pipe character, not a ':' colon!
    
  Erroneous area:
1: %ebnf
2: %%
3: // double :: instead of single :
4: top :: word+ EOF;
^.........^^^^
5: 
6: bogus: foo bar;
`,
            exception: null,
            text: 'word',
            value: 'word',
            token: '"$accept"',
            token_id: 0,
            line: 3,
            loc: {
              first_line: 4,
              first_column: 7,
              last_line: 4,
              last_column: 11,
              range: [
                49,
                53,
              ],
            },
            expected: [
              '";"',
              '":"',
              '"|"',
            ],
            recoverable: false,
            state: 146,
            action: 2,
            new_state: 86,
            symbol_stack: [],
            state_stack: [],
            value_stack: [],
            location_stack: [],
            stack_pointer: 8,
            yy: {
              ebnf: true,
            },
            lexer: '[lexer]',
            parser: '[parser]',
          },
          {
            errStr: `Parse error on line 3:

^
Expecting "ACTION", "ID", "INCLUDE", "production_list", "production", "production_id", "id", "include_macro_code", got unexpected end of input`,
            exception: null,
            text: '',
            value: '',
            token: 'end of input',
            token_id: 1,
            line: 2,
            recoverable: true,
            state: 29,
            action: 0,
            new_state: 165,
            stack_pointer: 4,
          },
          {
            errStr: `
Maybe you did not correctly separate the parse 'header section' (token definitions, options, lexer spec, etc.) from the grammar rule set with a '%%' on an otherwise empty line?
    
  Erroneous area:
1: // empty grammar
2: %%
3: 
^..^
`,
            exception: null,
            text: '',
            value: '',
            token: '"$accept"',
            token_id: 0,
            line: 2,
            loc: {
              first_line: 3,
              first_column: 0,
              last_line: 3,
              last_column: 0,
              range: [
                20,
                20,
              ],
            },
            expected: [
              'end of input',
            ],
            recoverable: false,
            state: 30,
            action: 2,
            new_state: 3,
            symbol_stack: [],
            state_stack: [],
            value_stack: [],
            location_stack: [],
            stack_pointer: 4,
            yy: {},
            lexer: '[lexer]',
            parser: '[parser]',
          },
          {
            errStr: `Parse error on line 4:
%%
^
Expecting "ACTION", "ID", "INCLUDE", "production_list", "production", "production_id", "id", "include_macro_code", got unexpected "%%"`,
            exception: null,
            text: '%%',
            value: '%%',
            token: '"%%"',
            token_id: 14,
            line: 3,
            recoverable: true,
            state: 29,
            action: 0,
            new_state: 165,
            stack_pointer: 4,
          },
          {
            errStr: `
declaration list error?
    
  Erroneous area:
1: // empty grammar with user action block
2: %%
3: 
4: %%
^..^^
`,
            exception: null,
            text: '%%',
            value: '%%',
            token: '"%%"',
            token_id: 14,
            line: 3,
            loc: {
              first_line: 4,
              first_column: 0,
              last_line: 4,
              last_column: 2,
              range: [
                44,
                46,
              ],
            },
            expected: [
              'end of input',
              '"%%"',
              '"ACTION"',
              '"START"',
              '"LEX_BLOCK"',
              '"TOKEN"',
              '"DEBUG"',
              '"EBNF"',
              '"UNKNOWN_DECL"',
              '"IMPORT"',
              '"INIT_CODE"',
              '"OPTIONS"',
              '"PARSE_PARAM"',
              '"PARSER_TYPE"',
              '"LEFT"',
              '"RIGHT"',
              '"NONASSOC"',
              '"INCLUDE"',
            ],
            recoverable: false,
            state: 4,
            action: 2,
            new_state: 11,
            symbol_stack: [],
            state_stack: [],
            value_stack: [],
            location_stack: [],
            stack_pointer: 3,
            yy: {},
            lexer: '[lexer]',
            parser: '[parser]',
          },
          {
            errStr: `Parse error on line 12:
%%
^
Expecting ":", "STRING", "ARROW_ACTION", "optional_production_description", got unexpected "%%"`,
            exception: null,
            text: '%%',
            value: '%%',
            token: '"%%"',
            token_id: 14,
            line: 11,
            recoverable: true,
            state: 70,
            action: 0,
            new_state: 165,
            stack_pointer: 6,
          },
          {
            errStr: `
rule id should be followed by a colon, but that one seems missing?
    
  Erroneous area:
10: fuzz
11: 
12: %%
^^..^^
    
  Technical error report:
Parse error on line 12:
%%
^
Expecting ":", "STRING", "ARROW_ACTION", "optional_production_description", got unexpected "%%"
`,
            exception: null,
            text: '%%',
            value: '%%',
            token: '"$accept"',
            token_id: 0,
            line: 11,
            loc: {
              first_line: 12,
              first_column: 0,
              last_line: 12,
              last_column: 2,
              range: [
                80,
                82,
              ],
            },
            expected: [
              '";"',
              '":"',
              '"|"',
              '"("',
              '"{"',
              '"ACTION"',
              '"ID"',
              '"STRING"',
              '"ARROW_ACTION"',
              '"EPSILON"',
              '"EOF_ID"',
              '"PREC"',
              '"INCLUDE"',
            ],
            recoverable: false,
            state: 136,
            action: 2,
            new_state: 79,
            symbol_stack: [],
            state_stack: [],
            value_stack: [],
            location_stack: [],
            stack_pointer: 8,
            yy: {},
            lexer: '[lexer]',
            parser: '[parser]',
          },
          {
            errStr: `Parse error on line 6:
%options f...
^
Expecting "ACTION", "ID", "INCLUDE", "production_list", "production", "production_id", "id", "include_macro_code", got unexpected "OPTIONS"`,
            exception: null,
            text: '%options',
            value: '%options',
            token: '"OPTIONS"',
            token_id: 27,
            line: 5,
            recoverable: true,
            state: 29,
            action: 0,
            new_state: 165,
            stack_pointer: 4,
          },
          {
            errStr: `
declaration list error?
    
  Erroneous area:
1: %options foo
2: %options bar=123
3: 
4: %%
5: 
6: %options fuzz=42
^..^^^^^^^^
7: 
8: foo: bar;
`,
            exception: null,
            text: '%options',
            value: '%options',
            token: '"OPTIONS"',
            token_id: 27,
            line: 5,
            loc: {
              first_line: 6,
              first_column: 0,
              last_line: 6,
              last_column: 8,
              range: [
                35,
                43,
              ],
            },
            expected: [
              'end of input',
              '"%%"',
              '"ACTION"',
              '"START"',
              '"LEX_BLOCK"',
              '"TOKEN"',
              '"DEBUG"',
              '"EBNF"',
              '"UNKNOWN_DECL"',
              '"IMPORT"',
              '"INIT_CODE"',
              '"OPTIONS"',
              '"PARSE_PARAM"',
              '"PARSER_TYPE"',
              '"LEFT"',
              '"RIGHT"',
              '"NONASSOC"',
              '"INCLUDE"',
            ],
            recoverable: false,
            state: 4,
            action: 2,
            new_state: 11,
            symbol_stack: [],
            state_stack: [],
            value_stack: [],
            location_stack: [],
            stack_pointer: 3,
            yy: {},
            lexer: '[lexer]',
            parser: '[parser]',
          },
        ],
        __error_recovery_infos: '[reference to sibling array --> *.hash.parser.__error_infos.[1].parser.__error_recovery_infos, length = 12]',
        lexer: {
          EOF: 1,
          ERROR: 2,
          __error_infos: '[reference to sibling array --> *.hash.parser.__error_infos.[1].parser.lexer.__error_infos, length = 0]',
          __decompressed: true,
          done: true,
          _backtrack: false,
          _input: '',
          _more: false,
          _signaled_error_token: false,
          _clear_state: 0,
          conditionStack: [
            'INITIAL',
            'ebnf',
          ],
          match: '',
          matched: `// invalid option-style line:
%foo blarg!

%%

foo: bar;
`,
          matches: false,
          yytext: '',
          offset: 57,
          base_position: 0,
          yyleng: 0,
          yylineno: 6,
          yylloc: {
            first_line: 7,
            first_column: 0,
            last_line: 7,
            last_column: 0,
            range: [
              57,
              57,
            ],
          },
          CRLF_Re: {
            re: '/\\r\\n?|\\n/',
            source: '\\r\\n?|\\n',
            flags: '',
          },
          options: {
            xregexp: true,
            ranges: true,
            trackPosition: true,
            easy_keyword_rules: true,
          },
          yy: {
            depth: 0,
            ebnf: true,
          },
          __original_input__: `// invalid option-style line:
%foo blarg!

%%

foo: bar;
`,
        },
        __lexer__: {
          yy: {},
          _input: '',
          _clear_state: -1,
          _signaled_error_token: false,
          done: false,
          yylineno: 0,
          matched: '',
          conditionStack: [
            'INITIAL',
          ],
          __currentRuleSet__: null,
          yylloc: {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0,
            range: [
              0,
              0,
            ],
          },
          offset: 0,
          base_position: 0,
          yytext: '',
          yyleng: 0,
          match: '',
          matches: false,
          _more: false,
          _backtrack: false,
        },
      },
    },
  },
}