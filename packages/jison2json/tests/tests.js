const assert = require('chai').assert;
const fs = require('fs');
const path = require('path');
const yaml = require('@gerhobbelt/js-yaml');
const JSON5 = require('@gerhobbelt/json5');
const globby = require('globby');
const helpers = require('../../helpers-lib/dist/helpers-lib-cjs');
const rmCommonWS = helpers.rmCommonWS;

const jison2json = require('../jison2json');








console.log('exec glob....', __dirname);
const original_cwd = process.cwd();
process.chdir(__dirname);
let testset = globby.sync([
    './specs/*.jison',
    './specs/*.json5',
]);
// also compile and run the grammars in the /jison/examples/ directory:
let testset2 = globby.sync([
    '../../../examples/*.jison',
    '../../../examples/*.json5',
    '../../../examples/*.l',
    '../../../examples/*.lex',
    '../../../examples/*.y',
    '../../../examples/*.yacc',
    '../../../examples/*.jisonlex',
]);
// also compile and run the grammars in the /jison-lex/examples/ directory:
let testset3 = globby.sync([
    '../../jison-lex/examples/*.jison',
    '../../jison-lex/examples/*.json5',
    '../../jison-lex/examples/*.l',
    '../../jison-lex/examples/*.lex',
    '../../jison-lex/examples/*.jisonlex',
]);
// also compile and run the grammars in the /ebnf-parser/tests/specs/, etc. directories:
let testset4 = globby.sync([
    '../../ebnf-parser/tests/specs/*.jison',
    '../../jison-lex/tests/specs/*.jison',
    '../../jison-lex/tests/specs/*.json5',
    '../../jison-lex/tests/specs/*.l',
    '../../jison-lex/tests/specs/*.lex',
    '../../jison-lex/tests/specs/*.jisonlex',
    '../../lex-parser/tests/specs/*.jisonlex',
    '../../lex-parser/tests/lex/*.jisonlex',
]);

testset = testset.sort();
testset2 = testset2.sort();
testset3 = testset3.sort();
testset4 = testset4.sort();
testset = testset.concat(testset2, testset3, testset4);     // append testset2,... at the end of the list


const testsetSpec = helpers.setupFileBasedTestRig(__dirname, testset, 'jison2json', { useGeneratorRef: false });










//
// compile these grammar specs and check their JSON structure
//
describe('JISON2JSON', function () {

    beforeEach(function beforeEachTest() {
        // ...
    });

    testsetSpec.filespecList.forEach(function (filespec) {
        // process this file:
        let title = (filespec.meta ? filespec.meta.title : null);

        let testname = 'test: ' + filespec.filepath4display + (title ? ' :: ' + title : '');

        console.error('generate test: ', testname);

        // and create a test for it:
        it(testname, function testEachExample() {
            let json;
            let grammar = filespec.grammar;
            let lexerspec = null;

            try {
                // Change CWD to the directory where the source grammar resides: this helps us properly
                // %include any files mentioned in the grammar with relative paths:
                process.chdir(path.dirname(filespec.path));

                switch (filespec.type) {
                case 'jisonlex':
                case 'lex':
                case 'l':
                    lexerspec = grammar;
                    grammar = '';
                    break;
                }
                json = jison2json.convert(grammar, lexerspec);
            } catch (ex) {
                json = {
                    fail: 1,
                    meta: filespec.spec.meta,
                    err: ex
                };
            } finally {
                process.chdir(original_cwd);
            }

            // either we check/test the correctness of the collected input, iff there's
            // a reference provided, OR we create the reference file for future use:
            let refOut = JSON5.stringify(json, {
                space: 2,
                circularRefHandler: testsetSpec.testrig_JSON5circularRefHandler
            });

            // strip away devbox-specific paths in error stack traces in the output:
            refOut = testsetSpec.stripErrorStackPaths(refOut);

            refOut = rmCommonWS`
                /* 
                 * grammar spec generated by @gerhobbelt/jison2json for input file:
                 *     ${filespec.filepath4display}
                 */

            `.trimStart() + refOut;

            // and convert it back so we have a 'grammar' set that's cleaned up
            // and potentially matching the stored reference set:
            json = JSON5.parse(refOut);

            if (filespec.ref) {
                // Perform the validations only AFTER we've written the files to output:
                // several tests produce very large outputs, which we shouldn't let assert() process
                // for diff reporting as that takes bloody ages:
                //assert.deepEqual(json, filespec.ref);
            } else {
                fs.writeFileSync(filespec.outputRefPath, refOut, 'utf8');
                filespec.ref = json;
            }
            fs.writeFileSync(filespec.outputOutPath, refOut, 'utf8');

            // now that we have saved all data, perform the validation checks:
            // keep them simple so assert doesn't need a lot of time to produce diff reports
            // when the test fails:
            //
            // stringify the grammars! (no assert.deepEqual!)
            let ist = JSON5.stringify(testsetSpec.cleanStackTrace4Comparison(json), null, 2);
            let soll = JSON5.stringify(testsetSpec.cleanStackTrace4Comparison(filespec.ref), null, 2);
            assert.equal(testsetSpec.reduceWhitespace(ist), testsetSpec.reduceWhitespace(soll), 'generated grammar spec does not match reference; please compare /output/ vs /reference-output/');
        });
    });
});

